{"file_contents":{"App.tsx":{"content":"import React, { useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { View, ActivityIndicator, StyleSheet } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\n// Import global styles\nimport './src/global.css';\n\n// Import our services and stores\nimport { AuthService } from '@/services/supabase/auth';\nimport { useAppStore } from '@/stores/appStore';\n\n// Import hooks\nimport { useRealtimeSubscriptions } from '@/hooks/useRealtimeSubscriptions';\n\n// Import navigation\nimport AppNavigator from '@/navigation/AppNavigator';\n\nexport default function App() {\n  const { isLoading, isAuthenticated } = useAppStore();\n\n  // Initialize real-time subscriptions\n  useRealtimeSubscriptions();\n\n  useEffect(() => {\n    // Initialize auth state listener\n    AuthService.initializeAuthListener();\n\n    // Check if user is already authenticated\n    const initializeAuth = async () => {\n      const authenticated = await AuthService.isAuthenticated();\n      useAppStore.getState().setAuthenticated(authenticated);\n      useAppStore.getState().setLoading(false);\n    };\n\n    initializeAuth();\n  }, []);\n\n  if (isLoading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#3b82f6\" />\n        <StatusBar style=\"dark\" />\n      </View>\n    );\n  }\n\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        <AppNavigator />\n        <StatusBar style=\"dark\" />\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  loadingContainer: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n","size_bytes":1760},"babel.config.js":{"content":"module.exports = {\n  presets: ['babel-preset-expo'],\n};","size_bytes":55},"index.ts":{"content":"import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","size_bytes":307},"metro.config.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\n// Add resolver configuration to handle react-native-maps on web\nconfig.resolver.resolveRequest = (context, moduleName, platform) => {\n  if (platform === 'web' && moduleName === 'react-native-maps') {\n    return {\n      type: 'empty',\n    };\n  }\n  return context.resolveRequest(context, moduleName, platform);\n};\n\nmodule.exports = config;","size_bytes":443},"nativewind-env.d.ts":{"content":"/// <reference types=\"nativewind/types\" />","size_bytes":42},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./App.{js,jsx,ts,tsx}\", \"./src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n          50: '#fffbeb',\n          100: '#fef3c7',\n          200: '#fde68a',\n          300: '#fcd34d',\n          400: '#fbbf24',\n          500: '#f59e0b',\n          600: '#d97706',\n          700: '#b45309',\n          800: '#92400e',\n          900: '#78350f',\n        },\n        yellow: {\n          50: '#fffbeb',\n          100: '#fef3c7',\n          200: '#fde68a',\n          300: '#fcd34d',\n          400: '#fbbf24',\n          500: '#f59e0b',\n          600: '#d97706',\n          700: '#b45309',\n          800: '#92400e',\n          900: '#78350f',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n          50: '#f8fafc',\n          100: '#f1f5f9',\n          200: '#e2e8f0',\n          300: '#cbd5e1',\n          400: '#94a3b8',\n          500: '#64748b',\n          600: '#475569',\n          700: '#334155',\n          800: '#1e293b',\n          900: '#0f172a',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))'\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))'\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))'\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))'\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))'\n        },\n        glass: {\n          DEFAULT: 'hsl(var(--glass-bg))',\n          border: 'hsl(var(--glass-border))',\n          shadow: 'hsl(var(--glass-shadow))'\n        },\n        success: '#10b981',\n        warning: '#f59e0b',\n        error: '#ef4444',\n        surface: '#f8fafc',\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)'\n      },\n      backgroundImage: {\n        'gradient-primary': 'var(--gradient-primary)',\n        'gradient-secondary': 'var(--gradient-secondary)',\n        'gradient-surface': 'var(--gradient-surface)',\n        'gradient-hero': 'var(--gradient-hero)'\n      },\n      boxShadow: {\n        'glass': 'var(--shadow-glass)',\n        'elevation': 'var(--shadow-elevation)',\n        'glow': 'var(--shadow-glow)'\n      },\n      transitionTimingFunction: {\n        'smooth': 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n        'spring': 'cubic-bezier(0.34, 1.56, 0.64, 1)',\n        'micro': 'cubic-bezier(0.4, 0, 0.2, 1)'\n      },\n      keyframes: {\n        'floating': {\n          '0%, 100%': { transform: 'translateY(0px)' },\n          '50%': { transform: 'translateY(-10px)' }\n        },\n        'pulse-glow': {\n          '0%, 100%': {\n            boxShadow: '0 0 20px hsl(var(--primary) / 0.3)'\n          },\n          '50%': {\n            boxShadow: '0 0 40px hsl(var(--primary) / 0.6)'\n          }\n        },\n        'slide-up': {\n          from: {\n            opacity: '0',\n            transform: 'translateY(30px)'\n          },\n          to: {\n            opacity: '1',\n            transform: 'translateY(0)'\n          }\n        }\n      },\n      animation: {\n        'floating': 'floating 3s ease-in-out infinite',\n        'pulse-glow': 'pulse-glow 2s ease-in-out infinite',\n        'slide-up': 'slide-up 0.6s ease-out forwards'\n      },\n      fontFamily: {\n        sans: ['System'],\n        mono: ['monospace'],\n      },\n    },\n  },\n  plugins: [],\n}","size_bytes":4025},"src/global.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 45 100% 50%;\n    --primary-foreground: 0 0% 0%;\n    --secondary: 45 100% 95%;\n    --secondary-foreground: 0 0% 20%;\n    --muted: 45 50% 90%;\n    --muted-foreground: 0 0% 45%;\n    --accent: 45 100% 90%;\n    --accent-foreground: 0 0% 20%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 221.2 83.2% 53.3%;\n    --radius: 0.5rem;\n\n    /* Glass morphism variables */\n    --glass-bg: 0 0% 100% / 0.8;\n    --glass-border: 0 0% 100% / 0.2;\n    --glass-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\n\n    /* Gradient variables */\n    --gradient-primary: linear-gradient(135deg, hsl(45 100% 50%) 0%, hsl(35 100% 60%) 100%);\n    --gradient-secondary: linear-gradient(135deg, hsl(45 100% 95%) 0%, hsl(45 100% 90%) 100%);\n    --gradient-surface: linear-gradient(135deg, hsl(0 0% 100%) 0%, hsl(45 100% 95%) 100%);\n    --gradient-hero: linear-gradient(135deg, hsl(45 100% 50%) 0%, hsl(35 100% 60%) 50%, hsl(25 100% 70%) 100%);\n\n    /* Shadow variables */\n    --shadow-glass: 0 8px 32px rgba(31, 38, 135, 0.37);\n    --shadow-elevation: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    --shadow-glow: 0 0 20px rgba(59, 130, 246, 0.3);\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 217.2 91.2% 59.8%;\n    --primary-foreground: 222.2 84% 4.9%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 224.3 76.3% 94.1%;\n\n    /* Glass morphism variables for dark mode */\n    --glass-bg: 222.2 84% 4.9% / 0.8;\n    --glass-border: 217.2 32.6% 17.5% / 0.2;\n    --glass-shadow: 0 0 20px rgba(0, 0, 0, 0.3);\n\n    /* Shadow variables for dark mode */\n    --shadow-glass: 0 8px 32px rgba(0, 0, 0, 0.5);\n    --shadow-elevation: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);\n    --shadow-glow: 0 0 20px rgba(59, 130, 246, 0.5);\n  }\n}\n\n@layer components {\n  .glass {\n    background: hsl(var(--glass-bg));\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    border: 1px solid hsl(var(--glass-border));\n    box-shadow: var(--shadow-glass);\n  }\n\n  .card {\n    background: hsl(var(--card));\n    border: 1px solid hsl(var(--border));\n    border-radius: var(--radius);\n    box-shadow: var(--shadow-elevation);\n  }\n\n  .btn-primary {\n    background: hsl(var(--primary));\n    color: hsl(var(--primary-foreground));\n    border-radius: var(--radius);\n    padding: 0.5rem 1rem;\n    font-weight: 500;\n    transition: all 0.2s ease-in-out;\n  }\n\n  .btn-primary:hover {\n    background: hsl(var(--primary) / 0.9);\n  }\n\n  .btn-secondary {\n    background: hsl(var(--secondary));\n    color: hsl(var(--secondary-foreground));\n    border: 1px solid hsl(var(--border));\n    border-radius: var(--radius);\n    padding: 0.5rem 1rem;\n    font-weight: 500;\n    transition: all 0.2s ease-in-out;\n  }\n\n  .btn-secondary:hover {\n    background: hsl(var(--accent));\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}","size_bytes":3741},"src/components/GoogleMap.tsx":{"content":"import React, { useEffect, useRef, useState } from 'react';\nimport { View, Text, TouchableOpacity, Alert, StyleSheet } from 'react-native';\nimport MapView, { Marker, Polyline, PROVIDER_GOOGLE } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport { GOOGLE_MAPS_API_KEY } from '@/constants';\n\ninterface LocationData {\n  lat: number;\n  lng: number;\n  address: string;\n}\n\ninterface RouteData {\n  distance: string;\n  duration: string;\n  distanceKm: number;\n  durationMinutes: number;\n  polyline?: string;\n}\n\ninterface GoogleMapProps {\n  pickupLocation?: LocationData | null;\n  dropoffLocation?: LocationData | null;\n  height?: string | number;\n  onRouteUpdate?: (routeData: RouteData) => void;\n  interactive?: boolean;\n  onPickupChange?: (location: LocationData) => void;\n  onDropoffChange?: (location: LocationData) => void;\n  activeMarker?: 'pickup' | 'dropoff';\n}\n\nexport const GoogleMap: React.FC<GoogleMapProps> = ({\n  pickupLocation,\n  dropoffLocation,\n  height = '300px',\n  onRouteUpdate,\n  interactive = false,\n  onPickupChange,\n  onDropoffChange,\n  activeMarker = 'pickup',\n}) => {\n  const mapRef = useRef<MapView>(null);\n  const [routeCoordinates, setRouteCoordinates] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentLocation, setCurrentLocation] = useState<LocationData | null>(null);\n  const [region, setRegion] = useState<any>(null);\n  const [isLocationLoading, setIsLocationLoading] = useState(true);\n\n  // Get current location\n  const getCurrentLocation = async () => {\n    setIsLocationLoading(true);\n    try {\n      console.log('Requesting location permissions...');\n      const { status } = await Location.requestForegroundPermissionsAsync();\n      console.log('Location permission status:', status);\n\n      if (status === 'granted') {\n        console.log('Getting current position...');\n        const location = await Location.getCurrentPositionAsync({\n          accuracy: Location.Accuracy.High,\n        });\n\n        console.log('Current location:', location.coords);\n\n        const locationData: LocationData = {\n          lat: location.coords.latitude,\n          lng: location.coords.longitude,\n          address: 'Current Location',\n        };\n\n        setCurrentLocation(locationData);\n\n        // Update region to show current location\n        const newRegion = {\n          latitude: location.coords.latitude,\n          longitude: location.coords.longitude,\n          latitudeDelta: 0.01,\n          longitudeDelta: 0.01,\n        };\n        setRegion(newRegion);\n        console.log('Set region to current location:', newRegion);\n      } else {\n        console.log('Location permission denied');\n        // Fallback to Bangalore coordinates if permission denied\n        const fallbackRegion = {\n          latitude: 12.9716,\n          longitude: 77.5946,\n          latitudeDelta: 0.1,\n          longitudeDelta: 0.1,\n        };\n        setRegion(fallbackRegion);\n      }\n    } catch (error) {\n      console.error('Error getting current location:', error);\n      // Fallback to Bangalore coordinates if location fails\n      const fallbackRegion = {\n        latitude: 12.9716,\n        longitude: 77.5946,\n        latitudeDelta: 0.1,\n        longitudeDelta: 0.1,\n      };\n      setRegion(fallbackRegion);\n    } finally {\n      setIsLocationLoading(false);\n    }\n  };\n\n  // Get current location on component mount\n  useEffect(() => {\n    getCurrentLocation();\n  }, []);\n\n  // Calculate route when both locations are available\n  useEffect(() => {\n    if (pickupLocation && dropoffLocation) {\n      calculateRoute();\n    } else {\n      setRouteCoordinates([]);\n    }\n  }, [pickupLocation, dropoffLocation]);\n\n  // Update region when locations change\n  useEffect(() => {\n    console.log('Locations changed:', { pickupLocation, dropoffLocation });\n\n    if (pickupLocation || dropoffLocation) {\n      const coordinates: any[] = [];\n\n      if (pickupLocation) {\n        console.log('Adding pickup coordinate:', pickupLocation);\n        coordinates.push({\n          latitude: pickupLocation.lat,\n          longitude: pickupLocation.lng,\n        });\n      }\n\n      if (dropoffLocation) {\n        console.log('Adding dropoff coordinate:', dropoffLocation);\n        coordinates.push({\n          latitude: dropoffLocation.lat,\n          longitude: dropoffLocation.lng,\n        });\n      }\n\n      if (coordinates.length > 0) {\n        // Calculate center point\n        const avgLat = coordinates.reduce((sum, coord) => sum + coord.latitude, 0) / coordinates.length;\n        const avgLng = coordinates.reduce((sum, coord) => sum + coord.longitude, 0) / coordinates.length;\n\n        // Calculate appropriate zoom level based on distance\n        let latitudeDelta = 0.01;\n        let longitudeDelta = 0.01;\n\n        if (coordinates.length > 1) {\n          const latDiff = Math.abs(coordinates[0].latitude - coordinates[1].latitude);\n          const lngDiff = Math.abs(coordinates[0].longitude - coordinates[1].longitude);\n          latitudeDelta = Math.max(latDiff * 1.5, 0.01);\n          longitudeDelta = Math.max(lngDiff * 1.5, 0.01);\n        }\n\n        const newRegion = {\n          latitude: avgLat,\n          longitude: avgLng,\n          latitudeDelta,\n          longitudeDelta,\n        };\n\n        console.log('Setting new region:', newRegion);\n        setRegion(newRegion);\n\n        // Also fit to coordinates if map is ready\n        if (mapRef.current) {\n          mapRef.current.fitToCoordinates(coordinates, {\n            edgePadding: { top: 50, right: 50, bottom: 50, left: 50 },\n            animated: true,\n          });\n        }\n      }\n    }\n  }, [pickupLocation, dropoffLocation]);\n\n  const calculateRoute = async () => {\n    if (!pickupLocation || !dropoffLocation) return;\n\n    setIsLoading(true);\n    try {\n      const origin = `${pickupLocation.lat},${pickupLocation.lng}`;\n      const destination = `${dropoffLocation.lat},${dropoffLocation.lng}`;\n\n      const response = await fetch(\n        `https://maps.googleapis.com/maps/api/directions/json?origin=${origin}&destination=${destination}&key=${GOOGLE_MAPS_API_KEY}&mode=driving&units=metric`\n      );\n\n      const data = await response.json();\n\n      if (data.status === 'OK' && data.routes.length > 0) {\n        const route = data.routes[0];\n        const leg = route.legs[0];\n\n        // Decode polyline\n        const points = decodePolyline(route.overview_polyline.points);\n        setRouteCoordinates(points);\n\n        // Extract route data\n        const routeData: RouteData = {\n          distance: leg.distance.text,\n          duration: leg.duration.text,\n          distanceKm: leg.distance.value / 1000, // Convert meters to km\n          durationMinutes: Math.round(leg.duration.value / 60), // Convert seconds to minutes\n          polyline: route.overview_polyline.points,\n        };\n\n        onRouteUpdate?.(routeData);\n      } else if (data.status === 'ZERO_RESULTS') {\n        console.error('No route found between locations');\n        Alert.alert('No Route Found', 'Unable to find a route between these locations. Please try different locations.');\n        setRouteCoordinates([]);\n      } else if (data.status === 'OVER_QUERY_LIMIT') {\n        console.error('Directions API quota exceeded');\n        Alert.alert('Service Unavailable', 'Route calculation service is temporarily unavailable. Please try again later.');\n        setRouteCoordinates([]);\n      } else if (data.status === 'REQUEST_DENIED') {\n        console.error('Directions API request denied');\n        Alert.alert('Service Error', 'Route calculation service is currently unavailable.');\n        setRouteCoordinates([]);\n      } else {\n        console.error('Directions API error:', data.status);\n        Alert.alert('Route Error', 'Unable to calculate route. Please check your locations.');\n        setRouteCoordinates([]);\n      }\n    } catch (error) {\n      console.error('Route calculation error:', error);\n      Alert.alert('Error', 'Failed to calculate route. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Decode Google Maps polyline\n  const decodePolyline = (encoded: string) => {\n    const points: any[] = [];\n    let index = 0;\n    let lat = 0;\n    let lng = 0;\n\n    while (index < encoded.length) {\n      let shift = 0;\n      let result = 0;\n      let byte: number;\n\n      do {\n        byte = encoded.charCodeAt(index++) - 63;\n        result |= (byte & 0x1f) << shift;\n        shift += 5;\n      } while (byte >= 0x20);\n\n      const dlat = result & 1 ? ~(result >> 1) : result >> 1;\n      lat += dlat;\n\n      shift = 0;\n      result = 0;\n\n      do {\n        byte = encoded.charCodeAt(index++) - 63;\n        result |= (byte & 0x1f) << shift;\n        shift += 5;\n      } while (byte >= 0x20);\n\n      const dlng = result & 1 ? ~(result >> 1) : result >> 1;\n      lng += dlng;\n\n      points.push({\n        latitude: lat / 1e5,\n        longitude: lng / 1e5,\n      });\n    }\n\n    return points;\n  };\n\n  const handleMapPress = async (event: any) => {\n    if (!interactive) return;\n\n    const { coordinate } = event.nativeEvent;\n    const location: LocationData = {\n      lat: coordinate.latitude,\n      lng: coordinate.longitude,\n      address: `${coordinate.latitude.toFixed(6)}, ${coordinate.longitude.toFixed(6)}`,\n    };\n\n    try {\n      // Reverse geocode to get address\n      const response = await fetch(\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${coordinate.latitude},${coordinate.longitude}&key=${GOOGLE_MAPS_API_KEY}`\n      );\n\n      const data = await response.json();\n      if (data.status === 'OK' && data.results.length > 0) {\n        location.address = data.results[0].formatted_address;\n      }\n    } catch (error) {\n      console.error('Reverse geocoding error:', error);\n    }\n\n    if (activeMarker === 'pickup' && onPickupChange) {\n      onPickupChange(location);\n    } else if (activeMarker === 'dropoff' && onDropoffChange) {\n      onDropoffChange(location);\n    }\n  };\n\n  const getMapRegion = () => {\n    // If we have a region set (from current location), use it\n    if (region) {\n      return region;\n    }\n\n    // If pickup location exists, center on it\n    if (pickupLocation) {\n      return {\n        latitude: pickupLocation.lat,\n        longitude: pickupLocation.lng,\n        latitudeDelta: 0.01,\n        longitudeDelta: 0.01,\n      };\n    }\n\n    // If dropoff location exists, center on it\n    if (dropoffLocation) {\n      return {\n        latitude: dropoffLocation.lat,\n        longitude: dropoffLocation.lng,\n        latitudeDelta: 0.01,\n        longitudeDelta: 0.01,\n      };\n    }\n\n    // Default to Bangalore (more central location)\n    return {\n      latitude: 12.9716,\n      longitude: 77.5946,\n      latitudeDelta: 0.1,\n      longitudeDelta: 0.1,\n    };\n  };\n\n  return (\n    <View style={styles.container}>\n      <MapView\n        ref={mapRef}\n        provider={PROVIDER_GOOGLE}\n        style={{\n          width: '100%',\n          height: typeof height === 'string' ? parseInt(height) : height,\n        }}\n        region={region || getMapRegion()}\n        onPress={handleMapPress}\n        showsUserLocation={true}\n        showsMyLocationButton={interactive}\n        zoomEnabled={interactive}\n        scrollEnabled={interactive}\n        rotateEnabled={interactive}\n        loadingEnabled={true}\n        loadingIndicatorColor=\"#2563eb\"\n        loadingBackgroundColor=\"#ffffff\"\n        onMapReady={() => {\n          console.log('Map is ready');\n        }}\n        onRegionChangeComplete={(newRegion) => {\n          // Update region state when user interacts with map\n          if (interactive) {\n            setRegion(newRegion);\n          }\n        }}\n      >\n        {/* Pickup Marker */}\n        {pickupLocation && pickupLocation.lat && pickupLocation.lng && (\n          <Marker\n            coordinate={{\n              latitude: pickupLocation.lat,\n              longitude: pickupLocation.lng,\n            }}\n            title=\"Pickup Location\"\n            description={pickupLocation.address || 'Pickup Location'}\n            pinColor=\"green\"\n          />\n        )}\n\n        {/* Dropoff Marker */}\n        {dropoffLocation && dropoffLocation.lat && dropoffLocation.lng && (\n          <Marker\n            coordinate={{\n              latitude: dropoffLocation.lat,\n              longitude: dropoffLocation.lng,\n            }}\n            title=\"Drop-off Location\"\n            description={dropoffLocation.address || 'Drop-off Location'}\n            pinColor=\"red\"\n          />\n        )}\n\n        {/* Current Location Marker */}\n        {currentLocation && (\n          <Marker\n            coordinate={{\n              latitude: currentLocation.lat,\n              longitude: currentLocation.lng,\n            }}\n            title=\"Current Location\"\n            description=\"Your current location\"\n            pinColor=\"blue\"\n          />\n        )}\n\n        {/* Route Polyline */}\n        {routeCoordinates.length > 0 && (\n          <Polyline\n            coordinates={routeCoordinates}\n            strokeColor=\"#2563eb\"\n            strokeWidth={4}\n          />\n        )}\n      </MapView>\n\n      {/* Loading Indicator */}\n      {(isLoading || isLocationLoading) && (\n        <View style={styles.loadingOverlay}>\n          <View style={styles.loadingContainer}>\n            <Text style={styles.loadingText}>\n              {isLocationLoading ? 'Getting your location...' : 'Calculating route...'}\n            </Text>\n          </View>\n        </View>\n      )}\n\n      {/* Interactive Mode Indicator */}\n      {interactive && (\n        <View style={styles.interactiveIndicator}>\n          <Text style={styles.interactiveText}>\n            Tap map to set {activeMarker === 'pickup' ? 'pickup' : 'drop-off'} location\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'relative',\n  },\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.2)',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  loadingContainer: {\n    backgroundColor: '#ffffff',\n    padding: 16,\n    borderRadius: 8,\n  },\n  loadingText: {\n    fontSize: 16,\n    color: '#1e293b',\n  },\n  interactiveIndicator: {\n    position: 'absolute',\n    top: 8,\n    left: 8,\n    backgroundColor: '#ffffff',\n    padding: 8,\n    borderRadius: 8,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  interactiveText: {\n    fontSize: 12,\n    color: '#475569',\n  },\n});","size_bytes":14600},"src/components/GooglePlacesInput.tsx":{"content":"import React, { useState, useRef } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  StyleSheet,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport * as Location from 'expo-location';\nimport { GOOGLE_MAPS_API_KEY } from '@/constants';\n\ninterface GooglePlacesInputProps {\n  placeholder: string;\n  value: string;\n  onChange: (value: string) => void;\n  onPlaceSelect: (place: any) => void;\n  icon?: 'pickup' | 'dropoff';\n  showCurrentLocation?: boolean;\n}\n\ninterface PlacePrediction {\n  place_id: string;\n  description: string;\n  structured_formatting: {\n    main_text: string;\n    secondary_text: string;\n  };\n}\n\nexport const GooglePlacesInput: React.FC<GooglePlacesInputProps> = ({\n  placeholder,\n  value,\n  onChange,\n  onPlaceSelect,\n  icon,\n  showCurrentLocation = false,\n}) => {\n  const [predictions, setPredictions] = useState<PlacePrediction[]>([]);\n  const [showPredictions, setShowPredictions] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n  const inputRef = useRef<TextInput>(null);\n\n  const searchPlaces = async (query: string) => {\n    if (!query.trim() || query.length < 3) {\n      setPredictions([]);\n      setShowPredictions(false);\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch(\n        `https://maps.googleapis.com/maps/api/place/autocomplete/json?input=${encodeURIComponent(\n          query\n        )}&key=${GOOGLE_MAPS_API_KEY}&components=country:in&types=geocode|establishment&location=12.9716,77.5946&radius=50000`\n      );\n\n      const data = await response.json();\n\n      if (data.status === 'OK') {\n        setPredictions(data.predictions.slice(0, 5)); // Limit to 5 results\n        setShowPredictions(true);\n      } else if (data.status === 'ZERO_RESULTS') {\n        setPredictions([]);\n        setShowPredictions(false);\n      } else if (data.status === 'OVER_QUERY_LIMIT') {\n        console.error('Places API quota exceeded');\n        Alert.alert('Error', 'Search quota exceeded. Please try again later.');\n        setPredictions([]);\n        setShowPredictions(false);\n      } else if (data.status === 'REQUEST_DENIED') {\n        console.error('Places API request denied');\n        Alert.alert('Error', 'Location search is currently unavailable.');\n        setPredictions([]);\n        setShowPredictions(false);\n      } else {\n        console.error('Places API error:', data.status);\n        setPredictions([]);\n        setShowPredictions(false);\n      }\n    } catch (error) {\n      console.error('Network error:', error);\n      Alert.alert('Network Error', 'Unable to search locations. Please check your internet connection.');\n      setPredictions([]);\n      setShowPredictions(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePlaceSelect = async (prediction: PlacePrediction) => {\n    console.log('Place selected:', prediction.description);\n    try {\n      // Get place details\n      const detailsResponse = await fetch(\n        `https://maps.googleapis.com/maps/api/place/details/json?place_id=${prediction.place_id}&key=${GOOGLE_MAPS_API_KEY}&fields=geometry,formatted_address`\n      );\n\n      const detailsData = await detailsResponse.json();\n\n      if (detailsData.status === 'OK') {\n        const place = {\n          description: prediction.description,\n          geometry: {\n            location: {\n              lat: detailsData.result.geometry.location.lat,\n              lng: detailsData.result.geometry.location.lng,\n            },\n          },\n          formatted_address: detailsData.result.formatted_address,\n        };\n\n        console.log('Place details fetched successfully:', place);\n        onPlaceSelect(place);\n        onChange(prediction.description);\n        setShowPredictions(false);\n        inputRef.current?.blur();\n      } else {\n        console.error('Place details API error:', detailsData.status);\n      }\n    } catch (error) {\n      console.error('Place details error:', error);\n      Alert.alert('Error', 'Failed to get location details');\n    }\n  };\n\n  const getCurrentLocation = async () => {\n    setIsGettingLocation(true);\n    try {\n      // Request location permissions\n      const { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert(\n          'Permission Denied',\n          'Location permission is required to use current location. Please enable it in your device settings.',\n          [{ text: 'OK' }]\n        );\n        return;\n      }\n\n      // Get current position\n      const location = await Location.getCurrentPositionAsync({\n        accuracy: Location.Accuracy.High,\n      });\n\n      const { latitude, longitude } = location.coords;\n\n      // Reverse geocode to get address\n      const response = await fetch(\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${GOOGLE_MAPS_API_KEY}`\n      );\n\n      const data = await response.json();\n      if (data.status === 'OK' && data.results.length > 0) {\n        const address = data.results[0].formatted_address;\n\n        // Create place object similar to Google Places API response\n        const place = {\n          description: address,\n          geometry: {\n            location: {\n              lat: latitude,\n              lng: longitude,\n            },\n          },\n          formatted_address: address,\n        };\n\n        onPlaceSelect(place);\n        onChange(address);\n        setShowPredictions(false);\n        inputRef.current?.blur();\n      } else {\n        Alert.alert('Error', 'Unable to get address for your current location. Please try again.');\n      }\n    } catch (error) {\n      console.error('Location error:', error);\n      Alert.alert(\n        'Location Error',\n        'Unable to get your current location. Please check your GPS settings and try again.',\n        [{ text: 'OK' }]\n      );\n    } finally {\n      setIsGettingLocation(false);\n    }\n  };\n\n  const handleTextChange = (text: string) => {\n    onChange(text);\n    searchPlaces(text);\n  };\n\n  const getIcon = () => {\n    switch (icon) {\n      case 'pickup':\n        return <MaterialIcons name=\"location-on\" size={18} color=\"#64748b\" />;\n      case 'dropoff':\n        return <MaterialIcons name=\"flag\" size={18} color=\"#64748b\" />;\n      default:\n        return <MaterialIcons name=\"location-on\" size={18} color=\"#64748b\" />;\n    }\n  };\n\n\n  return (\n    <View style={styles.container} pointerEvents=\"box-none\">\n      <View style={styles.inputContainer}>\n        <View style={styles.inputIcon}>\n          {getIcon()}\n        </View>\n        <TextInput\n          ref={inputRef}\n          style={styles.textInput}\n          placeholder={placeholder}\n          value={value}\n          onChangeText={handleTextChange}\n          onFocus={() => {\n            if (predictions.length > 0) {\n              setShowPredictions(true);\n            }\n          }}\n          onBlur={() => {\n            // Delay hiding predictions to allow selection\n            setTimeout(() => setShowPredictions(false), 200);\n          }}\n        />\n        {isLoading && <Text style={styles.loadingText}>...</Text>}\n      </View>\n\n      {showPredictions && predictions.length > 0 && (\n        <ScrollView\n          style={styles.predictionsContainer}\n          showsVerticalScrollIndicator={false}\n          keyboardShouldPersistTaps=\"handled\"\n          nestedScrollEnabled={true}\n          pointerEvents=\"auto\"\n        >\n          {predictions.map((item) => (\n            <TouchableOpacity\n              key={item.place_id}\n              style={styles.predictionItem}\n              onPress={() => {\n                console.log('TouchableOpacity pressed for:', item.description);\n                handlePlaceSelect(item);\n              }}\n              activeOpacity={0.7}\n            >\n              <Text style={styles.predictionMainText}>{item.structured_formatting.main_text}</Text>\n              <Text style={styles.predictionSecondaryText}>{item.structured_formatting.secondary_text}</Text>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n      )}\n\n      {showCurrentLocation && (\n        <TouchableOpacity\n          style={[styles.currentLocationButton, isGettingLocation && styles.currentLocationButtonDisabled]}\n          onPress={getCurrentLocation}\n          disabled={isGettingLocation}\n        >\n          <View style={styles.currentLocationContent}>\n            <MaterialIcons\n              name={isGettingLocation ? \"location-searching\" : \"my-location\"}\n              size={16}\n              color={isGettingLocation ? \"#64748b\" : \"#2563eb\"}\n            />\n            <Text style={[styles.currentLocationText, isGettingLocation && styles.currentLocationTextDisabled]}>\n              {isGettingLocation ? 'Getting Location...' : 'Use Current Location'}\n            </Text>\n          </View>\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'relative',\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#ffffff',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  inputIcon: {\n    marginRight: 12,\n  },\n  textInput: {\n    flex: 1,\n    fontSize: 16,\n  },\n  loadingText: {\n    fontSize: 16,\n    color: '#64748b',\n  },\n  predictionsContainer: {\n    position: 'absolute',\n    top: '100%',\n    left: 0,\n    right: 0,\n    backgroundColor: '#ffffff',\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n    borderRadius: 8,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 10,\n    zIndex: 1000,\n    maxHeight: 240,\n  },\n  predictionItem: {\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e2e8f0',\n  },\n  predictionMainText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#1e293b',\n  },\n  predictionSecondaryText: {\n    fontSize: 14,\n    color: '#64748b',\n    marginTop: 4,\n  },\n  currentLocationButton: {\n    marginTop: 8,\n    padding: 8,\n    backgroundColor: '#eff6ff',\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  currentLocationButtonDisabled: {\n    backgroundColor: '#f1f5f9',\n  },\n  currentLocationContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  currentLocationText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#2563eb',\n  },\n  currentLocationTextDisabled: {\n    color: '#64748b',\n  },\n});","size_bytes":10585},"src/components/NotificationBell.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  Modal,\n  ScrollView,\n  Alert,\n  StyleSheet,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { useAppStore } from '../stores/appStore';\n\nexport default function NotificationBell() {\n  const { notifications, markNotificationAsRead } = useAppStore();\n  const [showNotifications, setShowNotifications] = useState(false);\n\n  const unreadCount = notifications.filter(n => !n.is_read).length;\n\n  const handleNotificationPress = (notificationId: string) => {\n    markNotificationAsRead(notificationId);\n  };\n\n  const handleClearAll = () => {\n    Alert.alert(\n      'Clear All Notifications',\n      'Are you sure you want to mark all notifications as read?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Clear All',\n          onPress: () => {\n            notifications.forEach(notification => {\n              if (!notification.is_read) {\n                markNotificationAsRead(notification.id);\n              }\n            });\n          }\n        },\n      ]\n    );\n  };\n\n  return (\n    <>\n      <TouchableOpacity\n        style={styles.bellContainer}\n        onPress={() => setShowNotifications(true)}\n      >\n        <MaterialIcons name=\"notifications\" size={20} color=\"#64748b\" />\n        {unreadCount > 0 && (\n          <View style={styles.badge}>\n            <Text style={styles.badgeText}>\n              {unreadCount > 99 ? '99+' : unreadCount}\n            </Text>\n          </View>\n        )}\n      </TouchableOpacity>\n\n      <Modal\n        visible={showNotifications}\n        transparent\n        animationType=\"slide\"\n        onRequestClose={() => setShowNotifications(false)}\n      >\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>\n                Notifications ({notifications.length})\n              </Text>\n              <View style={styles.modalActions}>\n                {unreadCount > 0 && (\n                  <TouchableOpacity\n                    style={styles.clearButton}\n                    onPress={handleClearAll}\n                  >\n                    <Text style={styles.clearButtonText}>Clear All</Text>\n                  </TouchableOpacity>\n                )}\n                <TouchableOpacity\n                  style={styles.closeButton}\n                  onPress={() => setShowNotifications(false)}\n                >\n                  <MaterialIcons name=\"close\" size={18} color=\"#64748b\" />\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            <ScrollView style={styles.scrollContainer}>\n              {notifications.length === 0 ? (\n                <View style={styles.emptyContainer}>\n                  <View style={styles.emptyIcon}>\n                    <MaterialIcons name=\"notifications\" size={48} color=\"#cbd5e1\" />\n                  </View>\n                  <Text style={styles.emptyTitle}>\n                    No notifications yet\n                  </Text>\n                  <Text style={styles.emptySubtitle}>\n                    You'll receive updates about your bookings here\n                  </Text>\n                </View>\n              ) : (\n                notifications.map((notification) => (\n                  <TouchableOpacity\n                    key={notification.id}\n                    style={[\n                      styles.notificationItem,\n                      !notification.is_read && styles.notificationItemUnread\n                    ]}\n                    onPress={() => handleNotificationPress(notification.id)}\n                  >\n                    <View style={styles.notificationLeft}>\n                      <View style={[\n                        styles.notificationDot,\n                        {\n                          backgroundColor:\n                            notification.type === 'booking' ? '#2563eb' :\n                            notification.type === 'payment' ? '#16a34a' :\n                            notification.type === 'system' ? '#f59e0b' :\n                            '#a855f7'\n                        }\n                      ]} />\n                      <View style={styles.notificationContent}>\n                        <Text style={[\n                          styles.notificationTitle,\n                          !notification.is_read && styles.notificationTitleUnread\n                        ]}>\n                          {notification.title}\n                        </Text>\n                        <Text style={[\n                          styles.notificationMessage,\n                          !notification.is_read && styles.notificationMessageUnread\n                        ]}>\n                          {notification.message}\n                        </Text>\n                        <Text style={styles.notificationTime}>\n                          {new Date(notification.created_at).toLocaleString()}\n                        </Text>\n                      </View>\n                      {!notification.is_read && (\n                        <View style={styles.unreadIndicator} />\n                      )}\n                    </View>\n                  </TouchableOpacity>\n                ))\n              )}\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  bellContainer: {\n    position: 'relative',\n    padding: 8,\n  },\n  badge: {\n    position: 'absolute',\n    top: -2,\n    right: -2,\n    backgroundColor: '#dc2626',\n    borderRadius: 10,\n    minWidth: 20,\n    height: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  badgeText: {\n    color: '#ffffff',\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  modalOverlay: {\n    flex: 1,\n    justifyContent: 'flex-end',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  modalContent: {\n    backgroundColor: '#ffffff',\n    borderTopLeftRadius: 16,\n    borderTopRightRadius: 16,\n    maxHeight: '60%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e2e8f0',\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n  },\n  modalActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  clearButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    backgroundColor: '#f1f5f9',\n    borderRadius: 8,\n  },\n  clearButtonText: {\n    fontSize: 14,\n    color: '#475569',\n  },\n  closeButton: {\n    padding: 6,\n  },\n  closeButtonText: {\n    fontSize: 18,\n  },\n  scrollContainer: {\n    maxHeight: 320,\n  },\n  emptyContainer: {\n    padding: 32,\n    alignItems: 'center',\n  },\n  emptyIcon: {\n    marginBottom: 16,\n  },\n  emptyTitle: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  emptySubtitle: {\n    fontSize: 14,\n    color: '#94a3b8',\n    textAlign: 'center',\n    marginTop: 8,\n  },\n  notificationItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    justifyContent: 'space-between',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f1f5f9',\n  },\n  notificationItemUnread: {\n    backgroundColor: '#eff6ff',\n  },\n  notificationLeft: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    flex: 1,\n    gap: 12,\n  },\n  notificationDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    marginTop: 6,\n  },\n  notificationContent: {\n    flex: 1,\n  },\n  notificationTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  notificationTitleUnread: {\n    color: '#1e293b',\n  },\n  notificationMessage: {\n    fontSize: 14,\n    color: '#64748b',\n    marginBottom: 4,\n  },\n  notificationMessageUnread: {\n    color: '#475569',\n  },\n  notificationTime: {\n    fontSize: 12,\n    color: '#94a3b8',\n  },\n  unreadIndicator: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    backgroundColor: '#2563eb',\n  },\n});","size_bytes":8005},"src/components/StepIndicator.tsx":{"content":"import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\n\ninterface StepIndicatorProps {\n  currentStep: number;\n  totalSteps: number;\n  stepLabels: string[];\n}\n\nexport const StepIndicator: React.FC<StepIndicatorProps> = ({\n  currentStep,\n  totalSteps,\n  stepLabels,\n}) => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.stepsContainer}>\n        {Array.from({ length: totalSteps }, (_, index) => {\n          const stepNumber = index + 1;\n          const isActive = stepNumber === currentStep;\n          const isCompleted = stepNumber < currentStep;\n\n          return (\n            <View key={stepNumber} style={styles.stepWrapper}>\n              <View\n                style={[\n                  styles.stepCircle,\n                  isActive && styles.stepCircleActive,\n                  isCompleted && styles.stepCircleCompleted,\n                ]}\n              >\n                {isCompleted ? (\n                  <MaterialIcons name=\"check\" size={16} color=\"#ffffff\" />\n                ) : (\n                  <Text\n                    style={[\n                      styles.stepNumber,\n                      isActive && styles.stepNumberActive,\n                    ]}\n                  >\n                    {stepNumber}\n                  </Text>\n                )}\n              </View>\n              <Text\n                style={[\n                  styles.stepLabel,\n                  isActive && styles.stepLabelActive,\n                  isCompleted && styles.stepLabelCompleted,\n                ]}\n              >\n                {stepLabels[index]}\n              </Text>\n              {stepNumber < totalSteps && (\n                <View\n                  style={[\n                    styles.connector,\n                    stepNumber < currentStep && styles.connectorCompleted,\n                  ]}\n                />\n              )}\n            </View>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    backgroundColor: '#ffffff',\n  },\n  stepsContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  stepWrapper: {\n    flex: 1,\n    alignItems: 'center',\n    position: 'relative',\n  },\n  stepCircle: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: '#f1f5f9',\n    borderWidth: 2,\n    borderColor: '#e2e8f0',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 8,\n  },\n  stepCircleActive: {\n    backgroundColor: '#2563eb',\n    borderColor: '#2563eb',\n  },\n  stepCircleCompleted: {\n    backgroundColor: '#10b981',\n    borderColor: '#10b981',\n  },\n  stepNumber: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#64748b',\n  },\n  stepNumberActive: {\n    color: '#ffffff',\n  },\n  stepLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  stepLabelActive: {\n    color: '#2563eb',\n    fontWeight: '600',\n  },\n  stepLabelCompleted: {\n    color: '#10b981',\n  },\n  connector: {\n    position: 'absolute',\n    top: 20,\n    left: '50%',\n    right: '-50%',\n    height: 2,\n    backgroundColor: '#e2e8f0',\n    zIndex: -1,\n  },\n  connectorCompleted: {\n    backgroundColor: '#10b981',\n  },\n});","size_bytes":3358},"src/constants/index.ts":{"content":"// API Configuration\nexport const SUPABASE_URL = process.env.EXPO_PUBLIC_SUPABASE_URL || '';\nexport const SUPABASE_ANON_KEY = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || '';\nexport const GOOGLE_MAPS_API_KEY = process.env.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY || '';\nexport const RAZORPAY_KEY_ID = process.env.EXPO_PUBLIC_RAZORPAY_KEY_ID || '';\n\n// App Configuration\nexport const APP_CONFIG = {\n  NAME: 'SDM Cab Hailing',\n  VERSION: '1.0.0',\n  BUNDLE_ID: 'com.sdm.cabhailing',\n  PLAY_STORE_URL: '',\n  APP_STORE_URL: '',\n};\n\n// Service Types\nexport const SERVICE_TYPES = {\n  CITY: 'city',\n  AIRPORT: 'airport',\n  OUTSTATION: 'outstation',\n  HOURLY: 'hourly',\n} as const;\n\nexport const SERVICE_TYPE_LABELS = {\n  [SERVICE_TYPES.CITY]: 'City Ride',\n  [SERVICE_TYPES.AIRPORT]: 'Airport Transfer',\n  [SERVICE_TYPES.OUTSTATION]: 'Outstation',\n  [SERVICE_TYPES.HOURLY]: 'Hourly Rental',\n} as const;\n\n// Vehicle Types\nexport const VEHICLE_TYPES = {\n  SEDAN: 'sedan',\n  SUV: 'suv',\n  PREMIUM: 'premium',\n  HATCHBACK: 'hatchback',\n} as const;\n\nexport const VEHICLE_TYPE_LABELS = {\n  [VEHICLE_TYPES.SEDAN]: 'Sedan',\n  [VEHICLE_TYPES.SUV]: 'SUV',\n  [VEHICLE_TYPES.PREMIUM]: 'Premium',\n  [VEHICLE_TYPES.HATCHBACK]: 'Hatchback',\n} as const;\n\n// Booking Status\nexport const BOOKING_STATUS = {\n  PENDING: 'pending',\n  ACCEPTED: 'accepted',\n  IN_PROGRESS: 'in_progress',\n  COMPLETED: 'completed',\n  CANCELLED: 'cancelled',\n} as const;\n\nexport const BOOKING_STATUS_LABELS = {\n  [BOOKING_STATUS.PENDING]: 'Pending',\n  [BOOKING_STATUS.ACCEPTED]: 'Accepted',\n  [BOOKING_STATUS.IN_PROGRESS]: 'In Progress',\n  [BOOKING_STATUS.COMPLETED]: 'Completed',\n  [BOOKING_STATUS.CANCELLED]: 'Cancelled',\n} as const;\n\n// Payment Status\nexport const PAYMENT_STATUS = {\n  PENDING: 'pending',\n  PAID: 'paid',\n  FAILED: 'failed',\n  REFUNDED: 'refunded',\n} as const;\n\n// Fare Calculation Constants\nexport const FARE_CONFIG = {\n  BASE_FARE: {\n    [SERVICE_TYPES.CITY]: 50,\n    [SERVICE_TYPES.AIRPORT]: 100,\n    [SERVICE_TYPES.OUTSTATION]: 200,\n    [SERVICE_TYPES.HOURLY]: 150,\n  },\n  PER_KM_RATE: {\n    [SERVICE_TYPES.CITY]: 12,\n    [SERVICE_TYPES.AIRPORT]: 15,\n    [SERVICE_TYPES.OUTSTATION]: 18,\n    [SERVICE_TYPES.HOURLY]: 20,\n  },\n  PER_MINUTE_RATE: {\n    [SERVICE_TYPES.CITY]: 2,\n    [SERVICE_TYPES.AIRPORT]: 2.5,\n    [SERVICE_TYPES.OUTSTATION]: 3,\n    [SERVICE_TYPES.HOURLY]: 3,\n  },\n  SURGE_MULTIPLIER: 1.0, // Will be dynamic based on demand\n  MINIMUM_FARE: 50,\n  MAXIMUM_FARE: 5000,\n};\n\n// Location Constants\nexport const LOCATION_CONFIG = {\n  DEFAULT_LATITUDE: 28.6139, // Delhi coordinates\n  DEFAULT_LONGITUDE: 77.2090,\n  DEFAULT_ZOOM: 12,\n  SEARCH_RADIUS_KM: 50,\n  UPDATE_INTERVAL_MS: 5000, // 5 seconds\n};\n\n// UI Constants\nexport const UI_CONFIG = {\n  BORDER_RADIUS: {\n    SMALL: 4,\n    MEDIUM: 8,\n    LARGE: 12,\n    XLARGE: 16,\n  },\n  SPACING: {\n    XS: 4,\n    SMALL: 8,\n    MEDIUM: 16,\n    LARGE: 24,\n    XLARGE: 32,\n    XXLARGE: 48,\n  },\n  FONT_SIZE: {\n    XS: 12,\n    SMALL: 14,\n    MEDIUM: 16,\n    LARGE: 18,\n    XLARGE: 20,\n    XXLARGE: 24,\n    XXXLARGE: 32,\n  },\n  ICON_SIZE: {\n    SMALL: 16,\n    MEDIUM: 24,\n    LARGE: 32,\n    XLARGE: 48,\n  },\n};\n\n// Validation Constants\nexport const VALIDATION = {\n  PHONE_REGEX: /^[6-9]\\d{9}$/,\n  EMAIL_REGEX: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  PASSWORD_MIN_LENGTH: 8,\n  NAME_MIN_LENGTH: 2,\n  NAME_MAX_LENGTH: 50,\n};\n\n// Error Messages\nexport const ERROR_MESSAGES = {\n  NETWORK_ERROR: 'Network connection failed. Please check your internet connection.',\n  LOCATION_PERMISSION_DENIED: 'Location permission is required for the app to work properly.',\n  INVALID_CREDENTIALS: 'Invalid email or password. Please try again.',\n  BOOKING_FAILED: 'Failed to create booking. Please try again.',\n  PAYMENT_FAILED: 'Payment failed. Please try again or use a different payment method.',\n  LOCATION_NOT_FOUND: 'Unable to determine your location. Please enable location services.',\n  NO_DRIVERS_AVAILABLE: 'No drivers available at the moment. Please try again later.',\n};\n\n// Success Messages\nexport const SUCCESS_MESSAGES = {\n  BOOKING_CREATED: 'Booking created successfully!',\n  PAYMENT_SUCCESSFUL: 'Payment completed successfully!',\n  PROFILE_UPDATED: 'Profile updated successfully!',\n  RATING_SUBMITTED: 'Thank you for your feedback!',\n};\n\n// Storage Keys\nexport const STORAGE_KEYS = {\n  USER_TOKEN: 'user_token',\n  USER_DATA: 'user_data',\n  APP_SETTINGS: 'app_settings',\n  RECENT_LOCATIONS: 'recent_locations',\n  FAVORITE_LOCATIONS: 'favorite_locations',\n};\n\n// Notification Types\nexport const NOTIFICATION_TYPES = {\n  BOOKING_REQUEST: 'booking_request',\n  BOOKING_ACCEPTED: 'booking_accepted',\n  DRIVER_ARRIVED: 'driver_arrived',\n  RIDE_STARTED: 'ride_started',\n  RIDE_COMPLETED: 'ride_completed',\n  PAYMENT_RECEIVED: 'payment_received',\n  PROMOTION: 'promotion',\n} as const;\n\n// API Endpoints (relative to Supabase)\nexport const API_ENDPOINTS = {\n  BOOKINGS: 'bookings',\n  PAYMENTS: 'payments',\n  USERS: 'users',\n  VEHICLES: 'vehicles',\n  DRIVERS: 'drivers',\n  NOTIFICATIONS: 'notifications',\n} as const;","size_bytes":5003},"src/hooks/useFareCalculation.ts":{"content":"import { useMemo } from 'react';\nimport { ServiceType, VehicleType } from '@/types';\nimport { FARE_CONFIG } from '@/constants';\n\ninterface FareCalculationParams {\n  serviceType: ServiceType;\n  vehicleType: VehicleType;\n  distanceKm: number;\n  durationMinutes: number;\n  scheduledDateTime?: string;\n  currentTime?: Date;\n}\n\ninterface FareData {\n  baseFare: number;\n  distanceFare: number;\n  timeFare: number;\n  surgeMultiplier: number;\n  totalFare: number;\n  estimatedDuration: number;\n  estimatedDistance: number;\n  surgeReason?: string;\n}\n\nexport const useFareCalculation = ({\n  serviceType,\n  vehicleType,\n  distanceKm,\n  durationMinutes,\n  scheduledDateTime,\n  currentTime = new Date(),\n}: FareCalculationParams): FareData | null => {\n  return useMemo(() => {\n    if (!distanceKm || !durationMinutes) return null;\n\n    // Get base rates from config\n    const baseFare = FARE_CONFIG.BASE_FARE[serviceType] || 50;\n    const perKmRate = FARE_CONFIG.PER_KM_RATE[serviceType] || 12;\n    const perMinuteRate = FARE_CONFIG.PER_MINUTE_RATE[serviceType] || 2;\n\n    // Calculate fares\n    const distanceFare = distanceKm * perKmRate;\n    const timeFare = durationMinutes * perMinuteRate;\n\n    // Apply vehicle type multiplier\n    let vehicleMultiplier = 1;\n    switch (vehicleType) {\n      case 'suv':\n        vehicleMultiplier = 1.3;\n        break;\n      case 'premium':\n        vehicleMultiplier = 1.8;\n        break;\n      case 'sedan':\n      default:\n        vehicleMultiplier = 1;\n        break;\n    }\n\n    // Calculate surge multiplier based on time and demand\n    let surgeMultiplier = 1.0;\n    let surgeReason = '';\n\n    // Time-based surge pricing\n    const hour = currentTime.getHours();\n    const day = currentTime.getDay();\n\n    // Peak hours (7-9 AM, 5-7 PM on weekdays)\n    if (day >= 1 && day <= 5) { // Monday to Friday\n      if ((hour >= 7 && hour <= 9) || (hour >= 17 && hour <= 19)) {\n        surgeMultiplier = 1.5;\n        surgeReason = 'Peak hours';\n      }\n    }\n\n    // Weekend surge (Friday 8 PM to Sunday 10 PM)\n    if (day === 5 && hour >= 20) { // Friday evening\n      surgeMultiplier = 1.3;\n      surgeReason = 'Weekend start';\n    } else if (day === 6 || (day === 0 && hour <= 22)) { // Saturday or Sunday before 10 PM\n      surgeMultiplier = 1.4;\n      surgeReason = 'Weekend';\n    }\n\n    // Special events surge (can be enhanced with real event data)\n    // For now, using simplified logic\n    if (serviceType === 'airport') {\n      // Airport services have slight surge during peak travel times\n      if ((hour >= 4 && hour <= 7) || (hour >= 18 && hour <= 21)) {\n        surgeMultiplier = Math.max(surgeMultiplier, 1.2);\n        surgeReason = surgeReason ? `${surgeReason} + Airport peak` : 'Airport peak';\n      }\n    }\n\n    // Distance-based surge for very short rides (under 2km)\n    if (distanceKm < 2) {\n      surgeMultiplier *= 1.1;\n      surgeReason = surgeReason ? `${surgeReason} + Short trip` : 'Short trip';\n    }\n\n    // Long distance surge for rides over 50km\n    if (distanceKm > 50) {\n      surgeMultiplier *= 1.2;\n      surgeReason = surgeReason ? `${surgeReason} + Long distance` : 'Long distance';\n    }\n\n    // Scheduled booking discount (opposite of surge)\n    if (scheduledDateTime) {\n      const scheduledTime = new Date(scheduledDateTime);\n      const hoursDifference = (scheduledTime.getTime() - currentTime.getTime()) / (1000 * 60 * 60);\n\n      if (hoursDifference > 24) { // Booked more than 24 hours in advance\n        surgeMultiplier *= 0.9;\n        surgeReason = surgeReason ? `${surgeReason} + Advance booking discount` : 'Advance booking discount';\n      } else if (hoursDifference > 4) { // Booked more than 4 hours in advance\n        surgeMultiplier *= 0.95;\n        surgeReason = surgeReason ? `${surgeReason} + Early booking discount` : 'Early booking discount';\n      }\n    }\n\n    // Calculate total with surge\n    const subtotal = (baseFare + distanceFare + timeFare) * vehicleMultiplier;\n    const totalFare = Math.max(subtotal * surgeMultiplier, FARE_CONFIG.MINIMUM_FARE);\n\n    // Cap at maximum fare\n    const finalFare = Math.min(totalFare, FARE_CONFIG.MAXIMUM_FARE);\n\n    return {\n      baseFare: Math.round(baseFare * vehicleMultiplier),\n      distanceFare: Math.round(distanceFare * vehicleMultiplier),\n      timeFare: Math.round(timeFare * vehicleMultiplier),\n      surgeMultiplier: Math.round(surgeMultiplier * 100) / 100, // Round to 2 decimal places\n      totalFare: Math.round(finalFare),\n      estimatedDuration: durationMinutes,\n      estimatedDistance: distanceKm,\n      surgeReason: surgeReason || undefined,\n    };\n  }, [serviceType, vehicleType, distanceKm, durationMinutes, scheduledDateTime, currentTime]);\n};","size_bytes":4691},"src/hooks/usePayment.ts":{"content":"import { useState } from 'react';\nimport { RazorpayService, PaymentData, PaymentResult } from '../services/payment/razorpay';\nimport { useAppStore, useUser } from '../stores/appStore';\nimport { Alert } from 'react-native';\n\nexport const usePayment = () => {\n  const user = useUser();\n  const { updateBookingStatus } = useAppStore();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const processPayment = async (\n    bookingId: string,\n    amount: number,\n    description: string\n  ): Promise<PaymentResult> => {\n    if (!user) {\n      const result: PaymentResult = {\n        success: false,\n        error: 'User not authenticated'\n      };\n      return result;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const paymentData: PaymentData = {\n        amount: RazorpayService.formatAmount(amount),\n        currency: 'INR',\n        bookingId,\n        customerId: user.id,\n        customerName: user.full_name,\n        customerEmail: user.email,\n        customerPhone: user.phone || '',\n        description: description || 'Cab booking payment',\n      };\n\n      const result = await RazorpayService.initiatePayment(paymentData);\n\n      if (result.success) {\n        // Update booking status to completed after successful payment\n        updateBookingStatus('completed');\n\n        Alert.alert(\n          'Payment Successful',\n          `Payment of ${RazorpayService.formatDisplayAmount(amount)} completed successfully!`,\n          [{ text: 'OK' }]\n        );\n      } else {\n        Alert.alert(\n          'Payment Failed',\n          result.error || 'Payment could not be processed. Please try again.',\n          [{ text: 'Try Again' }]\n        );\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Payment processing error:', error);\n      const result: PaymentResult = {\n        success: false,\n        error: 'An unexpected error occurred during payment processing'\n      };\n\n      Alert.alert(\n        'Payment Error',\n        result.error,\n        [{ text: 'OK' }]\n      );\n\n      return result;\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const getPaymentStatus = async (paymentId: string) => {\n    return await RazorpayService.getPaymentStatus(paymentId);\n  };\n\n  return {\n    processPayment,\n    getPaymentStatus,\n    isProcessing,\n    formatAmount: RazorpayService.formatDisplayAmount,\n  };\n};","size_bytes":2353},"src/hooks/useRealtimeSubscriptions.ts":{"content":"import { useEffect, useCallback } from 'react';\nimport { RealtimeService, BookingUpdateCallback, NotificationCallback } from '../services/supabase/realtime';\nimport { useAppStore, useUser } from '../stores/appStore';\nimport { Database } from '../services/supabase/client';\nimport { Alert } from 'react-native';\n\ntype Booking = Database['public']['Tables']['bookings']['Row'];\ntype Notification = Database['public']['Tables']['notifications']['Row'];\n\nexport const useRealtimeSubscriptions = () => {\n  const user = useUser();\n  const { addNotification } = useAppStore();\n\n  // Handle booking status updates\n  const handleBookingUpdate = useCallback((booking: Booking) => {\n    console.log('Booking status updated:', booking);\n\n    // Show alert for status changes\n    const message = RealtimeService.getBookingStatusMessage(booking.status);\n    Alert.alert('Booking Update', message);\n\n    // Update local state if needed\n    // You can add more logic here to update specific booking in local state\n  }, []);\n\n  // Handle new notifications\n  const handleNotification = useCallback((notification: Notification) => {\n    console.log('New notification received:', notification);\n\n    // Add to local notifications store\n    addNotification({\n      id: notification.id,\n      user_id: notification.user_id,\n      title: notification.title,\n      message: notification.message,\n      type: notification.type,\n      is_read: notification.is_read,\n      created_at: notification.created_at,\n      data: notification.data,\n    });\n\n    // Show alert for important notifications\n    if (notification.type === 'booking' || notification.type === 'system') {\n      Alert.alert(notification.title, notification.message);\n    }\n  }, [addNotification]);\n\n  // Handle new booking requests (for drivers)\n  const handleNewBooking = useCallback((booking: Booking) => {\n    console.log('New booking request:', booking);\n\n    // Show alert for new booking\n    Alert.alert(\n      'New Ride Request',\n      `New booking from ${booking.pickup_location?.address || 'Unknown location'}`,\n      [\n        { text: 'View Details', onPress: () => {\n          // Navigate to available rides screen\n          // This would need to be implemented based on navigation structure\n        }},\n        { text: 'Dismiss', style: 'cancel' }\n      ]\n    );\n  }, []);\n\n  // Subscribe to real-time updates when user is authenticated\n  useEffect(() => {\n    if (!user) return;\n\n    console.log('Setting up real-time subscriptions for user:', user.id);\n\n    // Subscribe to booking updates (only for customer and driver roles)\n    let bookingChannel: string | undefined;\n    if (user.role === 'customer' || user.role === 'driver') {\n      bookingChannel = RealtimeService.subscribeToBookingUpdates(\n        user.id,\n        user.role,\n        handleBookingUpdate\n      );\n    }\n\n    // Subscribe to notifications\n    const notificationChannel = RealtimeService.subscribeToNotifications(\n      user.id,\n      handleNotification\n    );\n\n    // Subscribe to new bookings if user is a driver\n    let newBookingChannel: string | undefined;\n    if (user.role === 'driver') {\n      newBookingChannel = RealtimeService.subscribeToNewBookings(handleNewBooking);\n    }\n\n    // Cleanup function\n    return () => {\n      console.log('Cleaning up real-time subscriptions');\n      if (bookingChannel) {\n        RealtimeService.unsubscribeFromBookingUpdates(user.id);\n      }\n      RealtimeService.unsubscribeFromNotifications();\n    };\n  }, [user, handleBookingUpdate, handleNotification, handleNewBooking]);\n\n  // Return functions for manual subscription management\n  return {\n    subscribeToBookingUpdates: (userId: string, userRole: 'customer' | 'driver', callback: BookingUpdateCallback) => {\n      return RealtimeService.subscribeToBookingUpdates(userId, userRole, callback);\n    },\n\n    subscribeToNotifications: (userId: string, callback: NotificationCallback) => {\n      return RealtimeService.subscribeToNotifications(userId, callback);\n    },\n\n    subscribeToNewBookings: (callback: BookingUpdateCallback) => {\n      return RealtimeService.subscribeToNewBookings(callback);\n    },\n\n    subscribeToPaymentUpdates: (bookingId: string, callback: (payment: any) => void) => {\n      return RealtimeService.subscribeToPaymentUpdates(bookingId, callback);\n    },\n\n    unsubscribeAll: () => {\n      RealtimeService.unsubscribeAll();\n    },\n\n    getBookingStatusMessage: (status: string) => {\n      return RealtimeService.getBookingStatusMessage(status as any);\n    },\n\n    getNotificationColor: (type: string) => {\n      return RealtimeService.getNotificationColor(type);\n    },\n  };\n};","size_bytes":4628},"src/navigation/AppNavigator.tsx":{"content":"import React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\n// Import stores and types\nimport { useAppStore, useIsAuthenticated, useUserRole } from '@/stores/appStore';\n\n// Import screens\nimport AuthNavigator from '@/navigation/AuthNavigator';\nimport CustomerNavigator from '@/navigation/CustomerNavigator';\nimport DriverNavigator from '@/navigation/DriverNavigator';\n\n// Import types\nimport { UserRole } from '@/types';\n\nconst Stack = createStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nexport default function AppNavigator() {\n  const isAuthenticated = useIsAuthenticated();\n  const userRole = useUserRole();\n\n  // Show auth screens if not authenticated\n  if (!isAuthenticated) {\n    return <AuthNavigator />;\n  }\n\n  // Show role-based navigation based on user role\n  switch (userRole) {\n    case 'customer':\n      return <CustomerNavigator />;\n    case 'driver':\n      return <DriverNavigator />;\n    case 'admin':\n      // For now, show customer interface for admin\n      return <CustomerNavigator />;\n    case 'vendor':\n      // For now, show customer interface for vendor\n      return <CustomerNavigator />;\n    default:\n      return <AuthNavigator />;\n  }\n}\n\n// Placeholder components for navigation (will be implemented in next steps)\nexport const PlaceholderScreen = ({ title }: { title: string }) => {\n  return (\n    <div style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <h1>{title}</h1>\n      <p>This screen will be implemented in the next steps.</p>\n    </div>\n  );\n};","size_bytes":1625},"src/navigation/AuthNavigator.tsx":{"content":"import React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// Import screens\nimport LoginScreen from '@/screens/auth/LoginScreen';\nimport RegisterScreen from '@/screens/auth/RegisterScreen';\nimport ForgotPasswordScreen from '@/screens/auth/ForgotPasswordScreen';\n\n// Import types\nimport { AuthStackParamList } from '@/types/navigation';\n\nconst Stack = createStackNavigator<AuthStackParamList>();\n\nexport default function AuthNavigator() {\n  return (\n    <Stack.Navigator\n      initialRouteName=\"Login\"\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#2563eb',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}\n    >\n      <Stack.Screen\n        name=\"Login\"\n        component={LoginScreen}\n        options={{\n          title: 'Sign In',\n          headerShown: false\n        }}\n      />\n      <Stack.Screen\n        name=\"Register\"\n        component={RegisterScreen}\n        options={{\n          title: 'Create Account',\n          headerShown: false\n        }}\n      />\n      <Stack.Screen\n        name=\"ForgotPassword\"\n        component={ForgotPasswordScreen}\n        options={{\n          title: 'Reset Password',\n          headerShown: false\n        }}\n      />\n    </Stack.Navigator>\n  );\n}","size_bytes":1321},"src/navigation/CustomerNavigator.tsx":{"content":"import React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { MaterialIcons } from '@expo/vector-icons';\n\n// Import screens\nimport HomeScreen from '@/screens/customer/HomeScreen';\nimport BookRideScreen from '@/screens/customer/BookRideScreen';\nimport RideHistoryScreen from '@/screens/customer/RideHistoryScreen';\nimport ProfileScreen from '@/screens/customer/ProfileScreen';\nimport SupportScreen from '@/screens/customer/SupportScreen';\nimport PaymentScreen from '@/screens/customer/PaymentScreen';\n\n// Import components\nimport NotificationBell from '@/components/NotificationBell';\n\n// Import types\nimport { CustomerTabParamList, CustomerStackParamList } from '@/types/navigation';\n\nconst Tab = createBottomTabNavigator<CustomerTabParamList>();\nconst Stack = createStackNavigator<CustomerStackParamList>();\n\n// Main tab navigator for customer\nfunction CustomerTabNavigator() {\n  return (\n    <Tab.Navigator\n      screenOptions={{\n        tabBarActiveTintColor: 'hsl(var(--primary))',\n        tabBarInactiveTintColor: 'hsl(var(--muted-foreground))',\n        tabBarStyle: {\n          backgroundColor: 'hsl(var(--background))',\n          borderTopColor: 'hsl(var(--border))',\n        },\n        headerStyle: {\n          backgroundColor: 'hsl(var(--primary))',\n        },\n        headerTintColor: 'hsl(var(--primary-foreground))',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n        headerRight: () => <NotificationBell />,\n      }}\n    >\n      <Tab.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          title: 'Home',\n          tabBarLabel: 'Home',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialIcons name=\"home\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"BookRide\"\n        component={BookRideScreen}\n        options={{\n          title: 'Book Ride',\n          tabBarLabel: 'Book',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialIcons name=\"directions-car\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"RideHistory\"\n        component={RideHistoryScreen}\n        options={{\n          title: 'Ride History',\n          tabBarLabel: 'History',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialIcons name=\"history\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Profile\"\n        component={ProfileScreen}\n        options={{\n          title: 'Profile',\n          tabBarLabel: 'Profile',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialIcons name=\"person\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Support\"\n        component={SupportScreen}\n        options={{\n          title: 'Support',\n          tabBarLabel: 'Support',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialIcons name=\"help\" size={size} color={color} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n  );\n}\n\n// Main customer navigator with stack for modals/details\nexport default function CustomerNavigator() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#3b82f6',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}\n    >\n      <Stack.Screen\n        name=\"CustomerTabs\"\n        component={CustomerTabNavigator}\n        options={{ headerShown: false }}\n      />\n      <Stack.Screen\n        name=\"Payment\"\n        component={PaymentScreen}\n        options={{\n          title: 'Payment',\n          headerStyle: {\n            backgroundColor: '#3b82f6',\n          },\n          headerTintColor: '#fff',\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n        }}\n      />\n      {/* Additional screens can be added here for modals/details */}\n    </Stack.Navigator>\n  );\n}\n","size_bytes":4048},"src/navigation/DriverNavigator.tsx":{"content":"import React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { MaterialIcons } from '@expo/vector-icons';\n\n// Import screens\nimport DriverHomeScreen from '@/screens/driver/DriverHomeScreen';\nimport AvailableRidesScreen from '@/screens/driver/AvailableRidesScreen';\nimport ActiveRideScreen from '@/screens/driver/ActiveRideScreen';\nimport EarningsScreen from '@/screens/driver/EarningsScreen';\nimport DriverProfileScreen from '@/screens/driver/DriverProfileScreen';\n\n// Import components\nimport NotificationBell from '@/components/NotificationBell';\n\n// Import types\nimport { DriverTabParamList, DriverStackParamList } from '@/types/navigation';\n\nconst Tab = createBottomTabNavigator<DriverTabParamList>();\nconst Stack = createStackNavigator<DriverStackParamList>();\n\n// Main tab navigator for driver\nfunction DriverTabNavigator() {\n  return (\n    <Tab.Navigator\n      screenOptions={{\n        tabBarActiveTintColor: 'hsl(var(--primary))',\n        tabBarInactiveTintColor: 'hsl(var(--muted-foreground))',\n        tabBarStyle: {\n          backgroundColor: 'hsl(var(--background))',\n          borderTopColor: 'hsl(var(--border))',\n        },\n        headerStyle: {\n          backgroundColor: 'hsl(var(--primary))',\n        },\n        headerTintColor: 'hsl(var(--primary-foreground))',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n        headerRight: () => <NotificationBell />,\n      }}\n    >\n      <Tab.Screen\n        name=\"DriverHome\"\n        component={DriverHomeScreen}\n        options={{\n          title: 'Dashboard',\n          tabBarLabel: 'Dashboard',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialIcons name=\"dashboard\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"AvailableRides\"\n        component={AvailableRidesScreen}\n        options={{\n          title: 'Available Rides',\n          tabBarLabel: 'Rides',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialIcons name=\"directions-car\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"ActiveRide\"\n        component={ActiveRideScreen}\n        options={{\n          title: 'Active Ride',\n          tabBarLabel: 'Active',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialIcons name=\"play-circle-filled\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Earnings\"\n        component={EarningsScreen}\n        options={{\n          title: 'Earnings',\n          tabBarLabel: 'Earnings',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialIcons name=\"attach-money\" size={size} color={color} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"DriverProfile\"\n        component={DriverProfileScreen}\n        options={{\n          title: 'Profile',\n          tabBarLabel: 'Profile',\n          tabBarIcon: ({ color, size }) => (\n            <MaterialIcons name=\"person\" size={size} color={color} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n  );\n}\n\n// Main driver navigator with stack for modals/details\nexport default function DriverNavigator() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#10b981',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n        },\n      }}\n    >\n      <Stack.Screen\n        name=\"DriverTabs\"\n        component={DriverTabNavigator}\n        options={{ headerShown: false }}\n      />\n      {/* Additional screens can be added here for modals/details */}\n    </Stack.Navigator>\n  );\n}\n","size_bytes":3737},"src/stores/appStore.ts":{"content":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { User, Customer, Driver, Booking, NotificationData, Location, AppState } from '../types';\n\ninterface AppStore extends AppState {\n  // Authentication actions\n  setUser: (user: User | null) => void;\n  setAuthenticated: (isAuthenticated: boolean) => void;\n  logout: () => void;\n\n  // Loading state\n  setLoading: (isLoading: boolean) => void;\n\n  // Booking actions\n  setCurrentBooking: (booking: Booking | null) => void;\n  updateBookingStatus: (status: Booking['status']) => void;\n\n  // Location actions\n  setLocation: (location: Location | null) => void;\n  updateLocation: (location: Partial<Location>) => void;\n\n  // Notification actions\n  addNotification: (notification: NotificationData) => void;\n  markNotificationAsRead: (notificationId: string) => void;\n  clearNotifications: () => void;\n\n  // Online status\n  setOnlineStatus: (isOnline: boolean) => void;\n\n  // Utility actions\n  reset: () => void;\n}\n\nconst initialState: AppState = {\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  currentBooking: null,\n  notifications: [],\n  location: null,\n  isOnline: true,\n};\n\nexport const useAppStore = create<AppStore>()(\n  persist(\n    (set, get) => ({\n      ...initialState,\n\n      setUser: (user) => set({ user }),\n\n      setAuthenticated: (isAuthenticated) => set({ isAuthenticated }),\n\n      logout: () => set({\n        user: null,\n        isAuthenticated: false,\n        currentBooking: null,\n        notifications: [],\n      }),\n\n      setLoading: (isLoading) => set({ isLoading }),\n\n      setCurrentBooking: (booking) => set({ currentBooking: booking }),\n\n      updateBookingStatus: (status) => {\n        const currentBooking = get().currentBooking;\n        if (currentBooking) {\n          set({\n            currentBooking: {\n              ...currentBooking,\n              status,\n            },\n          });\n        }\n      },\n\n      setLocation: (location) => set({ location }),\n\n      updateLocation: (locationUpdate) => {\n        const currentLocation = get().location;\n        if (currentLocation) {\n          set({\n            location: {\n              ...currentLocation,\n              ...locationUpdate,\n            },\n          });\n        } else {\n          set({ location: locationUpdate as Location });\n        }\n      },\n\n      addNotification: (notification) => {\n        set((state) => ({\n          notifications: [notification, ...state.notifications],\n        }));\n      },\n\n      markNotificationAsRead: (notificationId) => {\n        set((state) => ({\n          notifications: state.notifications.map((notification) =>\n            notification.id === notificationId\n              ? { ...notification, is_read: true }\n              : notification\n          ),\n        }));\n      },\n\n      clearNotifications: () => set({ notifications: [] }),\n\n      setOnlineStatus: (isOnline) => set({ isOnline }),\n\n      reset: () => set(initialState),\n    }),\n    {\n      name: 'sdm-app-store',\n      storage: createJSONStorage(() => AsyncStorage),\n      partialize: (state) => ({\n        user: state.user,\n        isAuthenticated: state.isAuthenticated,\n        notifications: state.notifications,\n        location: state.location,\n      }),\n    }\n  )\n);\n\n// Selectors for computed values\nexport const useUser = () => useAppStore((state) => state.user);\nexport const useIsAuthenticated = () => useAppStore((state) => state.isAuthenticated);\nexport const useIsLoading = () => useAppStore((state) => state.isLoading);\nexport const useCurrentBooking = () => useAppStore((state) => state.currentBooking);\nexport const useNotifications = () => useAppStore((state) => state.notifications);\nexport const useLocation = () => useAppStore((state) => state.location);\nexport const useIsOnline = () => useAppStore((state) => state.isOnline);\n\n// Type guards\nexport const isCustomer = (user: User | null): user is Customer => {\n  return user?.role === 'customer';\n};\n\nexport const isDriver = (user: User | null): user is Driver => {\n  return user?.role === 'driver';\n};\n\n// Computed selectors\nexport const useUnreadNotificationsCount = () => {\n  return useAppStore((state) =>\n    state.notifications.filter((notification) => !notification.is_read).length\n  );\n};\n\nexport const useUserRole = () => {\n  return useAppStore((state) => state.user?.role || null);\n};\n\nexport const useIsCustomer = () => {\n  const user = useUser();\n  return isCustomer(user);\n};\n\nexport const useIsDriver = () => {\n  const user = useUser();\n  return isDriver(user);\n};","size_bytes":4630},"src/types/index.ts":{"content":"export type UserRole = 'customer' | 'driver' | 'admin' | 'vendor';\n\nexport type BookingStatus = 'pending' | 'accepted' | 'in_progress' | 'completed' | 'cancelled';\n\nexport type PaymentStatus = 'pending' | 'paid' | 'failed' | 'refunded';\n\nexport type ServiceType = 'city' | 'airport' | 'outstation' | 'hourly';\n\nexport type VehicleType = 'sedan' | 'suv' | 'premium' | 'hatchback';\n\nexport interface User {\n  id: string;\n  email: string;\n  phone?: string;\n  full_name: string;\n  role: UserRole;\n  avatar_url?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Customer extends User {\n  role: 'customer';\n  preferred_payment_method?: string;\n  total_rides?: number;\n  rating?: number;\n}\n\nexport interface Driver extends User {\n  role: 'driver';\n  license_number: string;\n  vehicle_id?: string;\n  is_online: boolean;\n  current_location?: Location;\n  rating?: number;\n  total_rides?: number;\n  earnings?: number;\n}\n\nexport interface Location {\n  latitude: number;\n  longitude: number;\n  address?: string;\n  city?: string;\n  state?: string;\n  country?: string;\n  postal_code?: string;\n}\n\nexport interface Vehicle {\n  id: string;\n  driver_id: string;\n  type: VehicleType;\n  model: string;\n  license_plate: string;\n  color: string;\n  year: number;\n  capacity: number;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Booking {\n  id: string;\n  customer_id: string;\n  driver_id?: string;\n  service_type: ServiceType;\n  pickup_location: Location;\n  drop_location?: Location;\n  scheduled_time?: string;\n  status: BookingStatus;\n  vehicle_type: VehicleType;\n  estimated_fare: number;\n  actual_fare?: number;\n  distance_km?: number;\n  duration_minutes?: number;\n  passenger_count: number;\n  special_instructions?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Payment {\n  id: string;\n  booking_id: string;\n  amount: number;\n  currency: string;\n  status: PaymentStatus;\n  payment_method: string;\n  transaction_id?: string;\n  razorpay_order_id?: string;\n  razorpay_payment_id?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface RideHistory {\n  id: string;\n  booking: Booking;\n  driver?: Driver;\n  vehicle?: Vehicle;\n  payment?: Payment;\n  rating?: number;\n  review?: string;\n}\n\nexport interface NotificationData {\n  id: string;\n  user_id: string;\n  title: string;\n  message: string;\n  type: 'booking' | 'payment' | 'system' | 'promotion';\n  is_read: boolean;\n  data?: any;\n  created_at: string;\n}\n\nexport interface AppState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  currentBooking: Booking | null;\n  notifications: NotificationData[];\n  location: Location | null;\n  isOnline: boolean;\n}\n\nexport interface BookingFormData {\n  service_type: ServiceType;\n  pickup_location: Location;\n  drop_location?: Location;\n  scheduled_time?: Date;\n  vehicle_type: VehicleType;\n  passenger_count: number;\n  special_instructions?: string;\n}\n\nexport interface FareCalculation {\n  base_fare: number;\n  distance_fare: number;\n  time_fare: number;\n  surge_multiplier: number;\n  total_fare: number;\n  estimated_duration: number;\n  estimated_distance: number;\n}","size_bytes":3163},"src/types/navigation.ts":{"content":"export type AuthStackParamList = {\n  Login: undefined;\n  Register: undefined;\n  ForgotPassword: undefined;\n};\n\nexport type CustomerTabParamList = {\n  Home: undefined;\n  BookRide: undefined;\n  RideHistory: undefined;\n  Profile: undefined;\n  Support: undefined;\n};\n\nexport type DriverTabParamList = {\n  DriverHome: undefined;\n  AvailableRides: undefined;\n  ActiveRide: undefined;\n  Earnings: undefined;\n  DriverProfile: undefined;\n};\n\nexport type CustomerStackParamList = {\n  CustomerTabs: undefined;\n  Payment: {\n    bookingId: string;\n    amount: number;\n    description: string;\n  };\n  // Add other customer screens here\n};\n\nexport type DriverStackParamList = {\n  DriverTabs: undefined;\n  // Add other driver screens here\n};\n\nexport type RootStackParamList = {\n  Auth: undefined;\n  Customer: undefined;\n  Driver: undefined;\n};","size_bytes":827},"src/types/react-native-razorpay.d.ts":{"content":"declare module 'react-native-razorpay' {\n  interface RazorpayCheckoutOptions {\n    key: string;\n    amount: number;\n    currency: string;\n    name: string;\n    description?: string;\n    order_id?: string;\n    prefill?: {\n      name?: string;\n      email?: string;\n      contact?: string;\n    };\n    theme?: {\n      color?: string;\n    };\n    retry?: {\n      enabled?: boolean;\n    };\n    timeout?: number;\n  }\n\n  interface RazorpayPaymentResponse {\n    razorpay_payment_id: string;\n    razorpay_order_id: string;\n    razorpay_signature: string;\n  }\n\n  interface RazorpayError {\n    code: number;\n    description: string;\n  }\n\n  class RazorpayCheckout {\n    static open(options: RazorpayCheckoutOptions): Promise<RazorpayPaymentResponse>;\n  }\n\n  export default RazorpayCheckout;\n}","size_bytes":779},"src/components/booking/BookingFlow.tsx":{"content":"import React, { useState, useRef } from 'react';\nimport { View, StyleSheet, Animated, Easing, ScrollView } from 'react-native';\nimport { ServiceType, VehicleType } from '@/types';\nimport { GoogleMap } from '@/components/GoogleMap';\nimport { ServiceTypeStep } from '@/components/booking/ServiceTypeStep';\nimport { LocationStep } from '@/components/booking/LocationStep';\nimport { DateTimeStep } from '@/components/booking/DateTimeStep';\nimport { VehiclePassengerStep } from '@/components/booking/VehiclePassengerStep';\nimport { ConfirmationStep } from '@/components/booking/ConfirmationStep';\n\ninterface LocationData {\n  lat: number;\n  lng: number;\n  address: string;\n}\n\ninterface BookingFlowProps {\n  onBookingComplete: (bookingData: any) => void;\n}\n\nexport const BookingFlow: React.FC<BookingFlowProps> = ({ onBookingComplete }) => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const totalSteps = 5;\n\n  // Animation refs\n  const fadeAnim = useRef(new Animated.Value(1)).current;\n  const slideAnim = useRef(new Animated.Value(0)).current;\n\n  // Form state\n  const [serviceType, setServiceType] = useState<ServiceType>('city');\n  const [tripType, setTripType] = useState<'oneway' | 'roundtrip' | 'pickup' | 'drop'>('oneway');\n  const [isRoundTrip, setIsRoundTrip] = useState(false);\n\n  // Location state\n  const [pickupLocation, setPickupLocation] = useState('');\n  const [dropoffLocation, setDropoffLocation] = useState('');\n  const [pickupCoords, setPickupCoords] = useState<LocationData | null>(null);\n  const [dropoffCoords, setDropoffCoords] = useState<LocationData | null>(null);\n  const [pickupLocationError, setPickupLocationError] = useState('');\n  const [dropoffLocationError, setDropoffLocationError] = useState('');\n\n  // Date & Time state\n  const [scheduledDate, setScheduledDate] = useState<Date | undefined>();\n  const [scheduledTime, setScheduledTime] = useState('');\n  const [returnDate, setReturnDate] = useState<Date | undefined>();\n  const [returnTime, setReturnTime] = useState('');\n\n  // Vehicle & Passenger state\n  const [passengers, setPassengers] = useState(2);\n  const [vehicleType, setVehicleType] = useState<VehicleType>('sedan');\n\n  // Special instructions state\n  const [luggageCount, setLuggageCount] = useState(0);\n  const [hasPet, setHasPet] = useState(false);\n  const [additionalInstructions, setAdditionalInstructions] = useState('');\n\n  // Animation functions\n  const animateStepTransition = (direction: 'forward' | 'backward') => {\n    // Fade out current step\n    Animated.timing(fadeAnim, {\n      toValue: 0,\n      duration: 150,\n      useNativeDriver: true,\n    }).start(() => {\n      // Slide out\n      Animated.timing(slideAnim, {\n        toValue: direction === 'forward' ? -50 : 50,\n        duration: 200,\n        easing: Easing.out(Easing.cubic),\n        useNativeDriver: true,\n      }).start(() => {\n        // Reset animations\n        fadeAnim.setValue(0);\n        slideAnim.setValue(direction === 'forward' ? 50 : -50);\n\n        // Fade in new step\n        Animated.parallel([\n          Animated.timing(fadeAnim, {\n            toValue: 1,\n            duration: 300,\n            useNativeDriver: true,\n          }),\n          Animated.timing(slideAnim, {\n            toValue: 0,\n            duration: 300,\n            easing: Easing.out(Easing.cubic),\n            useNativeDriver: true,\n          }),\n        ]).start();\n      });\n    });\n  };\n\n  const stepLabels = [\n    'Service',\n    'Locations',\n    'Date & Time',\n    'Vehicle',\n    'Confirm'\n  ];\n\n  const handleNext = () => {\n    if (currentStep < totalSteps) {\n      animateStepTransition('forward');\n      setTimeout(() => setCurrentStep(currentStep + 1), 150);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      animateStepTransition('backward');\n      setTimeout(() => setCurrentStep(currentStep - 1), 150);\n    }\n  };\n\n  const handleServiceTypeChange = (type: ServiceType) => {\n    setServiceType(type);\n    // Reset dependent fields when service type changes\n    if (type === 'hourly') {\n      setDropoffLocation('');\n      setDropoffCoords(null);\n      setDropoffLocationError('');\n    }\n  };\n\n  const handleTripTypeChange = (type: 'oneway' | 'roundtrip' | 'pickup' | 'drop') => {\n    setTripType(type);\n    setIsRoundTrip(type === 'roundtrip');\n  };\n\n  const handleConfirmBooking = () => {\n    const bookingData = {\n      serviceType,\n      tripType,\n      isRoundTrip,\n      pickupLocation,\n      dropoffLocation,\n      pickupCoords,\n      dropoffCoords,\n      scheduledDate,\n      scheduledTime,\n      returnDate,\n      returnTime,\n      passengers,\n      vehicleType,\n      luggageCount,\n      hasPet,\n      additionalInstructions,\n    };\n\n    onBookingComplete(bookingData);\n  };\n\n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <ServiceTypeStep\n            serviceType={serviceType}\n            onServiceTypeChange={handleServiceTypeChange}\n            onNext={handleNext}\n          />\n        );\n      case 2:\n        return (\n          <LocationStep\n            serviceType={serviceType}\n            tripType={tripType}\n            pickupLocation={pickupLocation}\n            dropoffLocation={dropoffLocation}\n            pickupCoords={pickupCoords}\n            dropoffCoords={dropoffCoords}\n            pickupLocationError={pickupLocationError}\n            dropoffLocationError={dropoffLocationError}\n            onPickupLocationChange={setPickupLocation}\n            onDropoffLocationChange={setDropoffLocation}\n            onPickupCoordsChange={setPickupCoords}\n            onDropoffCoordsChange={setDropoffCoords}\n            onPickupLocationError={setPickupLocationError}\n            onDropoffLocationError={setDropoffLocationError}\n            onNext={handleNext}\n            onBack={handleBack}\n          />\n        );\n      case 3:\n        return (\n          <DateTimeStep\n            serviceType={serviceType}\n            isRoundTrip={isRoundTrip}\n            scheduledDate={scheduledDate}\n            scheduledTime={scheduledTime}\n            returnDate={returnDate}\n            returnTime={returnTime}\n            onScheduledDateChange={setScheduledDate}\n            onScheduledTimeChange={setScheduledTime}\n            onReturnDateChange={setReturnDate}\n            onReturnTimeChange={setReturnTime}\n            onNext={handleNext}\n            onBack={handleBack}\n          />\n        );\n      case 4:\n        return (\n          <VehiclePassengerStep\n            passengers={passengers}\n            vehicleType={vehicleType}\n            onPassengersChange={setPassengers}\n            onVehicleTypeChange={setVehicleType}\n            onNext={handleNext}\n            onBack={handleBack}\n          />\n        );\n      case 5:\n        return (\n          <ConfirmationStep\n            serviceType={serviceType}\n            tripType={tripType}\n            isRoundTrip={isRoundTrip}\n            pickupLocation={pickupLocation}\n            dropoffLocation={dropoffLocation}\n            pickupCoords={pickupCoords}\n            dropoffCoords={dropoffCoords}\n            scheduledDate={scheduledDate}\n            scheduledTime={scheduledTime}\n            returnDate={returnDate}\n            returnTime={returnTime}\n            passengers={passengers}\n            vehicleType={vehicleType}\n            onLuggageCountChange={setLuggageCount}\n            onHasPetChange={setHasPet}\n            onAdditionalInstructionsChange={setAdditionalInstructions}\n            onConfirm={handleConfirmBooking}\n            onBack={handleBack}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.contentContainer}>\n        {/* Left side - Map (50%) */}\n        <View style={styles.mapContainer}>\n          <GoogleMap\n            pickupLocation={pickupCoords}\n            dropoffLocation={dropoffCoords}\n            height={300}\n            interactive={currentStep === 2} // Only interactive on location step\n            onPickupChange={(location) => {\n              setPickupCoords(location);\n              setPickupLocation(location.address);\n            }}\n            onDropoffChange={(location) => {\n              setDropoffCoords(location);\n              setDropoffLocation(location.address);\n            }}\n            activeMarker=\"pickup\"\n          />\n        </View>\n\n        {/* Bottom side - Form (scrollable) */}\n        <View style={styles.formContainer}>\n          <ScrollView\n            style={styles.scrollContainer}\n            contentContainerStyle={styles.scrollContent}\n            showsVerticalScrollIndicator={true}\n            keyboardShouldPersistTaps=\"handled\"\n          >\n            <Animated.View\n              style={[\n                styles.stepContainer,\n                {\n                  opacity: fadeAnim,\n                  transform: [{ translateX: slideAnim }],\n                },\n              ]}\n            >\n              {renderCurrentStep()}\n            </Animated.View>\n          </ScrollView>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  contentContainer: {\n    flex: 1,\n    flexDirection: 'column',\n  },\n  mapContainer: {\n    height: 300, // Fixed height for map\n    backgroundColor: '#ffffff',\n  },\n  formContainer: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  stepContainer: {\n    flex: 1,\n  },\n  scrollContainer: {\n    flex: 1,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    paddingBottom: 20,\n  },\n});","size_bytes":9553},"src/components/booking/ConfirmationStep.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, ScrollView, TextInput, Switch, Alert } from 'react-native';\nimport { ServiceType, VehicleType } from '@/types';\n\ninterface LocationData {\n  lat: number;\n  lng: number;\n  address: string;\n}\n\ninterface ConfirmationStepProps {\n  serviceType: ServiceType;\n  tripType: 'oneway' | 'roundtrip' | 'pickup' | 'drop';\n  isRoundTrip: boolean;\n  pickupLocation: string;\n  dropoffLocation: string;\n  pickupCoords: LocationData | null;\n  dropoffCoords: LocationData | null;\n  scheduledDate: Date | undefined;\n  scheduledTime: string;\n  returnDate: Date | undefined;\n  returnTime: string;\n  passengers: number;\n  vehicleType: VehicleType;\n  onLuggageCountChange: (count: number) => void;\n  onHasPetChange: (hasPet: boolean) => void;\n  onAdditionalInstructionsChange: (instructions: string) => void;\n  onConfirm: () => void;\n  onBack: () => void;\n}\n\nexport const ConfirmationStep: React.FC<ConfirmationStepProps> = ({\n  serviceType,\n  tripType,\n  isRoundTrip,\n  pickupLocation,\n  dropoffLocation,\n  pickupCoords,\n  dropoffCoords,\n  scheduledDate,\n  scheduledTime,\n  returnDate,\n  returnTime,\n  passengers,\n  vehicleType,\n  onLuggageCountChange,\n  onHasPetChange,\n  onAdditionalInstructionsChange,\n  onConfirm,\n  onBack,\n}) => {\n  const [showSpecialInstructions, setShowSpecialInstructions] = useState(false);\n  const [luggageCount, setLuggageCount] = useState(0);\n  const [hasPet, setHasPet] = useState(false);\n  const [additionalInstructions, setAdditionalInstructions] = useState('');\n\n  // Update parent state when local state changes\n  useEffect(() => {\n    onLuggageCountChange(luggageCount);\n  }, [luggageCount, onLuggageCountChange]);\n\n  useEffect(() => {\n    onHasPetChange(hasPet);\n  }, [hasPet, onHasPetChange]);\n\n  useEffect(() => {\n    onAdditionalInstructionsChange(additionalInstructions);\n  }, [additionalInstructions, onAdditionalInstructionsChange]);\n\n  const getServiceTypeLabel = () => {\n    switch (serviceType) {\n      case 'city': return 'City Ride';\n      case 'outstation': return 'Outstation';\n      case 'airport': return 'Airport Taxi';\n      case 'hourly': return 'Hourly Rental';\n      default: return serviceType;\n    }\n  };\n\n  const getVehicleTypeLabel = () => {\n    switch (vehicleType) {\n      case 'sedan': return 'Sedan';\n      case 'suv': return 'SUV';\n      case 'premium': return 'Premium';\n      default: return vehicleType;\n    }\n  };\n\n  const formatDateTime = (date: Date | undefined, time: string) => {\n    if (!date) return 'Not scheduled';\n    return `${date.toLocaleDateString('en-IN', {\n      weekday: 'short',\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    })} at ${time}`;\n  };\n\n  const handleConfirm = () => {\n    Alert.alert(\n      'Confirm Booking',\n      'Are you sure you want to proceed with this booking?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { text: 'Confirm', onPress: onConfirm },\n      ]\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <ScrollView showsVerticalScrollIndicator={false}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Review & Confirm</Text>\n          <Text style={styles.subtitle}>Please review your booking details</Text>\n        </View>\n\n        {/* Booking Summary */}\n        <View style={styles.summarySection}>\n          <Text style={styles.sectionTitle}>Booking Summary</Text>\n\n          <View style={styles.summaryCard}>\n            {/* Service Type */}\n            <View style={styles.summaryItem}>\n              <Text style={styles.summaryLabel}>Service</Text>\n              <Text style={styles.summaryValue}>{getServiceTypeLabel()}</Text>\n            </View>\n\n            {/* Trip Type */}\n            {(serviceType === 'outstation' || serviceType === 'airport') && (\n              <View style={styles.summaryItem}>\n                <Text style={styles.summaryLabel}>Trip Type</Text>\n                <Text style={styles.summaryValue}>\n                  {serviceType === 'outstation'\n                    ? (isRoundTrip ? 'Round Trip' : 'One Way')\n                    : (tripType === 'pickup' ? 'Airport Pickup' : 'Airport Drop-off')\n                  }\n                </Text>\n              </View>\n            )}\n\n            {/* Locations */}\n            <View style={styles.summaryItem}>\n              <Text style={styles.summaryLabel}>From</Text>\n              <Text style={styles.summaryValue}>{pickupLocation || 'Not selected'}</Text>\n            </View>\n\n            {serviceType !== 'hourly' && (\n              <View style={styles.summaryItem}>\n                <Text style={styles.summaryLabel}>To</Text>\n                <Text style={styles.summaryValue}>{dropoffLocation || 'Not selected'}</Text>\n              </View>\n            )}\n\n            {/* Date & Time */}\n            <View style={styles.summaryItem}>\n              <Text style={styles.summaryLabel}>Pickup</Text>\n              <Text style={styles.summaryValue}>\n                {formatDateTime(scheduledDate, scheduledTime)}\n              </Text>\n            </View>\n\n            {isRoundTrip && (\n              <View style={styles.summaryItem}>\n                <Text style={styles.summaryLabel}>Return</Text>\n                <Text style={styles.summaryValue}>\n                  {formatDateTime(returnDate, returnTime)}\n                </Text>\n              </View>\n            )}\n\n            {/* Passengers & Vehicle */}\n            <View style={styles.summaryItem}>\n              <Text style={styles.summaryLabel}>Passengers</Text>\n              <Text style={styles.summaryValue}>{passengers}</Text>\n            </View>\n\n            <View style={styles.summaryItem}>\n              <Text style={styles.summaryLabel}>Vehicle</Text>\n              <Text style={styles.summaryValue}>{getVehicleTypeLabel()}</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Special Instructions */}\n        <View style={styles.specialInstructionsSection}>\n          <TouchableOpacity\n            style={styles.specialInstructionsToggle}\n            onPress={() => setShowSpecialInstructions(!showSpecialInstructions)}\n          >\n            <Text style={styles.specialInstructionsLabel}>Special Instructions</Text>\n            <Text style={styles.specialInstructionsIcon}>\n              {showSpecialInstructions ? '−' : '+'}\n            </Text>\n          </TouchableOpacity>\n\n          {showSpecialInstructions && (\n            <View style={styles.specialInstructionsContent}>\n              {/* Luggage */}\n              <View style={styles.specialInstructionsRow}>\n                <Text style={styles.specialInstructionsText}>Luggage Items</Text>\n                <View style={styles.counterContainer}>\n                  <TouchableOpacity\n                    style={styles.counterButton}\n                    onPress={() => setLuggageCount(Math.max(0, luggageCount - 1))}\n                  >\n                    <Text style={styles.counterButtonText}>−</Text>\n                  </TouchableOpacity>\n                  <Text style={styles.counterValue}>{luggageCount}</Text>\n                  <TouchableOpacity\n                    style={styles.counterButton}\n                    onPress={() => setLuggageCount(Math.min(3, luggageCount + 1))}\n                  >\n                    <Text style={styles.counterButtonText}>+</Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n\n              {/* Pet */}\n              <View style={styles.specialInstructionsRow}>\n                <Text style={styles.specialInstructionsText}>Traveling with Pet</Text>\n                <Switch\n                  value={hasPet}\n                  onValueChange={setHasPet}\n                  trackColor={{ false: '#cbd5e1', true: '#2563eb' }}\n                  thumbColor={hasPet ? '#ffffff' : '#f1f5f9'}\n                />\n              </View>\n\n              {/* Additional Instructions */}\n              <TextInput\n                style={styles.additionalInstructionsInput}\n                placeholder=\"Any additional requirements...\"\n                value={additionalInstructions}\n                onChangeText={setAdditionalInstructions}\n                multiline\n                numberOfLines={3}\n              />\n            </View>\n          )}\n        </View>\n\n        {/* Terms & Conditions */}\n        <View style={styles.termsSection}>\n          <Text style={styles.termsTitle}>Important Notes</Text>\n          <View style={styles.termsList}>\n            <Text style={styles.termsItem}>• Driver will contact you 15 minutes before pickup</Text>\n            <Text style={styles.termsItem}>• Please be ready at the pickup location</Text>\n            <Text style={styles.termsItem}>• Cancellation charges may apply</Text>\n            <Text style={styles.termsItem}>• Toll charges and parking fees are extra</Text>\n          </View>\n        </View>\n      </ScrollView>\n\n      {/* Navigation */}\n      <View style={styles.footer}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.backButton} onPress={onBack}>\n            <Text style={styles.backButtonText}>Back</Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={styles.confirmButton}\n            onPress={handleConfirm}\n          >\n            <Text style={styles.confirmButtonText}>Confirm Booking</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    padding: 12,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 2,\n  },\n  subtitle: {\n    fontSize: 12,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  summarySection: {\n    paddingHorizontal: 12,\n    marginBottom: 12,\n  },\n  sectionTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 6,\n  },\n  summaryCard: {\n    backgroundColor: '#ffffff',\n    borderRadius: 6,\n    padding: 8,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  summaryItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 4,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f1f5f9',\n  },\n  summaryLabel: {\n    fontSize: 12,\n    color: '#64748b',\n    flex: 1,\n  },\n  summaryValue: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: '#1e293b',\n    flex: 2,\n    textAlign: 'right',\n  },\n  specialInstructionsSection: {\n    paddingHorizontal: 12,\n    marginBottom: 12,\n  },\n  specialInstructionsToggle: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 12,\n    backgroundColor: '#ffffff',\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  specialInstructionsLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#1e293b',\n  },\n  specialInstructionsIcon: {\n    fontSize: 16,\n    color: '#64748b',\n  },\n  specialInstructionsContent: {\n    marginTop: 6,\n    padding: 8,\n    backgroundColor: '#ffffff',\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  specialInstructionsRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  specialInstructionsText: {\n    fontSize: 12,\n    color: '#475569',\n  },\n  counterContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n  },\n  counterButton: {\n    width: 32,\n    height: 32,\n    backgroundColor: '#e2e8f0',\n    borderRadius: 16,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  counterButtonText: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#475569',\n  },\n  counterValue: {\n    width: 32,\n    textAlign: 'center',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  additionalInstructionsInput: {\n    padding: 8,\n    backgroundColor: '#f8fafc',\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n    fontSize: 12,\n    color: '#1e293b',\n  },\n  termsSection: {\n    paddingHorizontal: 12,\n    marginBottom: 12,\n  },\n  termsTitle: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 6,\n  },\n  termsList: {\n    backgroundColor: '#ffffff',\n    borderRadius: 6,\n    padding: 8,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  termsItem: {\n    fontSize: 12,\n    color: '#64748b',\n    marginBottom: 6,\n    lineHeight: 16,\n  },\n  footer: {\n    padding: 12,\n    paddingBottom: 24,\n    backgroundColor: '#ffffff',\n    borderTopWidth: 1,\n    borderTopColor: '#e2e8f0',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  backButton: {\n    flex: 1,\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  backButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#475569',\n  },\n  confirmButton: {\n    flex: 2,\n    backgroundColor: '#10b981',\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  confirmButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#ffffff',\n  },\n});","size_bytes":13178},"src/components/booking/DateTimeStep.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';\nimport { ServiceType } from '@/types';\n\ninterface DateTimeStepProps {\n  serviceType: ServiceType;\n  isRoundTrip: boolean;\n  scheduledDate: Date | undefined;\n  scheduledTime: string;\n  returnDate: Date | undefined;\n  returnTime: string;\n  onScheduledDateChange: (date: Date | undefined) => void;\n  onScheduledTimeChange: (time: string) => void;\n  onReturnDateChange: (date: Date | undefined) => void;\n  onReturnTimeChange: (time: string) => void;\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport const DateTimeStep: React.FC<DateTimeStepProps> = ({\n  serviceType,\n  isRoundTrip,\n  scheduledDate,\n  scheduledTime,\n  returnDate,\n  returnTime,\n  onScheduledDateChange,\n  onScheduledTimeChange,\n  onReturnDateChange,\n  onReturnTimeChange,\n  onNext,\n  onBack,\n}) => {\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [showTimePicker, setShowTimePicker] = useState(false);\n  const [activePicker, setActivePicker] = useState<'scheduled' | 'return'>('scheduled');\n\n  // Generate time slots\n  const generateTimeSlots = () => {\n    const slots: string[] = [];\n    for (let h = 0; h < 24; h++) {\n      const hh = String(h).padStart(2, '0');\n      slots.push(`${hh}:00`);\n      slots.push(`${hh}:30`);\n    }\n    slots.push('24:00');\n    return slots;\n  };\n\n  const timeSlots = generateTimeSlots();\n\n  // Quick date options\n  const quickDateOptions = [\n    { label: 'Today', value: 0 },\n    { label: 'Tomorrow', value: 1 },\n    { label: 'Day After', value: 2 },\n  ];\n\n  const handleQuickDateSelect = (daysFromNow: number) => {\n    const date = new Date();\n    date.setDate(date.getDate() + daysFromNow);\n    if (activePicker === 'scheduled') {\n      onScheduledDateChange(date);\n    } else {\n      onReturnDateChange(date);\n    }\n  };\n\n  const handleTimeSelect = (time: string) => {\n    if (activePicker === 'scheduled') {\n      onScheduledTimeChange(time);\n    } else {\n      onReturnTimeChange(time);\n    }\n    setShowTimePicker(false);\n  };\n\n  const isFormValid = () => {\n    const hasScheduledDateTime = scheduledDate && scheduledTime;\n    const hasReturnDateTime = !isRoundTrip || (returnDate && returnTime);\n    return hasScheduledDateTime && hasReturnDateTime;\n  };\n\n  const formatDate = (date: Date | undefined) => {\n    if (!date) return 'Select date';\n    return date.toLocaleDateString('en-IN', {\n      weekday: 'short',\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  return (\n    <View style={styles.container}>\n      <ScrollView showsVerticalScrollIndicator={false}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Schedule Your Ride</Text>\n          <Text style={styles.subtitle}>Choose when you want to travel</Text>\n        </View>\n\n        {/* Scheduled Date & Time */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Pickup Date & Time</Text>\n\n          {/* Quick Date Selection */}\n          <View style={styles.quickDateContainer}>\n            {quickDateOptions.map((option) => (\n              <TouchableOpacity\n                key={option.value}\n                style={[\n                  styles.quickDateButton,\n                  (activePicker === 'scheduled' && scheduledDate?.toDateString() === new Date(Date.now() + option.value * 24 * 60 * 60 * 1000).toDateString()) && styles.quickDateButtonActive\n                ]}\n                onPress={() => {\n                  setActivePicker('scheduled');\n                  handleQuickDateSelect(option.value);\n                }}\n              >\n                <Text style={[\n                  styles.quickDateText,\n                  (activePicker === 'scheduled' && scheduledDate?.toDateString() === new Date(Date.now() + option.value * 24 * 60 * 60 * 1000).toDateString()) && styles.quickDateTextActive\n                ]}>\n                  {option.label}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n\n          {/* Date & Time Selection */}\n          <View style={styles.dateTimeContainer}>\n            <TouchableOpacity\n              style={styles.dateTimeButton}\n              onPress={() => {\n                setActivePicker('scheduled');\n                setShowDatePicker(true);\n              }}\n            >\n              <Text style={styles.dateTimeLabel}>Date</Text>\n              <Text style={styles.dateTimeValue}>\n                {formatDate(scheduledDate)}\n              </Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.dateTimeButton}\n              onPress={() => {\n                setActivePicker('scheduled');\n                setShowTimePicker(true);\n              }}\n            >\n              <Text style={styles.dateTimeLabel}>Time</Text>\n              <Text style={styles.dateTimeValue}>\n                {scheduledTime || 'Select time'}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Return Date & Time for Round Trip */}\n        {isRoundTrip && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Return Date & Time</Text>\n\n            {/* Quick Date Selection for Return */}\n            <View style={styles.quickDateContainer}>\n              {quickDateOptions.map((option) => (\n                <TouchableOpacity\n                  key={option.value}\n                  style={[\n                    styles.quickDateButton,\n                    (activePicker === 'return' && returnDate?.toDateString() === new Date(Date.now() + option.value * 24 * 60 * 60 * 1000).toDateString()) && styles.quickDateButtonActive\n                  ]}\n                  onPress={() => {\n                    setActivePicker('return');\n                    handleQuickDateSelect(option.value);\n                  }}\n                >\n                  <Text style={[\n                    styles.quickDateText,\n                    (activePicker === 'return' && returnDate?.toDateString() === new Date(Date.now() + option.value * 24 * 60 * 60 * 1000).toDateString()) && styles.quickDateTextActive\n                  ]}>\n                    {option.label}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n\n            {/* Return Date & Time Selection */}\n            <View style={styles.dateTimeContainer}>\n              <TouchableOpacity\n                style={styles.dateTimeButton}\n                onPress={() => {\n                  setActivePicker('return');\n                  setShowDatePicker(true);\n                }}\n              >\n                <Text style={styles.dateTimeLabel}>Return Date</Text>\n                <Text style={styles.dateTimeValue}>\n                  {formatDate(returnDate)}\n                </Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity\n                style={styles.dateTimeButton}\n                onPress={() => {\n                  setActivePicker('return');\n                  setShowTimePicker(true);\n                }}\n              >\n                <Text style={styles.dateTimeLabel}>Return Time</Text>\n                <Text style={styles.dateTimeValue}>\n                  {returnTime || 'Select time'}\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        )}\n\n        {/* Date Picker Modal */}\n        {showDatePicker && (\n          <View style={styles.modalOverlay}>\n            <View style={styles.modalContent}>\n              <Text style={styles.modalTitle}>\n                Select {activePicker === 'scheduled' ? 'Pickup' : 'Return'} Date\n              </Text>\n\n              {/* Simple date selection - in real app, use proper date picker */}\n              <View style={styles.dateGrid}>\n                {Array.from({ length: 30 }, (_, i) => {\n                  const date = new Date();\n                  date.setDate(date.getDate() + i);\n                  const isSelected = activePicker === 'scheduled'\n                    ? scheduledDate?.toDateString() === date.toDateString()\n                    : returnDate?.toDateString() === date.toDateString();\n\n                  return (\n                    <TouchableOpacity\n                      key={i}\n                      style={[styles.dateButton, isSelected && styles.dateButtonActive]}\n                      onPress={() => {\n                        if (activePicker === 'scheduled') {\n                          onScheduledDateChange(date);\n                        } else {\n                          onReturnDateChange(date);\n                        }\n                        setShowDatePicker(false);\n                      }}\n                    >\n                      <Text style={[styles.dateText, isSelected && styles.dateTextActive]}>\n                        {date.getDate()}\n                      </Text>\n                      <Text style={[styles.dayText, isSelected && styles.dayTextActive]}>\n                        {date.toLocaleDateString('en-IN', { weekday: 'short' })}\n                      </Text>\n                    </TouchableOpacity>\n                  );\n                })}\n              </View>\n\n              <TouchableOpacity\n                style={styles.modalCancelButton}\n                onPress={() => setShowDatePicker(false)}\n              >\n                <Text style={styles.modalCancelText}>Cancel</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        )}\n\n        {/* Time Picker Modal */}\n        {showTimePicker && (\n          <View style={styles.modalOverlay}>\n            <View style={styles.modalContent}>\n              <Text style={styles.modalTitle}>\n                Select {activePicker === 'scheduled' ? 'Pickup' : 'Return'} Time\n              </Text>\n\n              <ScrollView style={styles.timeScrollView} showsVerticalScrollIndicator={false}>\n                <View style={styles.timeGrid}>\n                  {timeSlots.map((time) => {\n                    const isSelected = activePicker === 'scheduled'\n                      ? scheduledTime === time\n                      : returnTime === time;\n\n                    return (\n                      <TouchableOpacity\n                        key={time}\n                        style={[styles.timeButton, isSelected && styles.timeButtonActive]}\n                        onPress={() => handleTimeSelect(time)}\n                      >\n                        <Text style={[styles.timeText, isSelected && styles.timeTextActive]}>\n                          {time}\n                        </Text>\n                      </TouchableOpacity>\n                    );\n                  })}\n                </View>\n              </ScrollView>\n\n              <TouchableOpacity\n                style={styles.modalCancelButton}\n                onPress={() => setShowTimePicker(false)}\n              >\n                <Text style={styles.modalCancelText}>Cancel</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        )}\n      </ScrollView>\n\n      {/* Navigation */}\n      <View style={styles.footer}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.backButton} onPress={onBack}>\n            <Text style={styles.backButtonText}>Back</Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[styles.nextButton, !isFormValid() && styles.nextButtonDisabled]}\n            onPress={onNext}\n            disabled={!isFormValid()}\n          >\n            <Text style={[\n              styles.nextButtonText,\n              !isFormValid() && styles.nextButtonTextDisabled,\n            ]}>\n              Continue\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    padding: 16,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  section: {\n    paddingHorizontal: 16,\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 16,\n  },\n  quickDateContainer: {\n    flexDirection: 'row',\n    gap: 12,\n    marginBottom: 20,\n  },\n  quickDateButton: {\n    flex: 1,\n    padding: 12,\n    backgroundColor: '#ffffff',\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n    alignItems: 'center',\n  },\n  quickDateButtonActive: {\n    borderColor: '#2563eb',\n    backgroundColor: '#eff6ff',\n  },\n  quickDateText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#475569',\n  },\n  quickDateTextActive: {\n    color: '#2563eb',\n  },\n  dateTimeContainer: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  dateTimeButton: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  dateTimeLabel: {\n    fontSize: 14,\n    color: '#64748b',\n    marginBottom: 4,\n  },\n  dateTimeValue: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#1e293b',\n  },\n  modalOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'flex-end',\n    zIndex: 1000,\n  },\n  modalContent: {\n    backgroundColor: '#ffffff',\n    borderTopLeftRadius: 16,\n    borderTopRightRadius: 16,\n    padding: 20,\n    maxHeight: '70%',\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 16,\n    textAlign: 'center',\n  },\n  dateGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n    marginBottom: 20,\n  },\n  dateButton: {\n    width: 60,\n    height: 60,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  dateButtonActive: {\n    borderColor: '#2563eb',\n    backgroundColor: '#eff6ff',\n  },\n  dateText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n  },\n  dateTextActive: {\n    color: '#2563eb',\n  },\n  dayText: {\n    fontSize: 12,\n    color: '#64748b',\n    marginTop: 2,\n  },\n  dayTextActive: {\n    color: '#2563eb',\n  },\n  timeScrollView: {\n    maxHeight: 300,\n  },\n  timeGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  timeButton: {\n    width: 80,\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n    alignItems: 'center',\n  },\n  timeButtonActive: {\n    borderColor: '#2563eb',\n    backgroundColor: '#eff6ff',\n  },\n  timeText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#475569',\n  },\n  timeTextActive: {\n    color: '#2563eb',\n  },\n  modalCancelButton: {\n    backgroundColor: '#e2e8f0',\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n    marginTop: 16,\n  },\n  modalCancelText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#475569',\n  },\n  footer: {\n    padding: 16,\n    paddingBottom: 32,\n    backgroundColor: '#ffffff',\n    borderTopWidth: 1,\n    borderTopColor: '#e2e8f0',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  backButton: {\n    flex: 1,\n    paddingVertical: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  backButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#475569',\n  },\n  nextButton: {\n    flex: 2,\n    backgroundColor: '#2563eb',\n    paddingVertical: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n  nextButtonDisabled: {\n    backgroundColor: '#cbd5e1',\n  },\n  nextButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#ffffff',\n  },\n  nextButtonTextDisabled: {\n    color: '#64748b',\n  },\n});","size_bytes":15858},"src/components/booking/LocationStep.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';\nimport { ServiceType } from '@/types';\nimport { GooglePlacesInput } from '@/components/GooglePlacesInput';\n\ninterface LocationData {\n  lat: number;\n  lng: number;\n  address: string;\n}\n\ninterface LocationStepProps {\n  serviceType: ServiceType;\n  tripType: 'oneway' | 'roundtrip' | 'pickup' | 'drop';\n  pickupLocation: string;\n  dropoffLocation: string;\n  pickupCoords: LocationData | null;\n  dropoffCoords: LocationData | null;\n  pickupLocationError: string;\n  dropoffLocationError: string;\n  onPickupLocationChange: (value: string) => void;\n  onDropoffLocationChange: (value: string) => void;\n  onPickupCoordsChange: (coords: LocationData | null) => void;\n  onDropoffCoordsChange: (coords: LocationData | null) => void;\n  onPickupLocationError: (error: string) => void;\n  onDropoffLocationError: (error: string) => void;\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport const LocationStep: React.FC<LocationStepProps> = ({\n  serviceType,\n  tripType,\n  pickupLocation,\n  dropoffLocation,\n  pickupCoords,\n  dropoffCoords,\n  pickupLocationError,\n  dropoffLocationError,\n  onPickupLocationChange,\n  onDropoffLocationChange,\n  onPickupCoordsChange,\n  onDropoffCoordsChange,\n  onPickupLocationError,\n  onDropoffLocationError,\n  onNext,\n  onBack,\n}) => {\n\n  // Airport terminals\n  const airportTerminals = {\n    terminal1: { name: 'Terminal 1 (KIA)', address: 'Terminal 1, Kempegowda International Airport' },\n    terminal2: { name: 'Terminal 2 (KIA)', address: 'Terminal 2, Kempegowda International Airport' }\n  };\n\n  // Location validation\n  const validateLocationRadius = (lat: number, lng: number) => {\n    const mysoreCoords = { lat: 12.2958, lng: 76.6394 };\n    const bangaloreCoords = { lat: 12.9716, lng: 77.5946 };\n\n    const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number) => {\n      const R = 6371;\n      const dLat = (lat2 - lat1) * Math.PI / 180;\n      const dLng = (lng2 - lng1) * Math.PI / 180;\n      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n        Math.sin(dLng / 2) * Math.sin(dLng / 2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      return R * c;\n    };\n\n    const distanceFromMysore = calculateDistance(lat, lng, mysoreCoords.lat, mysoreCoords.lng);\n    const distanceFromBangalore = calculateDistance(lat, lng, bangaloreCoords.lat, bangaloreCoords.lng);\n\n    return distanceFromMysore <= 50 || distanceFromBangalore <= 50;\n  };\n\n  const handlePickupSelect = (place: any) => {\n    const isWithinRadius = validateLocationRadius(\n      place.geometry.location.lat,\n      place.geometry.location.lng\n    );\n\n    if (!isWithinRadius) {\n      onPickupLocationError(\"❌ We're currently unavailable in this location. Please select a location near Mysore or Bangalore.\");\n      onPickupCoordsChange(null);\n      onPickupLocationChange(place.description);\n      return;\n    }\n\n    onPickupLocationError(\"\");\n    onPickupCoordsChange({\n      lat: place.geometry.location.lat,\n      lng: place.geometry.location.lng,\n      address: place.description\n    });\n    onPickupLocationChange(place.description);\n  };\n\n  const handleDropoffSelect = (place: any) => {\n    const isWithinRadius = validateLocationRadius(\n      place.geometry.location.lat,\n      place.geometry.location.lng\n    );\n\n    if (!isWithinRadius) {\n      onDropoffLocationError(\"❌ We're currently unavailable in this location. Please select a location near Mysore or Bangalore.\");\n      onDropoffCoordsChange(null);\n      onDropoffLocationChange(place.description);\n      return;\n    }\n\n    onDropoffLocationError(\"\");\n    onDropoffCoordsChange({\n      lat: place.geometry.location.lat,\n      lng: place.geometry.location.lng,\n      address: place.description\n    });\n    onDropoffLocationChange(place.description);\n  };\n\n  const isFormValid = () => {\n    const hasPickup = !!pickupCoords;\n    const hasDestination = serviceType === 'hourly' ? true : !!dropoffCoords;\n    const noErrors = !pickupLocationError && !dropoffLocationError;\n    return hasPickup && hasDestination && noErrors;\n  };\n\n  return (\n    <View style={styles.container}>\n      <ScrollView showsVerticalScrollIndicator={false}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Select Locations</Text>\n          <Text style={styles.subtitle}>Choose your pickup and drop-off locations</Text>\n        </View>\n\n        {/* Pickup Location */}\n        <View style={styles.locationSection}>\n          <Text style={styles.locationLabel}>\n            {serviceType === 'airport' && tripType === 'pickup' ? 'Select Terminal' : 'Pickup Location'}\n          </Text>\n\n          {serviceType === 'airport' && tripType === 'pickup' ? (\n            <View style={styles.terminalContainer}>\n              {Object.entries(airportTerminals).map(([key, terminal]) => (\n                <TouchableOpacity\n                  key={key}\n                  style={[\n                    styles.terminalButton,\n                    pickupLocation === terminal.address && styles.terminalButtonActive\n                  ]}\n                  onPress={() => {\n                    onPickupLocationChange(terminal.address);\n                    onPickupCoordsChange({\n                      lat: 13.1986, lng: 77.7066, address: terminal.address\n                    });\n                    onPickupLocationError('');\n                  }}\n                >\n                  <Text style={[\n                    styles.terminalText,\n                    pickupLocation === terminal.address && styles.terminalTextActive\n                  ]}>\n                    {terminal.name}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n          ) : (\n            <GooglePlacesInput\n              placeholder=\"Enter pickup location\"\n              value={pickupLocation}\n              onChange={(value) => {\n                onPickupLocationChange(value);\n                onPickupCoordsChange(null);\n              }}\n              onPlaceSelect={handlePickupSelect}\n              icon=\"pickup\"\n              showCurrentLocation={true}\n            />\n          )}\n\n          {pickupLocationError ? (\n            <Text style={styles.errorText}>{pickupLocationError}</Text>\n          ) : null}\n        </View>\n\n        {/* Dropoff Location */}\n        {serviceType !== 'hourly' && (\n          <View style={styles.locationSection}>\n            <Text style={styles.locationLabel}>\n              {serviceType === 'airport' && tripType === 'drop' ? 'Select Terminal' : 'Drop-off Location'}\n            </Text>\n\n            {serviceType === 'airport' && tripType === 'drop' ? (\n              <View style={styles.terminalContainer}>\n                {Object.entries(airportTerminals).map(([key, terminal]) => (\n                  <TouchableOpacity\n                    key={key}\n                    style={[\n                      styles.terminalButton,\n                      dropoffLocation === terminal.address && styles.terminalButtonActive\n                    ]}\n                    onPress={() => {\n                      onDropoffLocationChange(terminal.address);\n                      onDropoffCoordsChange({\n                        lat: 13.1986, lng: 77.7066, address: terminal.address\n                      });\n                      onDropoffLocationError('');\n                    }}\n                  >\n                    <Text style={[\n                      styles.terminalText,\n                      dropoffLocation === terminal.address && styles.terminalTextActive\n                    ]}>\n                      {terminal.name}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            ) : (\n              <GooglePlacesInput\n                placeholder=\"Enter drop-off location\"\n                value={dropoffLocation}\n                onChange={(value) => {\n                  onDropoffLocationChange(value);\n                  onDropoffCoordsChange(null);\n                }}\n                onPlaceSelect={handleDropoffSelect}\n                icon=\"dropoff\"\n              />\n            )}\n\n            {dropoffLocationError ? (\n              <Text style={styles.errorText}>{dropoffLocationError}</Text>\n            ) : null}\n          </View>\n        )}\n\n      </ScrollView>\n\n      {/* Navigation */}\n      <View style={styles.footer}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.backButton} onPress={onBack}>\n            <Text style={styles.backButtonText}>Back</Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[styles.nextButton, !isFormValid() && styles.nextButtonDisabled]}\n            onPress={onNext}\n            disabled={!isFormValid()}\n          >\n            <Text style={[\n              styles.nextButtonText,\n              !isFormValid() && styles.nextButtonTextDisabled,\n            ]}>\n              Continue\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    padding: 20,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  locationSection: {\n    paddingHorizontal: 20,\n    marginBottom: 20,\n  },\n  locationLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 12,\n  },\n  terminalContainer: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  terminalButton: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#ffffff',\n    borderRadius: 8,\n    borderWidth: 2,\n    borderColor: '#e2e8f0',\n    alignItems: 'center',\n  },\n  terminalButtonActive: {\n    borderColor: '#2563eb',\n    backgroundColor: '#eff6ff',\n  },\n  terminalText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#475569',\n  },\n  terminalTextActive: {\n    color: '#2563eb',\n  },\n  errorText: {\n    fontSize: 12,\n    color: '#dc2626',\n    marginTop: 8,\n  },\n  footer: {\n    padding: 20,\n    paddingBottom: 40,\n    backgroundColor: '#ffffff',\n    borderTopWidth: 1,\n    borderTopColor: '#e2e8f0',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  backButton: {\n    flex: 1,\n    paddingVertical: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  backButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#475569',\n  },\n  nextButton: {\n    flex: 2,\n    backgroundColor: '#2563eb',\n    paddingVertical: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n  nextButtonDisabled: {\n    backgroundColor: '#cbd5e1',\n  },\n  nextButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#ffffff',\n  },\n  nextButtonTextDisabled: {\n    color: '#64748b',\n  },\n});","size_bytes":11057},"src/components/booking/ServiceTypeStep.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet } from 'react-native';\nimport { MaterialIcons, Ionicons } from '@expo/vector-icons';\nimport { ServiceType } from '@/types';\n\ninterface ServiceTypeStepProps {\n  serviceType: ServiceType;\n  onServiceTypeChange: (serviceType: ServiceType) => void;\n  onNext: () => void;\n}\n\nexport const ServiceTypeStep: React.FC<ServiceTypeStepProps> = ({\n  serviceType,\n  onServiceTypeChange,\n  onNext,\n}) => {\n  const serviceTypes = [\n    { id: 'city' as ServiceType, name: 'City Ride', icon: 'location-city', iconType: 'MaterialIcons', description: 'Local city transportation' },\n    { id: 'outstation' as ServiceType, name: 'Outstation', icon: 'directions-car', iconType: 'MaterialIcons', description: 'Inter-city travel' },\n    { id: 'airport' as ServiceType, name: 'Airport Taxi', icon: 'flight', iconType: 'MaterialIcons', description: 'Airport transfers' },\n    { id: 'hourly' as ServiceType, name: 'Hourly Rentals', icon: 'schedule', iconType: 'MaterialIcons', description: 'Hourly vehicle rental' },\n  ];\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Choose Your Service</Text>\n        <Text style={styles.subtitle}>Select the type of ride you need</Text>\n      </View>\n\n      <View style={styles.serviceGrid}>\n        {serviceTypes.map((service) => (\n          <TouchableOpacity\n            key={service.id}\n            style={[\n              styles.serviceCard,\n              serviceType === service.id && styles.serviceCardActive,\n            ]}\n            onPress={() => onServiceTypeChange(service.id)}\n          >\n            <View style={styles.serviceIconContainer}>\n              {service.iconType === 'MaterialIcons' ? (\n                <MaterialIcons name={service.icon as any} size={24} color=\"#64748b\" />\n              ) : (\n                <Ionicons name={service.icon as any} size={24} color=\"#64748b\" />\n              )}\n            </View>\n            <View style={styles.serviceContent}>\n              <Text style={[\n                styles.serviceName,\n                serviceType === service.id && styles.serviceNameActive,\n              ]}>\n                {service.name}\n              </Text>\n              <Text style={[\n                styles.serviceDescription,\n                serviceType === service.id && styles.serviceDescriptionActive,\n              ]}>\n                {service.description}\n              </Text>\n            </View>\n            {serviceType === service.id && (\n              <View style={styles.checkmark}>\n                <MaterialIcons name=\"check\" size={16} color=\"#ffffff\" />\n              </View>\n            )}\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      <View style={styles.footer}>\n        <TouchableOpacity\n          style={[styles.nextButton, !serviceType && styles.nextButtonDisabled]}\n          onPress={onNext}\n          disabled={!serviceType}\n        >\n          <Text style={[\n            styles.nextButtonText,\n            !serviceType && styles.nextButtonTextDisabled,\n          ]}>\n            Continue\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    padding: 16,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  serviceGrid: {\n    padding: 16,\n    gap: 12,\n  },\n  serviceCard: {\n    backgroundColor: '#ffffff',\n    borderRadius: 16,\n    padding: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 2,\n    borderColor: '#e2e8f0',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.05,\n    shadowRadius: 8,\n    elevation: 2,\n  },\n  serviceCardActive: {\n    borderColor: '#2563eb',\n    backgroundColor: '#eff6ff',\n  },\n  serviceIconContainer: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: '#f1f5f9',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 16,\n  },\n  serviceIcon: {\n    fontSize: 24,\n  },\n  serviceContent: {\n    flex: 1,\n  },\n  serviceName: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  serviceNameActive: {\n    color: '#2563eb',\n  },\n  serviceDescription: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  serviceDescriptionActive: {\n    color: '#475569',\n  },\n  checkmark: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    backgroundColor: '#2563eb',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  footer: {\n    padding: 16,\n    paddingBottom: 32,\n  },\n  nextButton: {\n    backgroundColor: '#2563eb',\n    paddingVertical: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n  nextButtonDisabled: {\n    backgroundColor: '#cbd5e1',\n  },\n  nextButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#ffffff',\n  },\n  nextButtonTextDisabled: {\n    color: '#64748b',\n  },\n});","size_bytes":5140},"src/components/booking/VehiclePassengerStep.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, ScrollView, Modal } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { VehicleType } from '@/types';\n\ninterface VehiclePassengerStepProps {\n  passengers: number;\n  vehicleType: VehicleType;\n  onPassengersChange: (count: number) => void;\n  onVehicleTypeChange: (type: VehicleType) => void;\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport const VehiclePassengerStep: React.FC<VehiclePassengerStepProps> = ({\n  passengers,\n  vehicleType,\n  onPassengersChange,\n  onVehicleTypeChange,\n  onNext,\n  onBack,\n}) => {\n  const [showPassengerModal, setShowPassengerModal] = useState(false);\n\n  // Vehicle type options\n  const vehicleTypes = [\n    {\n      type: 'sedan' as VehicleType,\n      label: 'Sedan',\n      capacity: '4 passengers',\n      icon: 'directions-car',\n      iconType: 'MaterialIcons',\n      description: 'Comfortable for city rides',\n      features: ['AC', 'Music System', 'GPS'],\n    },\n    {\n      type: 'suv' as VehicleType,\n      label: 'SUV',\n      capacity: '6 passengers',\n      icon: 'airport-shuttle',\n      iconType: 'MaterialIcons',\n      description: 'Spacious for families',\n      features: ['AC', 'Extra Space', 'GPS'],\n    },\n    {\n      type: 'premium' as VehicleType,\n      label: 'Premium',\n      capacity: '4 passengers',\n      icon: 'local-taxi',\n      iconType: 'MaterialIcons',\n      description: 'Luxury experience',\n      features: ['AC', 'Leather Seats', 'Music System', 'GPS'],\n    },\n  ];\n\n  const handlePassengerSelect = (count: number) => {\n    onPassengersChange(count);\n    setShowPassengerModal(false);\n  };\n\n  const isFormValid = () => {\n    return passengers > 0 && vehicleType;\n  };\n\n  return (\n    <View style={styles.container}>\n      <ScrollView showsVerticalScrollIndicator={false}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Choose Your Vehicle</Text>\n          <Text style={styles.subtitle}>Select vehicle type and passenger count</Text>\n        </View>\n\n        {/* Passenger Selection */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Number of Passengers</Text>\n          <TouchableOpacity\n            style={styles.passengerButton}\n            onPress={() => setShowPassengerModal(true)}\n          >\n            <View style={styles.passengerContent}>\n              <MaterialIcons name=\"people\" size={24} color=\"#64748b\" />\n              <View style={styles.passengerInfo}>\n                <Text style={styles.passengerLabel}>Passengers</Text>\n                <Text style={styles.passengerValue}>\n                  {passengers} Guest{passengers !== 1 ? 's' : ''}\n                </Text>\n              </View>\n            </View>\n            <Text style={styles.passengerArrow}>›</Text>\n          </TouchableOpacity>\n        </View>\n\n        {/* Vehicle Type Selection */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Vehicle Type</Text>\n          <View style={styles.vehicleGrid}>\n            {vehicleTypes.map((vehicle) => (\n              <TouchableOpacity\n                key={vehicle.type}\n                style={[\n                  styles.vehicleCard,\n                  vehicleType === vehicle.type && styles.vehicleCardActive,\n                ]}\n                onPress={() => onVehicleTypeChange(vehicle.type)}\n              >\n                <View style={styles.vehicleHeader}>\n                  <View style={styles.vehicleIconContainer}>\n                    <MaterialIcons name={vehicle.icon as any} size={24} color=\"#64748b\" />\n                  </View>\n                  {vehicleType === vehicle.type && (\n                    <View style={styles.checkmark}>\n                      <MaterialIcons name=\"check\" size={16} color=\"#ffffff\" />\n                    </View>\n                  )}\n                </View>\n\n                <View style={styles.vehicleContent}>\n                  <Text style={[\n                    styles.vehicleName,\n                    vehicleType === vehicle.type && styles.vehicleNameActive,\n                  ]}>\n                    {vehicle.label}\n                  </Text>\n                  <Text style={[\n                    styles.vehicleCapacity,\n                    vehicleType === vehicle.type && styles.vehicleCapacityActive,\n                  ]}>\n                    {vehicle.capacity}\n                  </Text>\n                  <Text style={[\n                    styles.vehicleDescription,\n                    vehicleType === vehicle.type && styles.vehicleDescriptionActive,\n                  ]}>\n                    {vehicle.description}\n                  </Text>\n\n                  {/* Features */}\n                  <View style={styles.featuresContainer}>\n                    {vehicle.features.map((feature, index) => (\n                      <View key={index} style={styles.featureBadge}>\n                        <Text style={styles.featureText}>{feature}</Text>\n                      </View>\n                    ))}\n                  </View>\n                </View>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n\n        {/* Vehicle Comparison */}\n        {vehicleType && (\n          <View style={styles.comparisonSection}>\n            <Text style={styles.comparisonTitle}>Why Choose This Vehicle?</Text>\n            <View style={styles.comparisonCard}>\n              {vehicleTypes\n                .find(v => v.type === vehicleType)\n                ?.features.map((feature, index) => (\n                <View key={index} style={styles.comparisonItem}>\n                  <Text style={styles.comparisonBullet}>•</Text>\n                  <Text style={styles.comparisonText}>{feature}</Text>\n                </View>\n              ))}\n            </View>\n          </View>\n        )}\n      </ScrollView>\n\n      {/* Passenger Modal */}\n      <Modal visible={showPassengerModal} transparent animationType=\"slide\">\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <Text style={styles.modalTitle}>Select Passengers</Text>\n\n            <View style={styles.passengerGrid}>\n              {[1, 2, 3, 4, 5, 6].map((count) => (\n                <TouchableOpacity\n                  key={count}\n                  style={[\n                    styles.passengerOption,\n                    passengers === count && styles.passengerOptionActive,\n                  ]}\n                  onPress={() => handlePassengerSelect(count)}\n                >\n                  <Text style={[\n                    styles.passengerOptionText,\n                    passengers === count && styles.passengerOptionTextActive,\n                  ]}>\n                    {count}\n                  </Text>\n                  <Text style={[\n                    styles.passengerOptionLabel,\n                    passengers === count && styles.passengerOptionLabelActive,\n                  ]}>\n                    {count === 1 ? 'Guest' : 'Guests'}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n\n            <TouchableOpacity\n              style={styles.modalCancelButton}\n              onPress={() => setShowPassengerModal(false)}\n            >\n              <Text style={styles.modalCancelText}>Cancel</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Navigation */}\n      <View style={styles.footer}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={styles.backButton} onPress={onBack}>\n            <Text style={styles.backButtonText}>Back</Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={[styles.nextButton, !isFormValid() && styles.nextButtonDisabled]}\n            onPress={onNext}\n            disabled={!isFormValid()}\n          >\n            <Text style={[\n              styles.nextButtonText,\n              !isFormValid() && styles.nextButtonTextDisabled,\n            ]}>\n              Continue\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    padding: 16,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  section: {\n    paddingHorizontal: 16,\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 16,\n  },\n  passengerButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: '#ffffff',\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  passengerContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  passengerIcon: {\n    fontSize: 24,\n    marginRight: 12,\n  },\n  passengerInfo: {\n    flex: 1,\n  },\n  passengerLabel: {\n    fontSize: 14,\n    color: '#64748b',\n    marginBottom: 4,\n  },\n  passengerValue: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#1e293b',\n  },\n  passengerArrow: {\n    fontSize: 20,\n    color: '#64748b',\n  },\n  vehicleGrid: {\n    gap: 16,\n  },\n  vehicleCard: {\n    backgroundColor: '#ffffff',\n    borderRadius: 16,\n    padding: 20,\n    borderWidth: 2,\n    borderColor: '#e2e8f0',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.05,\n    shadowRadius: 8,\n    elevation: 2,\n  },\n  vehicleCardActive: {\n    borderColor: '#2563eb',\n    backgroundColor: '#eff6ff',\n  },\n  vehicleHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  vehicleIconContainer: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: '#f1f5f9',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  checkmark: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    backgroundColor: '#2563eb',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  vehicleContent: {\n    flex: 1,\n  },\n  vehicleName: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  vehicleNameActive: {\n    color: '#2563eb',\n  },\n  vehicleCapacity: {\n    fontSize: 14,\n    color: '#64748b',\n    marginBottom: 8,\n  },\n  vehicleCapacityActive: {\n    color: '#475569',\n  },\n  vehicleDescription: {\n    fontSize: 14,\n    color: '#64748b',\n    marginBottom: 12,\n  },\n  vehicleDescriptionActive: {\n    color: '#475569',\n  },\n  featuresContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  featureBadge: {\n    backgroundColor: '#f1f5f9',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  featureText: {\n    fontSize: 12,\n    color: '#475569',\n    fontWeight: '500',\n  },\n  comparisonSection: {\n    paddingHorizontal: 20,\n    marginBottom: 24,\n  },\n  comparisonTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 12,\n  },\n  comparisonCard: {\n    backgroundColor: '#ffffff',\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  comparisonItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  comparisonBullet: {\n    fontSize: 16,\n    color: '#2563eb',\n    marginRight: 8,\n  },\n  comparisonText: {\n    fontSize: 14,\n    color: '#475569',\n  },\n  modalOverlay: {\n    flex: 1,\n    justifyContent: 'flex-end',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  modalContent: {\n    backgroundColor: '#ffffff',\n    padding: 24,\n    borderTopLeftRadius: 16,\n    borderTopRightRadius: 16,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 20,\n    textAlign: 'center',\n  },\n  passengerGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n    marginBottom: 20,\n  },\n  passengerOption: {\n    width: 80,\n    height: 80,\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: '#e2e8f0',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  passengerOptionActive: {\n    borderColor: '#2563eb',\n    backgroundColor: '#eff6ff',\n  },\n  passengerOptionText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1e293b',\n  },\n  passengerOptionTextActive: {\n    color: '#2563eb',\n  },\n  passengerOptionLabel: {\n    fontSize: 12,\n    color: '#64748b',\n    marginTop: 4,\n  },\n  passengerOptionLabelActive: {\n    color: '#2563eb',\n  },\n  modalCancelButton: {\n    backgroundColor: '#e2e8f0',\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  modalCancelText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#475569',\n  },\n  footer: {\n    padding: 16,\n    paddingBottom: 32,\n    backgroundColor: '#ffffff',\n    borderTopWidth: 1,\n    borderTopColor: '#e2e8f0',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  backButton: {\n    flex: 1,\n    paddingVertical: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  backButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#475569',\n  },\n  nextButton: {\n    flex: 2,\n    backgroundColor: '#2563eb',\n    paddingVertical: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n  nextButtonDisabled: {\n    backgroundColor: '#cbd5e1',\n  },\n  nextButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#ffffff',\n  },\n  nextButtonTextDisabled: {\n    color: '#64748b',\n  },\n});","size_bytes":13636},"src/screens/auth/ForgotPasswordScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  StyleSheet,\n} from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\n// Import services and stores\nimport { AuthService } from '@/services/supabase/auth';\n\n// Import types\nimport { AuthStackParamList } from '@/types/navigation';\n\ntype ForgotPasswordScreenNavigationProp = StackNavigationProp<AuthStackParamList, 'ForgotPassword'>;\n\nexport default function ForgotPasswordScreen() {\n  const navigation = useNavigation<ForgotPasswordScreenNavigationProp>();\n\n  const [email, setEmail] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [emailSent, setEmailSent] = useState(false);\n\n  const handleResetPassword = async () => {\n    if (!email.trim()) {\n      Alert.alert('Error', 'Please enter your email address');\n      return;\n    }\n\n    if (!AuthService.isValidEmail(email)) {\n      Alert.alert('Error', 'Please enter a valid email address');\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const { error } = await AuthService.resetPassword(email.trim());\n\n      if (error) {\n        Alert.alert('Error', error.message || 'Failed to send reset email');\n      } else {\n        setEmailSent(true);\n        Alert.alert(\n          'Reset Email Sent',\n          'Please check your email for password reset instructions.',\n          [\n            {\n              text: 'OK',\n              onPress: () => navigation.navigate('Login'),\n            },\n          ]\n        );\n      }\n    } catch (error) {\n      console.error('Reset password error:', error);\n      Alert.alert('Error', 'An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleBackToLogin = () => {\n    navigation.navigate('Login');\n  };\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      style={styles.container}\n    >\n      <ScrollView\n        contentContainerStyle={{ flexGrow: 1 }}\n        keyboardShouldPersistTaps=\"handled\"\n        style={styles.scrollView}\n      >\n        <View style={styles.content}>\n          {/* Header */}\n          <View style={styles.header}>\n            <Text style={styles.title}>Reset Password</Text>\n            <Text style={styles.subtitle}>\n              Enter your email address and we'll send you a link to reset your password\n            </Text>\n          </View>\n\n          {/* Form */}\n          <View style={styles.form}>\n            {/* Email Input */}\n            <View style={styles.inputGroup}>\n              <Text style={styles.label}>Email Address</Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"Enter your email\"\n                value={email}\n                onChangeText={setEmail}\n                keyboardType=\"email-address\"\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                editable={!isLoading}\n              />\n            </View>\n\n            {/* Reset Button */}\n            <TouchableOpacity\n              onPress={handleResetPassword}\n              style={[styles.button, isLoading && styles.buttonDisabled]}\n              disabled={isLoading}\n            >\n              <Text style={styles.buttonText}>\n                {isLoading ? 'Sending...' : 'Send Reset Link'}\n              </Text>\n            </TouchableOpacity>\n          </View>\n\n          {/* Back to Login Link */}\n          <View style={styles.footer}>\n            <Text style={styles.footerText}>Remember your password? </Text>\n            <TouchableOpacity onPress={handleBackToLogin} disabled={isLoading}>\n              <Text style={styles.footerLink}>Sign In</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 24,\n    paddingVertical: 48,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 32,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n    lineHeight: 24,\n  },\n  form: {\n    marginBottom: 16,\n  },\n  inputGroup: {\n    marginBottom: 24,\n  },\n  label: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#374151',\n    marginBottom: 8,\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#d1d5db',\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n  },\n  button: {\n    backgroundColor: '#2563eb',\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n    marginTop: 8,\n  },\n  buttonDisabled: {\n    opacity: 0.5,\n  },\n  buttonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 32,\n  },\n  footerText: {\n    color: '#64748b',\n  },\n  footerLink: {\n    color: '#2563eb',\n    fontWeight: '600',\n  },\n});","size_bytes":5316},"src/screens/auth/LoginScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  StyleSheet,\n} from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\n// Import services and stores\nimport { AuthService } from '../../services/supabase/auth';\nimport { useAppStore } from '../../stores/appStore';\n\n// Import types\nimport { AuthStackParamList } from '@/types/navigation';\n\ntype LoginScreenNavigationProp = StackNavigationProp<AuthStackParamList, 'Login'>;\n\nexport default function LoginScreen() {\n  const navigation = useNavigation<LoginScreenNavigationProp>();\n  const { setLoading } = useAppStore();\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLogin = async () => {\n    if (!email.trim() || !password.trim()) {\n      Alert.alert('Error', 'Please fill in all fields');\n      return;\n    }\n\n    if (!AuthService.isValidEmail(email)) {\n      Alert.alert('Error', 'Please enter a valid email address');\n      return;\n    }\n\n    setIsLoading(true);\n    setLoading(true);\n\n    try {\n      const { data, error } = await AuthService.signIn(email.trim(), password);\n\n      if (error) {\n        Alert.alert('Login Failed', error.message || 'An error occurred during login');\n      } else {\n        // Navigation will be handled automatically by the auth state listener\n        console.log('Login successful');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      Alert.alert('Error', 'An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n      setLoading(false);\n    }\n  };\n\n  const handleForgotPassword = () => {\n    navigation.navigate('ForgotPassword');\n  };\n\n  const handleRegister = () => {\n    navigation.navigate('Register');\n  };\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      style={styles.container}\n    >\n      <ScrollView\n        contentContainerStyle={{ flexGrow: 1 }}\n        keyboardShouldPersistTaps=\"handled\"\n        style={styles.scrollView}\n      >\n        <View style={styles.content}>\n          {/* Header */}\n          <View style={styles.header}>\n            <Text style={styles.title}>Welcome Back</Text>\n            <Text style={styles.subtitle}>\n              Sign in to your SDM Cab Hailing account\n            </Text>\n          </View>\n\n          {/* Form */}\n          <View style={styles.form}>\n            {/* Email Input */}\n            <View style={styles.inputGroup}>\n              <Text style={styles.label}>Email Address</Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"Enter your email\"\n                value={email}\n                onChangeText={setEmail}\n                keyboardType=\"email-address\"\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                editable={!isLoading}\n                placeholderTextColor=\"#64748b\"\n              />\n            </View>\n\n            {/* Password Input */}\n            <View style={styles.inputGroup}>\n              <Text style={styles.label}>Password</Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"Enter your password\"\n                value={password}\n                onChangeText={setPassword}\n                secureTextEntry\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                editable={!isLoading}\n                placeholderTextColor=\"#64748b\"\n              />\n            </View>\n\n            {/* Forgot Password */}\n            <TouchableOpacity\n              onPress={handleForgotPassword}\n              style={styles.forgotPassword}\n              disabled={isLoading}\n            >\n              <Text style={styles.forgotPasswordText}>Forgot Password?</Text>\n            </TouchableOpacity>\n\n            {/* Login Button */}\n            <TouchableOpacity\n              onPress={handleLogin}\n              style={[styles.button, isLoading && styles.buttonDisabled]}\n              disabled={isLoading}\n            >\n              <Text style={styles.buttonText}>\n                {isLoading ? 'Signing In...' : 'Sign In'}\n              </Text>\n            </TouchableOpacity>\n          </View>\n\n          {/* Register Link */}\n          <View style={styles.footer}>\n            <Text style={styles.footerText}>Don't have an account? </Text>\n            <TouchableOpacity onPress={handleRegister} disabled={isLoading}>\n              <Text style={styles.footerLink}>Sign Up</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 24,\n    paddingVertical: 48,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 32,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  form: {\n    marginBottom: 16,\n  },\n  inputGroup: {\n    marginBottom: 16,\n  },\n  label: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#374151',\n    marginBottom: 8,\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#d1d5db',\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    backgroundColor: '#ffffff',\n  },\n  forgotPassword: {\n    alignSelf: 'flex-end',\n  },\n  forgotPasswordText: {\n    color: '#2563eb',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  button: {\n    backgroundColor: '#2563eb',\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n    marginTop: 24,\n  },\n  buttonDisabled: {\n    opacity: 0.5,\n  },\n  buttonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 32,\n  },\n  footerText: {\n    color: '#64748b',\n  },\n  footerLink: {\n    color: '#2563eb',\n    fontWeight: '600',\n  },\n});","size_bytes":6361},"src/screens/auth/RegisterScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  StyleSheet,\n} from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\n// Import services and stores\nimport { AuthService } from '../../services/supabase/auth';\nimport { useAppStore } from '../../stores/appStore';\n\n// Import types\nimport { AuthStackParamList } from '@/types/navigation';\n\ntype RegisterScreenNavigationProp = StackNavigationProp<AuthStackParamList, 'Register'>;\n\nexport default function RegisterScreen() {\n  const navigation = useNavigation<RegisterScreenNavigationProp>();\n  const { setLoading } = useAppStore();\n\n  const [formData, setFormData] = useState({\n    fullName: '',\n    email: '',\n    phone: '',\n    password: '',\n    confirmPassword: '',\n    role: 'customer' as 'customer' | 'driver',\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const updateFormData = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const validateForm = () => {\n    const { fullName, email, phone, password, confirmPassword } = formData;\n\n    if (!fullName.trim()) {\n      Alert.alert('Error', 'Please enter your full name');\n      return false;\n    }\n\n    if (!email.trim()) {\n      Alert.alert('Error', 'Please enter your email address');\n      return false;\n    }\n\n    if (!AuthService.isValidEmail(email)) {\n      Alert.alert('Error', 'Please enter a valid email address');\n      return false;\n    }\n\n    if (phone && !AuthService.isValidPhone(phone)) {\n      Alert.alert('Error', 'Please enter a valid phone number');\n      return false;\n    }\n\n    if (!password) {\n      Alert.alert('Error', 'Please enter a password');\n      return false;\n    }\n\n    if (!AuthService.isValidPassword(password)) {\n      Alert.alert('Error', 'Password must be at least 8 characters long');\n      return false;\n    }\n\n    if (password !== confirmPassword) {\n      Alert.alert('Error', 'Passwords do not match');\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleRegister = async () => {\n    if (!validateForm()) return;\n\n    setIsLoading(true);\n    setLoading(true);\n\n    try {\n      const { data, error } = await AuthService.signUp(\n        formData.email.trim(),\n        formData.password,\n        formData.fullName.trim(),\n        formData.phone.trim() || undefined,\n        formData.role\n      );\n\n      if (error) {\n        Alert.alert('Registration Failed', error.message || 'An error occurred during registration');\n      } else {\n        Alert.alert(\n          'Registration Successful',\n          'Please check your email to verify your account before signing in.',\n          [\n            {\n              text: 'OK',\n              onPress: () => navigation.navigate('Login'),\n            },\n          ]\n        );\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      Alert.alert('Error', 'An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n      setLoading(false);\n    }\n  };\n\n  const handleLogin = () => {\n    navigation.navigate('Login');\n  };\n\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      style={styles.container}\n    >\n      <ScrollView\n        contentContainerStyle={{ flexGrow: 1 }}\n        keyboardShouldPersistTaps=\"handled\"\n        style={styles.scrollView}\n      >\n        <View style={styles.content}>\n          {/* Header */}\n          <View style={styles.header}>\n            <Text style={styles.title}>Create Account</Text>\n            <Text style={styles.subtitle}>\n              Join SDM Cab Hailing as a customer or driver\n            </Text>\n          </View>\n\n          {/* Form */}\n          <View style={styles.form}>\n            {/* Role Selection */}\n            <View style={styles.inputGroup}>\n              <Text style={styles.label}>I am a:</Text>\n              <View style={styles.roleContainer}>\n                <TouchableOpacity\n                  onPress={() => updateFormData('role', 'customer')}\n                  style={[\n                    styles.roleButton,\n                    formData.role === 'customer' && styles.roleButtonActive,\n                  ]}\n                  disabled={isLoading}\n                >\n                  <Text\n                    style={[\n                      styles.roleButtonText,\n                      formData.role === 'customer' && styles.roleButtonTextActive,\n                    ]}\n                  >\n                    Customer\n                  </Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                  onPress={() => updateFormData('role', 'driver')}\n                  style={[\n                    styles.roleButton,\n                    formData.role === 'driver' && styles.roleButtonActiveDriver,\n                  ]}\n                  disabled={isLoading}\n                >\n                  <Text\n                    style={[\n                      styles.roleButtonText,\n                      formData.role === 'driver' && styles.roleButtonTextActiveDriver,\n                    ]}\n                  >\n                    Driver\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            {/* Full Name Input */}\n            <View style={styles.inputGroup}>\n              <Text style={styles.label}>Full Name</Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"Enter your full name\"\n                value={formData.fullName}\n                onChangeText={(value) => updateFormData('fullName', value)}\n                autoCapitalize=\"words\"\n                autoCorrect={false}\n                editable={!isLoading}\n              />\n            </View>\n\n            {/* Email Input */}\n            <View style={styles.inputGroup}>\n              <Text style={styles.label}>Email Address</Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"Enter your email\"\n                value={formData.email}\n                onChangeText={(value) => updateFormData('email', value)}\n                keyboardType=\"email-address\"\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                editable={!isLoading}\n              />\n            </View>\n\n            {/* Phone Input */}\n            <View style={styles.inputGroup}>\n              <Text style={styles.label}>Phone Number (Optional)</Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"Enter your phone number\"\n                value={formData.phone}\n                onChangeText={(value) => updateFormData('phone', value)}\n                keyboardType=\"phone-pad\"\n                autoCorrect={false}\n                editable={!isLoading}\n              />\n            </View>\n\n            {/* Password Input */}\n            <View style={styles.inputGroup}>\n              <Text style={styles.label}>Password</Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"Create a password\"\n                value={formData.password}\n                onChangeText={(value) => updateFormData('password', value)}\n                secureTextEntry\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                editable={!isLoading}\n              />\n            </View>\n\n            {/* Confirm Password Input */}\n            <View style={styles.inputGroup}>\n              <Text style={styles.label}>Confirm Password</Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"Confirm your password\"\n                value={formData.confirmPassword}\n                onChangeText={(value) => updateFormData('confirmPassword', value)}\n                secureTextEntry\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                editable={!isLoading}\n              />\n            </View>\n\n            {/* Register Button */}\n            <TouchableOpacity\n              onPress={handleRegister}\n              style={[styles.button, isLoading && styles.buttonDisabled]}\n              disabled={isLoading}\n            >\n              <Text style={styles.buttonText}>\n                {isLoading ? 'Creating Account...' : 'Create Account'}\n              </Text>\n            </TouchableOpacity>\n          </View>\n\n          {/* Login Link */}\n          <View style={styles.footer}>\n            <Text style={styles.footerText}>Already have an account? </Text>\n            <TouchableOpacity onPress={handleLogin} disabled={isLoading}>\n              <Text style={styles.footerLink}>Sign In</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 24,\n    paddingVertical: 48,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 32,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  form: {\n    marginBottom: 16,\n  },\n  inputGroup: {\n    marginBottom: 16,\n  },\n  label: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#374151',\n    marginBottom: 8,\n  },\n  roleContainer: {\n    flexDirection: 'row',\n    gap: 16,\n  },\n  roleButton: {\n    flex: 1,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#d1d5db',\n    alignItems: 'center',\n  },\n  roleButtonActive: {\n    borderColor: '#2563eb',\n    backgroundColor: '#eff6ff',\n  },\n  roleButtonActiveDriver: {\n    borderColor: '#16a34a',\n    backgroundColor: '#f0fdf4',\n  },\n  roleButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#374151',\n  },\n  roleButtonTextActive: {\n    color: '#2563eb',\n  },\n  roleButtonTextActiveDriver: {\n    color: '#16a34a',\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#d1d5db',\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n  },\n  button: {\n    backgroundColor: '#2563eb',\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n    marginTop: 24,\n  },\n  buttonDisabled: {\n    opacity: 0.5,\n  },\n  buttonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 32,\n  },\n  footerText: {\n    color: '#64748b',\n  },\n  footerLink: {\n    color: '#2563eb',\n    fontWeight: '600',\n  },\n});","size_bytes":10918},"src/screens/customer/BookRideScreen.tsx":{"content":"import React, { useCallback } from 'react';\nimport { ScrollView, Alert, StyleSheet } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\n// Import types and navigation\nimport { CustomerTabParamList } from '@/types/navigation';\n\n// Import components\nimport { BookingFlow } from '@/components/booking/BookingFlow';\n\ntype BookRideScreenNavigationProp = StackNavigationProp<CustomerTabParamList, 'BookRide'>;\n\nexport default function BookRideScreen() {\n  const navigation = useNavigation<BookRideScreenNavigationProp>();\n\n  const handleBookingComplete = useCallback((bookingData: any) => {\n    // Here you would typically send the booking data to your backend\n    console.log('Booking completed:', bookingData);\n\n    // For now, show success message and navigate back\n    Alert.alert(\n      'Booking Confirmed!',\n      'Your ride has been booked successfully. You will receive a confirmation shortly.',\n      [\n        {\n          text: 'OK',\n          onPress: () => navigation.navigate('Home')\n        }\n      ]\n    );\n  }, [navigation]);\n\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={{ flexGrow: 1 }}>\n      <BookingFlow onBookingComplete={handleBookingComplete} />\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fffbeb',\n  },\n});","size_bytes":1415},"src/screens/customer/HomeScreen.tsx":{"content":"import React from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  StyleSheet,\n} from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { MaterialIcons } from '@expo/vector-icons';\n\n// Import services and stores\nimport { AuthService } from '@/services/supabase/auth';\nimport { useAppStore, useUser } from '@/stores/appStore';\n\n// Import types\nimport { CustomerTabParamList } from '@/types/navigation';\n\ntype HomeScreenNavigationProp = StackNavigationProp<CustomerTabParamList, 'Home'>;\n\nexport default function HomeScreen() {\n  const navigation = useNavigation<HomeScreenNavigationProp>();\n  const user = useUser();\n  const { setLoading } = useAppStore();\n\n  const handleBookRide = () => {\n    navigation.navigate('BookRide');\n  };\n\n  const handleViewHistory = () => {\n    navigation.navigate('RideHistory');\n  };\n\n  const handleViewProfile = () => {\n    navigation.navigate('Profile');\n  };\n\n  const handleLogout = () => {\n    Alert.alert(\n      'Logout',\n      'Are you sure you want to logout?',\n      [\n        {\n          text: 'Cancel',\n          style: 'cancel',\n        },\n        {\n          text: 'Logout',\n          style: 'destructive',\n          onPress: async () => {\n            setLoading(true);\n            await AuthService.signOut();\n            setLoading(false);\n          },\n        },\n      ]\n    );\n  };\n\n  const quickActions = [\n    {\n      title: 'Book a Ride',\n      subtitle: 'Find and book your next ride',\n      icon: 'directions-car',\n      iconType: 'MaterialIcons',\n      onPress: handleBookRide,\n      color: '#f59e0b',\n    },\n    {\n      title: 'Ride History',\n      subtitle: 'View your past rides',\n      icon: 'history',\n      iconType: 'MaterialIcons',\n      onPress: handleViewHistory,\n      color: '#f59e0b',\n    },\n    {\n      title: 'My Profile',\n      subtitle: 'Manage your account',\n      icon: 'person',\n      iconType: 'MaterialIcons',\n      onPress: handleViewProfile,\n      color: '#f59e0b',\n    },\n    {\n      title: 'Support',\n      subtitle: 'Get help and support',\n      icon: 'help',\n      iconType: 'MaterialIcons',\n      onPress: () => navigation.navigate('Support'),\n      color: '#f59e0b',\n    },\n  ];\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* Welcome Header */}\n      <View style={styles.header}>\n        <Text style={styles.welcomeText}>Welcome back,</Text>\n        <Text style={styles.userName}>{user?.full_name || 'Customer'}</Text>\n        <Text style={styles.subtitle}>Ready for your next ride?</Text>\n      </View>\n\n      {/* Quick Actions */}\n      <View style={styles.actionsSection}>\n        <Text style={styles.sectionTitle}>Quick Actions</Text>\n        <View style={styles.actionsGrid}>\n          {quickActions.map((action, index) => (\n            <TouchableOpacity\n              key={index}\n              style={[styles.actionCard, { borderLeftColor: action.color }]}\n              onPress={action.onPress}\n            >\n              <View style={styles.actionIcon}>\n                <MaterialIcons name={action.icon as any} size={28} color=\"#f59e0b\" />\n              </View>\n              <Text style={styles.actionTitle}>{action.title}</Text>\n              <Text style={styles.actionSubtitle}>{action.subtitle}</Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n      </View>\n\n      {/* Recent Activity */}\n      <View style={styles.activitySection}>\n        <Text style={styles.sectionTitle}>Recent Activity</Text>\n        <View style={styles.activityCard}>\n          <Text style={styles.activityText}>\n            No recent rides. Book your first ride to get started!\n          </Text>\n        </View>\n      </View>\n\n      {/* Logout Button */}\n      <View style={styles.logoutSection}>\n        <TouchableOpacity\n          style={styles.logoutButton}\n          onPress={handleLogout}\n        >\n          <Text style={styles.logoutText}>Logout</Text>\n        </TouchableOpacity>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fffbeb',\n  },\n  header: {\n    backgroundColor: '#fef3c7',\n    marginHorizontal: 20,\n    marginTop: 20,\n    padding: 24,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: 'rgba(245, 158, 11, 0.2)',\n    shadowColor: '#f59e0b',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 12,\n    elevation: 8,\n  },\n  welcomeText: {\n    fontSize: 16,\n    color: '#92400e',\n    marginBottom: 8,\n  },\n  userName: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#78350f',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#92400e',\n  },\n  actionsSection: {\n    paddingHorizontal: 20,\n    marginTop: 24,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: '#78350f',\n    marginBottom: 16,\n  },\n  actionsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  actionCard: {\n    flex: 1,\n    minWidth: '45%',\n    backgroundColor: '#ffffff',\n    borderRadius: 16,\n    padding: 20,\n    borderLeftWidth: 4,\n    borderWidth: 1,\n    borderColor: 'rgba(245, 158, 11, 0.1)',\n    shadowColor: '#f59e0b',\n    shadowOffset: {\n      width: 0,\n      height: 6,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 10,\n    elevation: 8,\n  },\n  actionIcon: {\n    marginBottom: 12,\n  },\n  actionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#78350f',\n    marginBottom: 4,\n  },\n  actionSubtitle: {\n    fontSize: 12,\n    color: '#92400e',\n    lineHeight: 16,\n  },\n  activitySection: {\n    paddingHorizontal: 20,\n    marginTop: 24,\n  },\n  activityCard: {\n    backgroundColor: '#ffffff',\n    borderRadius: 12,\n    padding: 20,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 5,\n    alignItems: 'center',\n  },\n  activityText: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  logoutSection: {\n    paddingHorizontal: 20,\n    paddingBottom: 40,\n    marginTop: 24,\n  },\n  logoutButton: {\n    backgroundColor: '#ef4444',\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  logoutText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});","size_bytes":6563},"src/screens/customer/PaymentScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  ActivityIndicator,\n  StyleSheet,\n} from 'react-native';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { RazorpayService } from '../../services/payment/razorpay';\nimport { usePayment } from '../../hooks/usePayment';\n\ninterface RouteParams {\n  bookingId: string;\n  amount: number;\n  description: string;\n}\n\nexport default function PaymentScreen() {\n  const navigation = useNavigation();\n  const route = useRoute();\n  const { processPayment, isProcessing, formatAmount } = usePayment();\n\n  const { bookingId, amount, description } = route.params as RouteParams;\n\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('');\n\n  const paymentMethods = [\n    { id: 'card', name: 'Credit/Debit Card', icon: 'credit-card', iconType: 'MaterialIcons' },\n    { id: 'upi', name: 'UPI', icon: 'smartphone', iconType: 'MaterialIcons' },\n    { id: 'netbanking', name: 'Net Banking', icon: 'account-balance', iconType: 'MaterialIcons' },\n    { id: 'wallet', name: 'Wallet', icon: 'account-balance-wallet', iconType: 'MaterialIcons' },\n  ];\n\n  const handlePayment = async () => {\n    const result = await processPayment(bookingId, amount, description || 'Cab booking payment');\n\n    if (result.success) {\n      navigation.goBack();\n    }\n    // Error handling is done in the hook\n  };\n\n  const handleCancel = () => {\n    Alert.alert(\n      'Cancel Payment',\n      'Are you sure you want to cancel this payment?',\n      [\n        { text: 'No', style: 'cancel' },\n        {\n          text: 'Yes',\n          onPress: () => navigation.goBack(),\n        }\n      ]\n    );\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Payment</Text>\n        <Text style={styles.headerSubtitle}>Complete your booking payment</Text>\n      </View>\n\n      {/* Payment Summary */}\n      <View style={styles.card}>\n        <Text style={styles.cardTitle}>Payment Summary</Text>\n\n        <View>\n          <View style={styles.summaryRow}>\n            <Text style={styles.summaryLabel}>Booking ID</Text>\n            <Text style={styles.summaryValue}>{bookingId.slice(-8)}</Text>\n          </View>\n\n          <View style={styles.summaryRow}>\n            <Text style={styles.summaryLabel}>Description</Text>\n            <Text style={styles.summaryValue}>{description}</Text>\n          </View>\n\n          <View style={styles.summaryDivider}>\n            <View style={styles.summaryRow}>\n              <Text style={styles.totalLabel}>Total Amount</Text>\n              <Text style={styles.totalAmount}>\n                {formatAmount(amount)}\n              </Text>\n            </View>\n          </View>\n        </View>\n      </View>\n\n      {/* Payment Methods */}\n      <View style={styles.card}>\n        <Text style={styles.cardTitle}>Choose Payment Method</Text>\n\n        <View>\n          {paymentMethods.map((method) => (\n            <TouchableOpacity\n              key={method.id}\n              style={[\n                styles.paymentMethod,\n                selectedPaymentMethod === method.id && styles.paymentMethodSelected\n              ]}\n              onPress={() => setSelectedPaymentMethod(method.id)}\n            >\n              <View style={styles.paymentMethodIcon}>\n                <MaterialIcons name={method.icon as any} size={24} color=\"#64748b\" />\n              </View>\n              <Text style={[\n                styles.paymentMethodName,\n                selectedPaymentMethod === method.id && styles.paymentMethodNameSelected\n              ]}>\n                {method.name}\n              </Text>\n              {selectedPaymentMethod === method.id && (\n                <MaterialIcons name=\"check\" size={18} color=\"#2563eb\" />\n              )}\n            </TouchableOpacity>\n          ))}\n        </View>\n      </View>\n\n      {/* Payment Button */}\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity\n          style={[\n            styles.payButton,\n            selectedPaymentMethod && !isProcessing && styles.payButtonActive\n          ]}\n          onPress={handlePayment}\n          disabled={!selectedPaymentMethod || isProcessing}\n        >\n          {isProcessing ? (\n            <View style={styles.payButtonContent}>\n              <ActivityIndicator color=\"white\" size=\"small\" />\n              <Text style={[styles.payButtonText, styles.payButtonTextProcessing]}>Processing...</Text>\n            </View>\n          ) : (\n            <Text style={styles.payButtonText}>\n              Pay {formatAmount(amount)}\n            </Text>\n          )}\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.cancelButton}\n          onPress={handleCancel}\n          disabled={isProcessing}\n        >\n          <Text style={[\n            styles.cancelButtonText,\n            isProcessing && styles.cancelButtonTextDisabled\n          ]}>\n            Cancel Payment\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Security Note */}\n      <View style={styles.securityNote}>\n        <View style={styles.securityCard}>\n          <View style={styles.securityContent}>\n            <MaterialIcons name=\"security\" size={16} color=\"#1e40af\" />\n            <Text style={styles.securityText}>\n              Your payment is secured with 256-bit SSL encryption\n            </Text>\n          </View>\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    backgroundColor: '#ffffff',\n    paddingHorizontal: 20,\n    paddingVertical: 24,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e2e8f0',\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  headerSubtitle: {\n    fontSize: 16,\n    color: '#64748b',\n  },\n  card: {\n    backgroundColor: '#ffffff',\n    marginHorizontal: 20,\n    marginTop: 20,\n    padding: 20,\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  cardTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 16,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 12,\n  },\n  summaryLabel: {\n    fontSize: 16,\n    color: '#64748b',\n  },\n  summaryValue: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#1e293b',\n  },\n  summaryDivider: {\n    borderTopWidth: 1,\n    borderTopColor: '#e2e8f0',\n    paddingTop: 12,\n    marginTop: 12,\n  },\n  totalLabel: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n  },\n  totalAmount: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#16a34a',\n  },\n  paymentMethod: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 2,\n    borderColor: '#e2e8f0',\n    backgroundColor: '#ffffff',\n    marginBottom: 12,\n  },\n  paymentMethodSelected: {\n    borderColor: '#2563eb',\n    backgroundColor: '#eff6ff',\n  },\n  paymentMethodIcon: {\n    marginRight: 12,\n  },\n  paymentMethodName: {\n    flex: 1,\n    fontSize: 16,\n    color: '#475569',\n  },\n  paymentMethodNameSelected: {\n    fontWeight: '600',\n    color: '#1d4ed8',\n  },\n  paymentMethodCheck: {\n    fontSize: 18,\n    color: '#2563eb',\n  },\n  buttonContainer: {\n    paddingHorizontal: 20,\n    paddingBottom: 40,\n  },\n  payButton: {\n    paddingVertical: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n    marginTop: 32,\n    backgroundColor: '#cbd5e1',\n  },\n  payButtonActive: {\n    backgroundColor: '#2563eb',\n  },\n  payButtonContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  payButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  payButtonTextProcessing: {\n    marginLeft: 8,\n  },\n  cancelButton: {\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n    marginTop: 16,\n  },\n  cancelButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#475569',\n  },\n  cancelButtonTextDisabled: {\n    color: '#94a3b8',\n  },\n  securityNote: {\n    paddingHorizontal: 20,\n    paddingBottom: 20,\n  },\n  securityCard: {\n    backgroundColor: '#eff6ff',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#bfdbfe',\n  },\n  securityContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n  },\n  securityText: {\n    fontSize: 14,\n    color: '#1e40af',\n    textAlign: 'center',\n  },\n});","size_bytes":8717},"src/screens/customer/ProfileScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  TextInput,\n  StyleSheet,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\n\n// Import services and stores\nimport { AuthService } from '@/services/supabase/auth';\nimport { useAppStore, useUser } from '@/stores/appStore';\n\nexport default function ProfileScreen() {\n  const user = useUser();\n  const { setLoading } = useAppStore();\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedName, setEditedName] = useState(user?.full_name || '');\n  const [editedPhone, setEditedPhone] = useState(user?.phone || '');\n\n  const handleSaveProfile = async () => {\n    if (!editedName.trim()) {\n      Alert.alert('Error', 'Name cannot be empty');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const { error } = await AuthService.updateProfile(user!.id, {\n        full_name: editedName.trim(),\n        phone: editedPhone.trim() || undefined,\n      });\n\n      if (error) {\n        Alert.alert('Error', 'Failed to update profile');\n      } else {\n        Alert.alert('Success', 'Profile updated successfully');\n        setIsEditing(false);\n      }\n    } catch (error) {\n      Alert.alert('Error', 'An unexpected error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleLogout = () => {\n    Alert.alert(\n      'Logout',\n      'Are you sure you want to logout?',\n      [\n        {\n          text: 'Cancel',\n          style: 'cancel',\n        },\n        {\n          text: 'Logout',\n          style: 'destructive',\n          onPress: async () => {\n            setLoading(true);\n            await AuthService.signOut();\n            setLoading(false);\n          },\n        },\n      ]\n    );\n  };\n\n  const profileStats = [\n    {\n      label: 'Total Rides',\n      value: '12',\n      icon: 'directions-car',\n      iconType: 'MaterialIcons',\n    },\n    {\n      label: 'Rating',\n      value: '4.8',\n      icon: 'star',\n      iconType: 'MaterialIcons',\n    },\n    {\n      label: 'Member Since',\n      value: 'Jan 2024',\n      icon: 'calendar-today',\n      iconType: 'MaterialIcons',\n    },\n  ];\n\n  const menuItems = [\n    {\n      title: 'Payment Methods',\n      subtitle: 'Manage cards and UPI',\n      icon: 'credit-card',\n      iconType: 'MaterialIcons',\n      onPress: () => Alert.alert('Coming Soon', 'Payment methods feature coming soon'),\n    },\n    {\n      title: 'Saved Addresses',\n      subtitle: 'Manage favorite locations',\n      icon: 'location-on',\n      iconType: 'MaterialIcons',\n      onPress: () => Alert.alert('Coming Soon', 'Saved addresses feature coming soon'),\n    },\n    {\n      title: 'Notifications',\n      subtitle: 'Manage app notifications',\n      icon: 'notifications',\n      iconType: 'MaterialIcons',\n      onPress: () => Alert.alert('Coming Soon', 'Notifications settings coming soon'),\n    },\n    {\n      title: 'Help & Support',\n      subtitle: 'Get help and contact us',\n      icon: 'help',\n      iconType: 'MaterialIcons',\n      onPress: () => Alert.alert('Coming Soon', 'Help & support feature coming soon'),\n    },\n    {\n      title: 'Privacy Policy',\n      subtitle: 'Read our privacy policy',\n      icon: 'security',\n      iconType: 'MaterialIcons',\n      onPress: () => Alert.alert('Coming Soon', 'Privacy policy feature coming soon'),\n    },\n    {\n      title: 'Terms of Service',\n      subtitle: 'Read our terms and conditions',\n      icon: 'description',\n      iconType: 'MaterialIcons',\n      onPress: () => Alert.alert('Coming Soon', 'Terms of service feature coming soon'),\n    },\n  ];\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* Profile Header */}\n      <View style={styles.profileHeader}>\n        <View style={styles.profileHeaderContent}>\n          <View style={styles.avatar}>\n            <Text style={styles.avatarText}>\n              {user?.full_name?.charAt(0)?.toUpperCase() || 'U'}\n            </Text>\n          </View>\n          <View style={styles.profileInfo}>\n            {isEditing ? (\n              <TextInput\n                style={styles.nameInput}\n                value={editedName}\n                onChangeText={setEditedName}\n                placeholder=\"Enter your name\"\n                autoCapitalize=\"words\"\n                placeholderTextColor=\"#64748b\"\n              />\n            ) : (\n              <Text style={styles.nameText}>{user?.full_name || 'Customer'}</Text>\n            )}\n            <Text style={styles.emailText}>{user?.email}</Text>\n            {isEditing ? (\n              <TextInput\n                style={styles.phoneInput}\n                value={editedPhone}\n                onChangeText={setEditedPhone}\n                placeholder=\"Enter phone number\"\n                keyboardType=\"phone-pad\"\n                placeholderTextColor=\"#64748b\"\n              />\n            ) : (\n              <Text style={styles.phoneText}>\n                {user?.phone || 'No phone number'}\n              </Text>\n            )}\n          </View>\n          <TouchableOpacity\n            style={styles.editButton}\n            onPress={() => {\n              if (isEditing) {\n                handleSaveProfile();\n              } else {\n                setIsEditing(true);\n              }\n            }}\n          >\n            <Text style={styles.editButtonText}>\n              {isEditing ? 'Save' : 'Edit'}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Stats */}\n      <View style={styles.statsCard}>\n        <View style={styles.statsContainer}>\n          {profileStats.map((stat, index) => (\n            <View key={index} style={styles.statItem}>\n              <View style={styles.statIcon}>\n                <MaterialIcons name={stat.icon as any} size={28} color=\"#64748b\" />\n              </View>\n              <Text style={styles.statValue}>{stat.value}</Text>\n              <Text style={styles.statLabel}>{stat.label}</Text>\n            </View>\n          ))}\n        </View>\n      </View>\n\n      {/* Menu Items */}\n      <View style={styles.menuCard}>\n        {menuItems.map((item, index) => (\n          <TouchableOpacity\n            key={index}\n            style={styles.menuItem}\n            onPress={item.onPress}\n          >\n            <View style={styles.menuItemContent}>\n              <View style={styles.menuItemIcon}>\n                <MaterialIcons name={item.icon as any} size={24} color=\"#64748b\" />\n              </View>\n              <View style={styles.menuItemText}>\n                <Text style={styles.menuItemTitle}>{item.title}</Text>\n                <Text style={styles.menuItemSubtitle}>{item.subtitle}</Text>\n              </View>\n            </View>\n            <Text style={styles.menuItemArrow}>›</Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {/* Logout Button */}\n      <View style={styles.logoutContainer}>\n        <TouchableOpacity\n          style={styles.logoutButton}\n          onPress={handleLogout}\n        >\n          <Text style={styles.logoutButtonText}>Logout</Text>\n        </TouchableOpacity>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  profileHeader: {\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    marginHorizontal: 20,\n    marginTop: 20,\n    padding: 24,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 8,\n    },\n    shadowOpacity: 0.15,\n    shadowRadius: 16,\n    elevation: 8,\n  },\n  profileHeaderContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  avatar: {\n    width: 64,\n    height: 64,\n    backgroundColor: '#2563eb',\n    borderRadius: 32,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  avatarText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#ffffff',\n  },\n  profileInfo: {\n    flex: 1,\n  },\n  nameInput: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    marginBottom: 8,\n    backgroundColor: '#ffffff',\n  },\n  nameText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  emailText: {\n    fontSize: 14,\n    color: '#64748b',\n    marginBottom: 4,\n  },\n  phoneInput: {\n    fontSize: 14,\n    color: '#64748b',\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    backgroundColor: '#ffffff',\n  },\n  phoneText: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  editButton: {\n    backgroundColor: '#2563eb',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 8,\n    marginLeft: 8,\n  },\n  editButtonText: {\n    color: '#ffffff',\n    fontWeight: '500',\n    fontSize: 14,\n  },\n  statsCard: {\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    marginHorizontal: 20,\n    marginTop: 20,\n    padding: 20,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  statItem: {\n    alignItems: 'center',\n  },\n  statIcon: {\n    marginBottom: 8,\n  },\n  statValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  menuCard: {\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    marginHorizontal: 20,\n    marginTop: 20,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 8,\n    },\n    shadowOpacity: 0.15,\n    shadowRadius: 16,\n    elevation: 8,\n    overflow: 'hidden',\n  },\n  menuItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e2e8f0',\n  },\n  menuItemContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  menuItemIcon: {\n    marginRight: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  menuItemText: {\n    flex: 1,\n  },\n  menuItemTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#1e293b',\n    marginBottom: 2,\n  },\n  menuItemSubtitle: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  menuItemArrow: {\n    fontSize: 18,\n    color: '#64748b',\n  },\n  logoutContainer: {\n    paddingHorizontal: 20,\n    paddingVertical: 24,\n    paddingBottom: 40,\n  },\n  logoutButton: {\n    backgroundColor: '#dc2626',\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  logoutButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});","size_bytes":11144},"src/screens/customer/RideHistoryScreen.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  RefreshControl,\n  Alert,\n  StyleSheet,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\n\n// Import services and stores\nimport { supabase } from '../../services/supabase/client';\nimport { useUser } from '../../stores/appStore';\n\n// Import types\nimport { Booking } from '../../types';\n\nexport default function RideHistoryScreen() {\n  const user = useUser();\n  const [refreshing, setRefreshing] = useState(false);\n  const [rides, setRides] = useState<Booking[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const fetchRideHistory = async () => {\n    if (!user) return;\n\n    try {\n      const { data, error } = await supabase\n        .from('bookings')\n        .select(`\n          *,\n          driver:driver_id (\n            id,\n            full_name\n          )\n        `)\n        .eq('customer_id', user.id)\n        .eq('status', 'completed')\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Error fetching ride history:', error);\n        Alert.alert('Error', 'Failed to load ride history');\n      } else {\n        setRides(data || []);\n      }\n    } catch (error) {\n      console.error('Error fetching ride history:', error);\n      Alert.alert('Error', 'Failed to load ride history');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchRideHistory();\n  }, [user]);\n\n  const onRefresh = async () => {\n    setRefreshing(true);\n    await fetchRideHistory();\n    setRefreshing(false);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return '#16a34a';\n      case 'cancelled':\n        return '#dc2626';\n      case 'in_progress':\n        return '#ca8a04';\n      default:\n        return '#6b7280';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'Completed';\n      case 'cancelled':\n        return 'Cancelled';\n      case 'in_progress':\n        return 'In Progress';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  return (\n    <ScrollView\n      style={styles.container}\n      refreshControl={\n        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n      }\n    >\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Ride History</Text>\n        <Text style={styles.headerSubtitle}>\n          {rides.length} {rides.length === 1 ? 'ride' : 'rides'} completed\n        </Text>\n      </View>\n\n      {/* Ride List */}\n      {loading ? (\n        <View style={styles.loadingContainer}>\n          <Text style={styles.loadingText}>Loading ride history...</Text>\n        </View>\n      ) : rides.length > 0 ? (\n        <View style={styles.rideList}>\n          {rides.map((ride) => (\n            <TouchableOpacity key={ride.id} style={styles.rideCard}>\n              {/* Header */}\n              <View style={styles.rideHeader}>\n                <View style={styles.rideHeaderLeft}>\n                  <Text style={styles.rideDate}>\n                    {new Date(ride.created_at).toLocaleDateString()} • {new Date(ride.created_at).toLocaleTimeString()}\n                  </Text>\n                  <Text style={styles.rideService}>\n                    {ride.service_type} Service\n                  </Text>\n                </View>\n                <View\n                  style={[styles.statusBadge, { backgroundColor: getStatusColor(ride.status) }]}\n                >\n                  <Text style={styles.statusText}>\n                    {getStatusText(ride.status)}\n                  </Text>\n                </View>\n              </View>\n\n              {/* Route */}\n              <View style={styles.routeContainer}>\n                <View style={styles.routeStep}>\n                  <Text style={styles.routeDot}>●</Text>\n                  <Text style={styles.routeText}>\n                    {ride.pickup_location.address || 'Pickup Location'}\n                  </Text>\n                </View>\n                <View style={styles.routeLine} />\n                <View style={styles.routeStep}>\n                  <Text style={styles.routeDot}>●</Text>\n                  <Text style={styles.routeText}>\n                    {ride.drop_location?.address || 'Drop Location'}\n                  </Text>\n                </View>\n              </View>\n\n              {/* Details */}\n              <View style={styles.detailsCard}>\n                <View style={styles.detailRow}>\n                  <Text style={styles.detailLabel}>Vehicle:</Text>\n                  <Text style={styles.detailValue}>\n                    {ride.vehicle_type}\n                  </Text>\n                </View>\n                <View style={styles.detailRow}>\n                  <Text style={styles.detailLabel}>Driver:</Text>\n                  <Text style={styles.detailValue}>\n                    {(ride as any).driver?.full_name || 'Not assigned'}\n                  </Text>\n                </View>\n                <View style={styles.detailRow}>\n                  <Text style={styles.detailLabel}>Fare:</Text>\n                  <Text style={styles.detailValue}>\n                    ₹{ride.actual_fare || ride.estimated_fare}\n                  </Text>\n                </View>\n              </View>\n\n              {/* Actions */}\n              <View style={styles.actionsContainer}>\n                <TouchableOpacity\n                  style={[styles.actionButton, styles.actionButtonPrimary]}\n                  onPress={() => Alert.alert('View Details', 'Detailed ride information coming soon')}\n                >\n                  <Text style={styles.actionButtonText}>View Details</Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                  style={[styles.actionButton, styles.actionButtonSecondary]}\n                  onPress={() => Alert.alert('Book Again', 'Quick booking feature coming soon')}\n                >\n                  <Text style={[styles.actionButtonText, styles.actionButtonTextSecondary]}>Book Again</Text>\n                </TouchableOpacity>\n              </View>\n            </TouchableOpacity>\n          ))}\n        </View>\n      ) : (\n        <View style={styles.emptyContainer}>\n          <MaterialIcons name=\"directions-car\" size={60} color=\"#cbd5e1\" />\n          <Text style={styles.emptyTitle}>No rides yet</Text>\n          <Text style={styles.emptyText}>\n            Your completed rides will appear here\n          </Text>\n        </View>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    marginHorizontal: 20,\n    marginTop: 20,\n    padding: 24,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 8,\n    },\n    shadowOpacity: 0.15,\n    shadowRadius: 16,\n    elevation: 8,\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  headerSubtitle: {\n    fontSize: 16,\n    color: '#64748b',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: 80,\n  },\n  loadingText: {\n    color: '#64748b',\n  },\n  rideList: {\n    paddingHorizontal: 20,\n    marginTop: 20,\n  },\n  rideCard: {\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    padding: 16,\n    marginBottom: 16,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  rideHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 16,\n  },\n  rideHeaderLeft: {\n    flex: 1,\n  },\n  rideDate: {\n    fontSize: 14,\n    color: '#64748b',\n    marginBottom: 4,\n  },\n  rideService: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    textTransform: 'capitalize',\n  },\n  statusBadge: {\n    paddingHorizontal: 12,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: '#ffffff',\n  },\n  routeContainer: {\n    marginBottom: 16,\n  },\n  routeStep: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  routeDot: {\n    fontSize: 14,\n    color: '#2563eb',\n    marginRight: 12,\n    width: 16,\n    textAlign: 'center',\n  },\n  routeText: {\n    fontSize: 14,\n    color: '#1e293b',\n    flex: 1,\n  },\n  routeLine: {\n    height: 20,\n    width: 1,\n    backgroundColor: '#e2e8f0',\n    marginLeft: 7,\n    marginBottom: 8,\n  },\n  detailsCard: {\n    backgroundColor: '#f8fafc',\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 16,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  detailLabel: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  detailValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#1e293b',\n    textTransform: 'capitalize',\n  },\n  actionsContainer: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  actionButton: {\n    flex: 1,\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  actionButtonPrimary: {\n    backgroundColor: '#2563eb',\n  },\n  actionButtonSecondary: {\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n  },\n  actionButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#ffffff',\n  },\n  actionButtonTextSecondary: {\n    color: '#1e293b',\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 40,\n    paddingVertical: 80,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n    lineHeight: 24,\n  },\n});","size_bytes":10114},"src/screens/customer/SupportScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  StyleSheet,\n  Alert,\n  Linking,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nexport default function SupportScreen() {\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n\n  const supportCategories = [\n    {\n      id: 'booking',\n      title: 'Booking Issues',\n      description: 'Problems with booking rides',\n      icon: 'event-note',\n      iconType: 'MaterialIcons',\n      faqs: [\n        'How do I cancel a booking?',\n        'Can I modify my booking?',\n        'What if my driver is late?',\n        'How to change pickup location?',\n      ],\n    },\n    {\n      id: 'payment',\n      title: 'Payment & Billing',\n      description: 'Payment methods and billing questions',\n      icon: 'credit-card',\n      iconType: 'MaterialIcons',\n      faqs: [\n        'How do I add a payment method?',\n        'Can I get a refund?',\n        'Why was I charged extra?',\n        'How to update payment details?',\n      ],\n    },\n    {\n      id: 'account',\n      title: 'Account & Profile',\n      description: 'Account settings and profile management',\n      icon: 'person',\n      iconType: 'MaterialIcons',\n      faqs: [\n        'How to change my phone number?',\n        'Can I delete my account?',\n        'How to update my profile?',\n        'Forgot password recovery',\n      ],\n    },\n    {\n      id: 'safety',\n      title: 'Safety & Security',\n      description: 'Safety features and emergency contacts',\n      icon: 'security',\n      iconType: 'MaterialIcons',\n      faqs: [\n        'How to contact emergency services?',\n        'What if I feel unsafe?',\n        'How to report an incident?',\n        'Safety tips for riders',\n      ],\n    },\n    {\n      id: 'technical',\n      title: 'Technical Support',\n      description: 'App issues and technical problems',\n      icon: 'build',\n      iconType: 'MaterialIcons',\n      faqs: [\n        'App not loading properly',\n        'Location services not working',\n        'Payment failed in app',\n        'How to update the app',\n      ],\n    },\n  ];\n\n  const contactOptions = [\n    {\n      title: 'Call Support',\n      subtitle: 'Speak to our support team',\n      icon: 'phone',\n      iconType: 'MaterialIcons',\n      action: () => {\n        const phoneNumber = '+91-1800-XXX-XXXX';\n        Alert.alert(\n          'Call Support',\n          `Call ${phoneNumber}?`,\n          [\n            { text: 'Cancel', style: 'cancel' },\n            { text: 'Call', onPress: () => Linking.openURL(`tel:${phoneNumber}`) },\n          ]\n        );\n      },\n    },\n    {\n      title: 'Email Support',\n      subtitle: 'Send us an email',\n      icon: 'email',\n      iconType: 'MaterialIcons',\n      action: () => {\n        const email = 'support@sdmcabhailing.com';\n        const subject = 'Support Request';\n        const url = `mailto:${email}?subject=${encodeURIComponent(subject)}`;\n        Linking.openURL(url);\n      },\n    },\n    {\n      title: 'WhatsApp Support',\n      subtitle: 'Chat with us on WhatsApp',\n      icon: 'chat',\n      iconType: 'MaterialIcons',\n      action: () => {\n        const phoneNumber = '+91-9876543210';\n        const message = 'Hi, I need help with SDM Cab Hailing';\n        const url = `whatsapp://send?phone=${phoneNumber}&text=${encodeURIComponent(message)}`;\n        Linking.openURL(url).catch(() => {\n          Alert.alert('Error', 'WhatsApp is not installed on this device');\n        });\n      },\n    },\n    {\n      title: 'Live Chat',\n      subtitle: 'Chat with our support bot',\n      icon: 'smart-toy',\n      iconType: 'MaterialIcons',\n      action: () => {\n        Alert.alert('Coming Soon', 'Live chat feature will be available soon!');\n      },\n    },\n  ];\n\n  const handleCategorySelect = (categoryId: string) => {\n    setSelectedCategory(selectedCategory === categoryId ? null : categoryId);\n  };\n\n  const handleFAQPress = (question: string) => {\n    Alert.alert('FAQ', `${question}\\n\\nThis is a placeholder answer. Full FAQ system coming soon!`);\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Help & Support</Text>\n        <Text style={styles.headerSubtitle}>\n          Get help with your SDM Cab Hailing experience\n        </Text>\n      </View>\n\n      {/* Support Categories */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Browse by Category</Text>\n        {supportCategories.map((category) => (\n          <View key={category.id}>\n            <TouchableOpacity\n              style={styles.categoryCard}\n              onPress={() => handleCategorySelect(category.id)}\n            >\n              <View style={styles.categoryHeader}>\n                <View style={styles.categoryIcon}>\n                  <MaterialIcons name={category.icon as any} size={24} color=\"#64748b\" />\n                </View>\n                <View style={styles.categoryInfo}>\n                  <Text style={styles.categoryTitle}>{category.title}</Text>\n                  <Text style={styles.categoryDescription}>\n                    {category.description}\n                  </Text>\n                </View>\n                <Text style={styles.categoryArrow}>\n                  {selectedCategory === category.id ? '▼' : '▶'}\n                </Text>\n              </View>\n            </TouchableOpacity>\n\n            {selectedCategory === category.id && (\n              <View style={styles.faqContainer}>\n                {category.faqs.map((faq, index) => (\n                  <TouchableOpacity\n                    key={index}\n                    style={styles.faqItem}\n                    onPress={() => handleFAQPress(faq)}\n                  >\n                    <Text style={styles.faqText}>{faq}</Text>\n                    <Text style={styles.faqArrow}>›</Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            )}\n          </View>\n        ))}\n      </View>\n\n      {/* Contact Options */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Contact Us</Text>\n        {contactOptions.map((option, index) => (\n          <TouchableOpacity\n            key={index}\n            style={styles.contactCard}\n            onPress={option.action}\n          >\n            <View style={styles.contactLeft}>\n              <View style={styles.contactIcon}>\n                <MaterialIcons name={option.icon as any} size={20} color=\"#64748b\" />\n              </View>\n              <View style={styles.contactInfo}>\n                <Text style={styles.contactTitle}>{option.title}</Text>\n                <Text style={styles.contactSubtitle}>{option.subtitle}</Text>\n              </View>\n            </View>\n            <Text style={styles.contactArrow}>›</Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {/* Emergency Contact */}\n      <View style={styles.emergencySection}>\n        <View style={styles.emergencyCard}>\n          <View style={styles.emergencyIcon}>\n            <MaterialIcons name=\"warning\" size={24} color=\"#dc2626\" />\n          </View>\n          <View style={styles.emergencyInfo}>\n            <Text style={styles.emergencyTitle}>Emergency</Text>\n            <Text style={styles.emergencyDescription}>\n              For immediate safety concerns, call emergency services\n            </Text>\n          </View>\n          <TouchableOpacity\n            style={styles.emergencyButton}\n            onPress={() => Linking.openURL('tel:112')}\n          >\n            <Text style={styles.emergencyButtonText}>Call 112</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    backgroundColor: '#ffffff',\n    paddingHorizontal: 20,\n    paddingVertical: 24,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e2e8f0',\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  headerSubtitle: {\n    fontSize: 16,\n    color: '#64748b',\n  },\n  section: {\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 16,\n  },\n  categoryCard: {\n    backgroundColor: '#ffffff',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 8,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  categoryHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  categoryIcon: {\n    marginRight: 16,\n    width: 32,\n    alignItems: 'center',\n  },\n  categoryInfo: {\n    flex: 1,\n  },\n  categoryTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  categoryDescription: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  categoryArrow: {\n    fontSize: 16,\n    color: '#cbd5e1',\n  },\n  faqContainer: {\n    backgroundColor: '#f8fafc',\n    borderRadius: 8,\n    marginTop: 8,\n    marginBottom: 16,\n    paddingHorizontal: 16,\n  },\n  faqItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e2e8f0',\n  },\n  faqText: {\n    fontSize: 14,\n    color: '#374151',\n    flex: 1,\n  },\n  faqArrow: {\n    fontSize: 16,\n    color: '#cbd5e1',\n  },\n  contactCard: {\n    backgroundColor: '#ffffff',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 8,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  contactLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  contactIcon: {\n    marginRight: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  contactInfo: {\n    flex: 1,\n  },\n  contactTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 2,\n  },\n  contactSubtitle: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  contactArrow: {\n    fontSize: 18,\n    color: '#cbd5e1',\n  },\n  emergencySection: {\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    paddingBottom: 40,\n  },\n  emergencyCard: {\n    backgroundColor: '#fef2f2',\n    borderRadius: 12,\n    padding: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#fecaca',\n  },\n  emergencyIcon: {\n    marginRight: 16,\n  },\n  emergencyInfo: {\n    flex: 1,\n  },\n  emergencyTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#dc2626',\n    marginBottom: 2,\n  },\n  emergencyDescription: {\n    fontSize: 14,\n    color: '#dc2626',\n    opacity: 0.8,\n  },\n  emergencyButton: {\n    backgroundColor: '#dc2626',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 8,\n  },\n  emergencyButtonText: {\n    color: '#ffffff',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n});","size_bytes":11125},"src/screens/driver/ActiveRideScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  StyleSheet,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nexport default function ActiveRideScreen() {\n  const [rideStatus, setRideStatus] = useState<'pickup' | 'in_progress' | 'completed'>('pickup');\n\n  // Mock active ride data\n  const activeRide = {\n    id: '1',\n    customerName: 'Rahul Sharma',\n    customerPhone: '+91-9876543210',\n    pickup: 'Connaught Place, New Delhi',\n    drop: 'Indira Gandhi Airport, New Delhi',\n    fare: 450,\n    distance: '18.5 km',\n    duration: '35 mins',\n    vehicleType: 'Sedan',\n  };\n\n  const handleArrivedAtPickup = () => {\n    setRideStatus('in_progress');\n    Alert.alert('Status Updated', 'You have arrived at the pickup location');\n  };\n\n  const handleStartRide = () => {\n    Alert.alert('Ride Started', 'The ride has begun. Navigate to drop location.');\n  };\n\n  const handleCompleteRide = () => {\n    Alert.alert(\n      'Complete Ride',\n      'Confirm ride completion?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Complete',\n          onPress: () => {\n            setRideStatus('completed');\n            Alert.alert('Ride Completed', 'Payment will be processed shortly');\n          },\n        },\n      ]\n    );\n  };\n\n  const handleCallCustomer = () => {\n    Alert.alert('Call Customer', `Call ${activeRide.customerPhone}?`);\n  };\n\n  const handleEmergency = () => {\n    Alert.alert('Emergency', 'Call emergency services?', [\n      { text: 'Cancel', style: 'cancel' },\n      { text: 'Call 112', onPress: () => Alert.alert('Calling 112...') },\n    ]);\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* Ride Status */}\n      <View style={styles.card}>\n        <Text style={styles.statusTitle}>Ride Status</Text>\n        <View style={styles.statusContainer}>\n          <View style={styles.statusStep}>\n            <View style={[\n              styles.statusDot,\n              rideStatus === 'pickup' ? styles.statusDotActive : styles.statusDotInactive\n            ]} />\n            <Text style={styles.statusText}>Pickup</Text>\n          </View>\n          <View style={styles.statusLine} />\n          <View style={styles.statusStep}>\n            <View style={[\n              styles.statusDot,\n              rideStatus === 'in_progress' ? styles.statusDotActive : styles.statusDotInactive\n            ]} />\n            <Text style={styles.statusText}>In Progress</Text>\n          </View>\n          <View style={styles.statusLine} />\n          <View style={styles.statusStep}>\n            <View style={[\n              styles.statusDot,\n              rideStatus === 'completed' ? styles.statusDotActive : styles.statusDotInactive\n            ]} />\n            <Text style={styles.statusText}>Completed</Text>\n          </View>\n        </View>\n      </View>\n\n      {/* Customer Info */}\n      <View style={styles.card}>\n        <Text style={styles.cardTitle}>Customer Details</Text>\n        <View style={{ marginBottom: 16 }}>\n          <Text style={styles.customerName}>{activeRide.customerName}</Text>\n          <Text style={styles.customerPhone}>{activeRide.customerPhone}</Text>\n        </View>\n        <TouchableOpacity\n          style={styles.callButton}\n          onPress={handleCallCustomer}\n        >\n          <View style={styles.callButtonContent}>\n            <MaterialIcons name=\"phone\" size={16} color=\"#ffffff\" />\n            <Text style={styles.callButtonText}>Call Customer</Text>\n          </View>\n        </TouchableOpacity>\n      </View>\n\n      {/* Ride Details */}\n      <View style={styles.card}>\n        <Text style={styles.cardTitle}>Ride Details</Text>\n\n        <View style={styles.rideDetails}>\n          <View style={styles.routeContainer}>\n            <View style={styles.routeStep}>\n              <Text style={styles.routeDot}>●</Text>\n              <Text style={styles.routeText}>{activeRide.pickup}</Text>\n            </View>\n            <View style={styles.routeLine} />\n            <View style={styles.routeStep}>\n              <Text style={styles.routeDot}>●</Text>\n              <Text style={styles.routeText}>{activeRide.drop}</Text>\n            </View>\n          </View>\n\n          <View style={styles.detailsCard}>\n            <View style={styles.detailRow}>\n              <Text style={styles.detailLabel}>Distance:</Text>\n              <Text style={styles.detailValue}>{activeRide.distance}</Text>\n            </View>\n            <View style={styles.detailRow}>\n              <Text style={styles.detailLabel}>Duration:</Text>\n              <Text style={styles.detailValue}>{activeRide.duration}</Text>\n            </View>\n            <View style={styles.detailRow}>\n              <Text style={styles.detailLabel}>Vehicle:</Text>\n              <Text style={styles.detailValue}>{activeRide.vehicleType}</Text>\n            </View>\n            <View style={styles.detailRow}>\n              <Text style={styles.detailLabel}>Fare:</Text>\n              <Text style={styles.detailValue}>₹{activeRide.fare}</Text>\n            </View>\n          </View>\n        </View>\n      </View>\n\n      {/* Action Buttons */}\n      <View style={styles.actionContainer}>\n        {rideStatus === 'pickup' && (\n          <TouchableOpacity\n            style={[styles.actionButton, styles.actionButtonPrimary]}\n            onPress={handleArrivedAtPickup}\n          >\n            <Text style={styles.actionButtonText}>Arrived at Pickup</Text>\n          </TouchableOpacity>\n        )}\n\n        {rideStatus === 'in_progress' && (\n          <TouchableOpacity\n            style={[styles.actionButton, styles.actionButtonPrimary]}\n            onPress={handleStartRide}\n          >\n            <Text style={styles.actionButtonText}>Start Ride</Text>\n          </TouchableOpacity>\n        )}\n\n        {rideStatus === 'in_progress' && (\n          <TouchableOpacity\n            style={[styles.actionButton, styles.actionButtonSuccess]}\n            onPress={handleCompleteRide}\n          >\n            <Text style={styles.actionButtonText}>Complete Ride</Text>\n          </TouchableOpacity>\n        )}\n\n        {rideStatus === 'completed' && (\n          <View style={styles.completedCard}>\n            <View style={styles.completedTitleContainer}>\n              <MaterialIcons name=\"check-circle\" size={20} color=\"#166534\" />\n              <Text style={styles.completedTitle}>Ride Completed</Text>\n            </View>\n            <Text style={styles.completedText}>\n              Payment of ₹{activeRide.fare} will be credited to your account\n            </Text>\n          </View>\n        )}\n      </View>\n\n      {/* Emergency Button */}\n      <View style={styles.emergencyContainer}>\n        <TouchableOpacity\n          style={styles.emergencyButton}\n          onPress={handleEmergency}\n        >\n          <View style={styles.emergencyButtonContent}>\n            <MaterialIcons name=\"warning\" size={18} color=\"#ffffff\" />\n            <Text style={styles.emergencyButtonText}>Emergency</Text>\n          </View>\n        </TouchableOpacity>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  card: {\n    backgroundColor: '#ffffff',\n    marginHorizontal: 20,\n    marginTop: 20,\n    padding: 20,\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  cardTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 20,\n  },\n  statusContainer: {\n    alignItems: 'center',\n  },\n  statusTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 20,\n  },\n  statusStep: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  statusDot: {\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n    marginRight: 8,\n  },\n  statusDotActive: {\n    backgroundColor: '#2563eb',\n  },\n  statusDotInactive: {\n    backgroundColor: '#cbd5e1',\n  },\n  statusText: {\n    fontSize: 14,\n    color: '#475569',\n  },\n  statusLine: {\n    width: 1,\n    height: 20,\n    backgroundColor: '#e2e8f0',\n    marginVertical: 4,\n  },\n  customerName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  customerPhone: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  callButton: {\n    backgroundColor: '#2563eb',\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  callButtonContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  callButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#ffffff',\n  },\n  rideDetails: {\n    marginBottom: 20,\n  },\n  routeContainer: {\n    marginBottom: 20,\n  },\n  routeStep: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  routeDot: {\n    fontSize: 14,\n    color: '#2563eb',\n    marginRight: 12,\n    width: 16,\n    textAlign: 'center',\n  },\n  routeText: {\n    fontSize: 14,\n    color: '#475569',\n    flex: 1,\n  },\n  routeLine: {\n    height: 20,\n    width: 1,\n    backgroundColor: '#e2e8f0',\n    marginLeft: 7,\n    marginBottom: 8,\n  },\n  detailsCard: {\n    backgroundColor: '#f8fafc',\n    borderRadius: 8,\n    padding: 16,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 12,\n  },\n  detailLabel: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  detailValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#1e293b',\n  },\n  actionContainer: {\n    paddingHorizontal: 20,\n    marginBottom: 20,\n  },\n  actionButton: {\n    paddingVertical: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  actionButtonPrimary: {\n    backgroundColor: '#2563eb',\n  },\n  actionButtonSuccess: {\n    backgroundColor: '#16a34a',\n  },\n  actionButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#ffffff',\n  },\n  completedCard: {\n    backgroundColor: '#f0fdf4',\n    padding: 20,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#bbf7d0',\n  },\n  completedTitleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  completedTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#166534',\n  },\n  completedText: {\n    fontSize: 14,\n    color: '#166534',\n    textAlign: 'center',\n  },\n  emergencyContainer: {\n    paddingHorizontal: 20,\n    paddingBottom: 40,\n  },\n  emergencyButton: {\n    backgroundColor: '#dc2626',\n    paddingVertical: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  emergencyButtonContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  emergencyButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#ffffff',\n  },\n});","size_bytes":10823},"src/screens/driver/AvailableRidesScreen.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  RefreshControl,\n  StyleSheet,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nexport default function AvailableRidesScreen() {\n  const [refreshing, setRefreshing] = useState(false);\n  const [availableRides, setAvailableRides] = useState<any[]>([]);\n\n  // Mock data for available rides\n  const mockRides = [\n    {\n      id: '1',\n      pickup: 'Connaught Place',\n      drop: 'Indira Gandhi Airport',\n      distance: '18.5 km',\n      duration: '35 mins',\n      fare: 450,\n      customerRating: 4.8,\n      customerName: 'Rahul S.',\n      requestedAt: '2 mins ago',\n      serviceType: 'Airport Transfer',\n    },\n    {\n      id: '2',\n      pickup: 'Karol Bagh',\n      drop: 'Lajpat Nagar',\n      distance: '8.2 km',\n      duration: '22 mins',\n      fare: 180,\n      customerRating: 4.6,\n      customerName: 'Priya M.',\n      requestedAt: '5 mins ago',\n      serviceType: 'City Ride',\n    },\n    {\n      id: '3',\n      pickup: 'Delhi Railway Station',\n      drop: 'Red Fort',\n      distance: '6.8 km',\n      duration: '18 mins',\n      fare: 150,\n      customerRating: 4.9,\n      customerName: 'Amit K.',\n      requestedAt: '8 mins ago',\n      serviceType: 'City Ride',\n    },\n  ];\n\n  useEffect(() => {\n    setAvailableRides(mockRides);\n  }, []);\n\n  const onRefresh = () => {\n    setRefreshing(true);\n    // Simulate API call\n    setTimeout(() => {\n      setRefreshing(false);\n    }, 1000);\n  };\n\n  const handleAcceptRide = (ride: any) => {\n    Alert.alert(\n      'Accept Ride',\n      `Accept ride from ${ride.customerName}?\\n\\nPickup: ${ride.pickup}\\nDrop: ${ride.drop}\\nFare: ₹${ride.fare}`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Accept',\n          onPress: () => {\n            Alert.alert('Ride Accepted', 'Navigate to pickup location');\n            // Here you would update the ride status and navigate to active ride\n          },\n        },\n      ]\n    );\n  };\n\n  const handleRejectRide = (rideId: string) => {\n    setAvailableRides(prev => prev.filter(ride => ride.id !== rideId));\n  };\n\n  const getServiceTypeColor = (serviceType: string) => {\n    switch (serviceType) {\n      case 'Airport Transfer':\n        return '#2563eb';\n      case 'City Ride':\n        return '#16a34a';\n      case 'Outstation':\n        return '#ca8a04';\n      default:\n        return '#6b7280';\n    }\n  };\n\n  return (\n    <ScrollView\n      style={styles.container}\n      refreshControl={\n        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n      }\n    >\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Available Rides</Text>\n        <Text style={styles.headerSubtitle}>\n          {availableRides.length} ride{availableRides.length !== 1 ? 's' : ''} available\n        </Text>\n      </View>\n\n      {/* Rides List */}\n      {availableRides.length > 0 ? (\n        <View style={styles.ridesList}>\n          {availableRides.map((ride) => (\n            <View key={ride.id} style={styles.rideCard}>\n              {/* Header */}\n              <View style={styles.rideHeader}>\n                <View style={styles.rideHeaderLeft}>\n                  <Text style={styles.customerName}>{ride.customerName}</Text>\n                  <View style={styles.customerInfo}>\n                    <View style={styles.customerRatingContainer}>\n                      <MaterialIcons name=\"star\" size={14} color=\"#f59e0b\" />\n                      <Text style={styles.customerRating}>{ride.customerRating}</Text>\n                    </View>\n                    <Text style={styles.requestedTime}>{ride.requestedAt}</Text>\n                  </View>\n                </View>\n                <View\n                  style={[styles.serviceTypeBadge, { backgroundColor: getServiceTypeColor(ride.serviceType) }]}\n                >\n                  <Text style={styles.serviceTypeText}>{ride.serviceType}</Text>\n                </View>\n              </View>\n\n              {/* Route */}\n              <View style={styles.routeContainer}>\n                <View style={styles.routeStep}>\n                  <Text style={styles.routeDot}>●</Text>\n                  <Text style={styles.routeText}>{ride.pickup}</Text>\n                </View>\n                <View style={styles.routeLine} />\n                <View style={styles.routeStep}>\n                  <Text style={styles.routeDot}>●</Text>\n                  <Text style={styles.routeText}>{ride.drop}</Text>\n                </View>\n              </View>\n\n              {/* Ride Details */}\n              <View style={styles.rideDetails}>\n                <View style={styles.detailRow}>\n                  <Text style={styles.detailLabel}>Distance:</Text>\n                  <Text style={styles.detailValue}>{ride.distance}</Text>\n                </View>\n                <View style={styles.detailRow}>\n                  <Text style={styles.detailLabel}>Duration:</Text>\n                  <Text style={styles.detailValue}>{ride.duration}</Text>\n                </View>\n                <View style={styles.detailRow}>\n                  <Text style={styles.detailLabel}>Fare:</Text>\n                  <Text style={styles.detailValue}>₹{ride.fare}</Text>\n                </View>\n              </View>\n\n              {/* Actions */}\n              <View style={styles.actionsContainer}>\n                <TouchableOpacity\n                  style={[styles.actionButton, styles.actionButtonSkip]}\n                  onPress={() => handleRejectRide(ride.id)}\n                >\n                  <Text style={styles.actionButtonText}>Skip</Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                  style={[styles.actionButton, styles.actionButtonAccept]}\n                  onPress={() => handleAcceptRide(ride)}\n                >\n                  <Text style={[styles.actionButtonText, styles.actionButtonTextAccept]}>Accept Ride</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          ))}\n        </View>\n      ) : (\n        <View style={styles.emptyContainer}>\n          <MaterialIcons name=\"directions-car\" size={60} color=\"#cbd5e1\" />\n          <Text style={styles.emptyTitle}>No rides available</Text>\n          <Text style={styles.emptyText}>\n            New ride requests will appear here when available\n          </Text>\n          <TouchableOpacity\n            style={styles.refreshButton}\n            onPress={onRefresh}\n          >\n            <Text style={styles.refreshButtonText}>Refresh</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    backgroundColor: '#ffffff',\n    paddingHorizontal: 20,\n    paddingVertical: 24,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e2e8f0',\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  headerSubtitle: {\n    fontSize: 16,\n    color: '#64748b',\n  },\n  ridesList: {\n    padding: 20,\n  },\n  rideCard: {\n    backgroundColor: '#ffffff',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  rideHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 16,\n  },\n  rideHeaderLeft: {\n    flex: 1,\n  },\n  customerName: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  customerInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n  },\n  customerRatingContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  customerRating: {\n    fontSize: 14,\n    color: '#f59e0b',\n    fontWeight: '500',\n  },\n  requestedTime: {\n    fontSize: 12,\n    color: '#64748b',\n  },\n  serviceTypeBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  serviceTypeText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: '#ffffff',\n  },\n  routeContainer: {\n    marginBottom: 16,\n  },\n  routeStep: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  routeDot: {\n    fontSize: 14,\n    color: '#2563eb',\n    marginRight: 12,\n    width: 16,\n    textAlign: 'center',\n  },\n  routeText: {\n    fontSize: 14,\n    color: '#475569',\n    flex: 1,\n  },\n  routeLine: {\n    height: 20,\n    width: 1,\n    backgroundColor: '#e2e8f0',\n    marginLeft: 7,\n    marginBottom: 8,\n  },\n  rideDetails: {\n    backgroundColor: '#f8fafc',\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 16,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  detailLabel: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  detailValue: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#1e293b',\n  },\n  actionsContainer: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  actionButton: {\n    flex: 1,\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  actionButtonSkip: {\n    backgroundColor: '#ffffff',\n    borderWidth: 1,\n    borderColor: '#cbd5e1',\n  },\n  actionButtonAccept: {\n    flex: 2,\n    backgroundColor: '#16a34a',\n  },\n  actionButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#475569',\n  },\n  actionButtonTextAccept: {\n    color: '#ffffff',\n    fontWeight: '600',\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 40,\n    paddingVertical: 80,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n    lineHeight: 24,\n    marginBottom: 24,\n  },\n  refreshButton: {\n    backgroundColor: '#2563eb',\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  refreshButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#ffffff',\n  },\n});","size_bytes":10191},"src/screens/driver/DriverHomeScreen.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Switch,\n  StyleSheet,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\n\n// Import services and stores\nimport { useAppStore, useUser } from '@/stores/appStore';\n\nexport default function DriverHomeScreen() {\n  const user = useUser();\n  const [isOnline, setIsOnline] = useState(false);\n  const [currentRide, setCurrentRide] = useState<any>(null); // Will be typed properly later\n\n  const stats = {\n    todayEarnings: 1250,\n    todayRides: 8,\n    rating: 4.7,\n    totalRides: 1247,\n  };\n\n  const toggleOnlineStatus = () => {\n    if (!isOnline) {\n      Alert.alert(\n        'Go Online',\n        'Are you ready to accept ride requests?',\n        [\n          { text: 'Cancel', style: 'cancel' },\n          {\n            text: 'Go Online',\n            onPress: () => setIsOnline(true),\n          },\n        ]\n      );\n    } else {\n      setIsOnline(false);\n    }\n  };\n\n  const handleAcceptRide = () => {\n    Alert.alert('Ride Accepted', 'You have accepted the ride request. Navigate to pickup location.');\n  };\n\n  const handleRejectRide = () => {\n    Alert.alert('Ride Rejected', 'You have rejected the ride request.');\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* Online Status */}\n      <View style={styles.statusCard}>\n        <View style={styles.statusHeader}>\n          <Text style={styles.statusTitle}>Driver Status</Text>\n          <Switch\n            value={isOnline}\n            onValueChange={toggleOnlineStatus}\n            trackColor={{ false: '#cbd5e1', true: '#2563eb' }}\n            thumbColor={isOnline ? '#ffffff' : '#f1f5f9'}\n          />\n        </View>\n        <Text style={[styles.statusText, isOnline ? styles.onlineText : styles.offlineText]}>\n          {isOnline ? 'Online - Accepting rides' : 'Offline - Not accepting rides'}\n        </Text>\n      </View>\n\n      {/* Current Ride */}\n      {currentRide && (\n        <View style={styles.rideCard}>\n          <Text style={styles.rideTitle}>Current Ride</Text>\n          <View style={styles.rideDetails}>\n            <Text style={styles.rideDetailText}>Pickup: {currentRide.pickup}</Text>\n            <Text style={styles.rideDetailText}>Drop: {currentRide.drop}</Text>\n            <Text style={styles.rideDetailText}>Fare: ₹{currentRide.fare}</Text>\n          </View>\n          <View style={styles.rideActions}>\n            <TouchableOpacity style={styles.arrivedButton}>\n              <Text style={styles.arrivedButtonText}>Arrived at Pickup</Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.completeButton}>\n              <Text style={styles.completeButtonText}>Complete Ride</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      )}\n\n      {/* Available Ride Request */}\n      {isOnline && !currentRide && (\n        <View style={styles.requestCard}>\n          <View style={styles.requestTitleContainer}>\n            <MaterialIcons name=\"directions-car\" size={20} color=\"#1e293b\" />\n            <Text style={styles.requestTitle}>New Ride Request</Text>\n          </View>\n          <View style={styles.requestDetails}>\n            <Text style={styles.requestDetailText}>Distance: 2.5 km</Text>\n            <Text style={styles.requestDetailText}>Fare: ₹180</Text>\n            <Text style={styles.requestDetailText}>Pickup: Connaught Place</Text>\n            <Text style={styles.requestDetailText}>Drop: Karol Bagh</Text>\n          </View>\n          <View style={styles.requestActions}>\n            <TouchableOpacity\n              style={styles.rejectButton}\n              onPress={handleRejectRide}\n            >\n              <Text style={styles.rejectButtonText}>Reject</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              style={styles.acceptButton}\n              onPress={handleAcceptRide}\n            >\n              <Text style={styles.acceptButtonText}>Accept</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      )}\n\n      {/* Stats */}\n      <View style={styles.statsSection}>\n        <Text style={styles.statsTitle}>Today's Summary</Text>\n        <View style={styles.statsGrid}>\n          <View style={styles.statCard}>\n            <MaterialIcons name=\"attach-money\" size={28} color=\"#10b981\" />\n            <Text style={styles.statValue}>₹{stats.todayEarnings}</Text>\n            <Text style={styles.statLabel}>Earnings</Text>\n          </View>\n          <View style={styles.statCard}>\n            <MaterialIcons name=\"directions-car\" size={28} color=\"#2563eb\" />\n            <Text style={styles.statValue}>{stats.todayRides}</Text>\n            <Text style={styles.statLabel}>Rides</Text>\n          </View>\n          <View style={styles.statCard}>\n            <MaterialIcons name=\"star\" size={28} color=\"#f59e0b\" />\n            <Text style={styles.statValue}>{stats.rating}</Text>\n            <Text style={styles.statLabel}>Rating</Text>\n          </View>\n          <View style={styles.statCard}>\n            <MaterialIcons name=\"bar-chart\" size={28} color=\"#8b5cf6\" />\n            <Text style={styles.statValue}>{stats.totalRides}</Text>\n            <Text style={styles.statLabel}>Total</Text>\n          </View>\n        </View>\n      </View>\n\n      {/* Quick Actions */}\n      <View style={styles.actionsSection}>\n        <Text style={styles.actionsTitle}>Quick Actions</Text>\n        <View style={styles.actionsGrid}>\n          <TouchableOpacity style={styles.actionCard}>\n            <MaterialIcons name=\"my-location\" size={24} color=\"#64748b\" />\n            <Text style={styles.actionText}>Update Location</Text>\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.actionCard}>\n            <MaterialIcons name=\"phone\" size={24} color=\"#ef4444\" />\n            <Text style={styles.actionText}>Emergency</Text>\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.actionCard}>\n            <MaterialIcons name=\"settings\" size={24} color=\"#64748b\" />\n            <Text style={styles.actionText}>Settings</Text>\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.actionCard}>\n            <MaterialIcons name=\"analytics\" size={24} color=\"#64748b\" />\n            <Text style={styles.actionText}>Analytics</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  statusCard: {\n    backgroundColor: '#ffffff',\n    marginHorizontal: 20,\n    marginTop: 20,\n    padding: 20,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 8,\n    },\n    shadowOpacity: 0.15,\n    shadowRadius: 16,\n    elevation: 8,\n  },\n  statusHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  statusTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n  },\n  statusText: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  onlineText: {\n    color: '#10b981',\n  },\n  offlineText: {\n    color: '#ef4444',\n  },\n  rideCard: {\n    backgroundColor: '#ffffff',\n    marginHorizontal: 20,\n    marginVertical: 20,\n    padding: 20,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 8,\n    },\n    shadowOpacity: 0.15,\n    shadowRadius: 16,\n    elevation: 8,\n  },\n  rideTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 12,\n  },\n  rideDetails: {\n    marginBottom: 16,\n  },\n  rideDetailText: {\n    fontSize: 14,\n    color: '#64748b',\n    marginBottom: 4,\n  },\n  rideActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  arrivedButton: {\n    flex: 1,\n    backgroundColor: '#f59e0b',\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  arrivedButtonText: {\n    color: '#ffffff',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  completeButton: {\n    flex: 1,\n    backgroundColor: '#10b981',\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  completeButtonText: {\n    color: '#ffffff',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  requestCard: {\n    backgroundColor: '#ffffff',\n    marginHorizontal: 20,\n    marginVertical: 20,\n    padding: 20,\n    borderRadius: 16,\n    borderWidth: 2,\n    borderColor: '#2563eb',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 8,\n    },\n    shadowOpacity: 0.15,\n    shadowRadius: 16,\n    elevation: 8,\n  },\n  requestTitleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 12,\n  },\n  requestTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n  },\n  requestDetails: {\n    marginBottom: 16,\n  },\n  requestDetailText: {\n    fontSize: 14,\n    color: '#64748b',\n    marginBottom: 4,\n  },\n  requestActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  rejectButton: {\n    flex: 1,\n    backgroundColor: '#ef4444',\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  rejectButtonText: {\n    color: '#ffffff',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  acceptButton: {\n    flex: 1,\n    backgroundColor: '#10b981',\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  acceptButtonText: {\n    color: '#ffffff',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  statsSection: {\n    paddingHorizontal: 20,\n    marginBottom: 20,\n  },\n  statsTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 16,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  statCard: {\n    flex: 1,\n    minWidth: '45%',\n    backgroundColor: '#ffffff',\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 5,\n  },\n  statValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: '#64748b',\n  },\n  actionsSection: {\n    paddingHorizontal: 20,\n    paddingBottom: 40,\n  },\n  actionsTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 16,\n  },\n  actionsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  actionCard: {\n    flex: 1,\n    minWidth: '45%',\n    backgroundColor: '#ffffff',\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 5,\n  },\n  actionText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#64748b',\n  },\n});","size_bytes":11065},"src/screens/driver/DriverProfileScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  StyleSheet,\n  Alert,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\n\n// Import services and stores\nimport { AuthService } from '@/services/supabase/auth';\nimport { useAppStore, useUser } from '@/stores/appStore';\n\nexport default function DriverProfileScreen() {\n  const user = useUser();\n  const { setLoading } = useAppStore();\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedName, setEditedName] = useState(user?.full_name || '');\n  const [editedPhone, setEditedPhone] = useState(user?.phone || '');\n\n  const handleSaveProfile = async () => {\n    if (!editedName.trim()) {\n      Alert.alert('Error', 'Name cannot be empty');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const { error } = await AuthService.updateProfile(user!.id, {\n        full_name: editedName.trim(),\n        phone: editedPhone.trim() || undefined,\n      });\n\n      if (error) {\n        Alert.alert('Error', 'Failed to update profile');\n      } else {\n        Alert.alert('Success', 'Profile updated successfully');\n        setIsEditing(false);\n      }\n    } catch (error) {\n      Alert.alert('Error', 'An unexpected error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleLogout = () => {\n    Alert.alert(\n      'Logout',\n      'Are you sure you want to logout?',\n      [\n        {\n          text: 'Cancel',\n          style: 'cancel',\n        },\n        {\n          text: 'Logout',\n          style: 'destructive',\n          onPress: async () => {\n            setLoading(true);\n            await AuthService.signOut();\n            setLoading(false);\n          },\n        },\n      ]\n    );\n  };\n\n  // Mock driver stats\n  const driverStats = [\n    {\n      label: 'Total Rides',\n      value: '1,247',\n      icon: 'directions-car',\n      iconType: 'MaterialIcons',\n    },\n    {\n      label: 'Rating',\n      value: '4.7',\n      icon: 'star',\n      iconType: 'MaterialIcons',\n    },\n    {\n      label: 'Completion Rate',\n      value: '98%',\n      icon: 'check-circle',\n      iconType: 'MaterialIcons',\n    },\n    {\n      label: 'Member Since',\n      value: 'Jan 2024',\n      icon: 'calendar-today',\n      iconType: 'MaterialIcons',\n    },\n  ];\n\n  const menuItems = [\n    {\n      title: 'Vehicle Information',\n      subtitle: 'Manage your vehicle details',\n      icon: 'airport-shuttle',\n      iconType: 'MaterialIcons',\n      onPress: () => Alert.alert('Coming Soon', 'Vehicle management coming soon'),\n    },\n    {\n      title: 'Documents',\n      subtitle: 'License, insurance, permits',\n      icon: 'description',\n      iconType: 'MaterialIcons',\n      onPress: () => Alert.alert('Coming Soon', 'Document management coming soon'),\n    },\n    {\n      title: 'Bank Details',\n      subtitle: 'Update payment information',\n      icon: 'account-balance',\n      iconType: 'MaterialIcons',\n      onPress: () => Alert.alert('Coming Soon', 'Bank details coming soon'),\n    },\n    {\n      title: 'Notifications',\n      subtitle: 'Manage app notifications',\n      icon: 'notifications',\n      iconType: 'MaterialIcons',\n      onPress: () => Alert.alert('Coming Soon', 'Notifications settings coming soon'),\n    },\n    {\n      title: 'Support',\n      subtitle: 'Get help and contact us',\n      icon: 'help',\n      iconType: 'MaterialIcons',\n      onPress: () => Alert.alert('Coming Soon', 'Support coming soon'),\n    },\n    {\n      title: 'Settings',\n      subtitle: 'App preferences and privacy',\n      icon: 'settings',\n      iconType: 'MaterialIcons',\n      onPress: () => Alert.alert('Coming Soon', 'Settings coming soon'),\n    },\n  ];\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* Profile Header */}\n      <View style={styles.header}>\n        <View style={styles.avatarContainer}>\n          <Text style={styles.avatarText}>\n            {user?.full_name?.charAt(0)?.toUpperCase() || 'D'}\n          </Text>\n        </View>\n        <View style={styles.userInfo}>\n          {isEditing ? (\n            <TextInput\n              style={styles.nameInput}\n              value={editedName}\n              onChangeText={setEditedName}\n              placeholder=\"Enter your name\"\n              autoCapitalize=\"words\"\n              placeholderTextColor=\"#64748b\"\n            />\n          ) : (\n            <Text style={styles.userName}>{user?.full_name || 'Driver'}</Text>\n          )}\n          <Text style={styles.userEmail}>{user?.email}</Text>\n          {isEditing ? (\n            <TextInput\n              style={styles.phoneInput}\n              value={editedPhone}\n              onChangeText={setEditedPhone}\n              placeholder=\"Enter phone number\"\n              keyboardType=\"phone-pad\"\n              placeholderTextColor=\"#64748b\"\n            />\n          ) : (\n            <Text style={styles.userPhone}>\n              {user?.phone || 'No phone number'}\n            </Text>\n          )}\n        </View>\n        <TouchableOpacity\n          style={styles.editButton}\n          onPress={() => {\n            if (isEditing) {\n              handleSaveProfile();\n            } else {\n              setIsEditing(true);\n            }\n          }}\n        >\n          <Text style={styles.editButtonText}>\n            {isEditing ? 'Save' : 'Edit'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Driver Stats */}\n      <View style={styles.statsContainer}>\n        <View style={{ flexDirection: 'row', justifyContent: 'space-around' }}>\n          {driverStats.map((stat, index) => (\n            <View key={index} style={styles.statItem}>\n              <View style={styles.statIcon}>\n                <MaterialIcons name={stat.icon as any} size={24} color=\"#64748b\" />\n              </View>\n              <Text style={styles.statValue}>{stat.value}</Text>\n              <Text style={styles.statLabel}>{stat.label}</Text>\n            </View>\n          ))}\n        </View>\n      </View>\n\n      {/* Menu Items */}\n      <View style={styles.menuContainer}>\n        {menuItems.map((item, index) => (\n          <TouchableOpacity\n            key={index}\n            style={styles.menuItem}\n            onPress={item.onPress}\n          >\n            <View style={styles.menuItemLeft}>\n              <View style={styles.menuItemIcon}>\n                <MaterialIcons name={item.icon as any} size={20} color=\"#64748b\" />\n              </View>\n              <View style={styles.menuItemText}>\n                <Text style={styles.menuItemTitle}>{item.title}</Text>\n                <Text style={styles.menuItemSubtitle}>{item.subtitle}</Text>\n              </View>\n            </View>\n            <Text style={styles.menuItemArrow}>›</Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {/* Logout Button */}\n      <View style={styles.logoutContainer}>\n        <TouchableOpacity\n          style={styles.logoutButton}\n          onPress={handleLogout}\n        >\n          <Text style={styles.logoutButtonText}>Logout</Text>\n        </TouchableOpacity>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  header: {\n    backgroundColor: '#ffffff',\n    paddingHorizontal: 20,\n    paddingVertical: 24,\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderBottomWidth: 1,\n    borderBottomColor: '#e2e8f0',\n  },\n  avatarContainer: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: '#16a34a', // Green for drivers\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  avatarText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#ffffff',\n  },\n  userInfo: {\n    flex: 1,\n  },\n  userName: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  userEmail: {\n    fontSize: 14,\n    color: '#64748b',\n    marginBottom: 2,\n  },\n  userPhone: {\n    fontSize: 14,\n    color: '#64748b',\n  },\n  nameInput: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    borderWidth: 1,\n    borderColor: '#d1d5db',\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    marginBottom: 8,\n  },\n  phoneInput: {\n    fontSize: 14,\n    color: '#64748b',\n    borderWidth: 1,\n    borderColor: '#d1d5db',\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n  },\n  editButton: {\n    backgroundColor: '#16a34a',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 8,\n  },\n  editButtonText: {\n    color: '#ffffff',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  statsContainer: {\n    backgroundColor: '#ffffff',\n    margin: 20,\n    borderRadius: 12,\n    padding: 20,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  statItem: {\n    alignItems: 'center',\n  },\n  statIcon: {\n    marginBottom: 8,\n  },\n  statValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  menuContainer: {\n    backgroundColor: '#ffffff',\n    marginHorizontal: 20,\n    borderRadius: 12,\n    overflow: 'hidden',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  menuItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f1f5f9',\n  },\n  menuItemLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  menuItemIcon: {\n    marginRight: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  menuItemText: {\n    flex: 1,\n  },\n  menuItemTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#1e293b',\n    marginBottom: 2,\n  },\n  menuItemSubtitle: {\n    fontSize: 12,\n    color: '#64748b',\n  },\n  menuItemArrow: {\n    fontSize: 18,\n    color: '#cbd5e1',\n  },\n  logoutContainer: {\n    paddingHorizontal: 20,\n    paddingVertical: 24,\n    paddingBottom: 40,\n  },\n  logoutButton: {\n    backgroundColor: '#dc2626',\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n  },\n  logoutButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});","size_bytes":10460},"src/screens/driver/EarningsScreen.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  StyleSheet,\n} from 'react-native';\n\nexport default function EarningsScreen() {\n  const [selectedPeriod, setSelectedPeriod] = useState<'today' | 'week' | 'month'>('today');\n\n  // Mock earnings data\n  const earningsData = {\n    today: {\n      total: 1250,\n      rides: 8,\n      hours: 6.5,\n      average: 156,\n      breakdown: [\n        { time: '09:30', amount: 180, type: 'City Ride' },\n        { time: '11:15', amount: 220, type: 'Airport Transfer' },\n        { time: '13:45', amount: 150, type: 'City Ride' },\n        { time: '15:20', amount: 200, type: 'Outstation' },\n        { time: '17:00', amount: 180, type: 'City Ride' },\n        { time: '18:30', amount: 160, type: 'City Ride' },\n        { time: '20:15', amount: 190, type: 'Airport Transfer' },\n        { time: '21:45', amount: 170, type: 'City Ride' },\n      ],\n    },\n    week: {\n      total: 8750,\n      rides: 56,\n      hours: 42,\n      average: 156,\n    },\n    month: {\n      total: 35000,\n      rides: 224,\n      hours: 168,\n      average: 156,\n    },\n  };\n\n  const currentData = earningsData[selectedPeriod];\n\n  const handleWithdraw = () => {\n    Alert.alert(\n      'Withdraw Earnings',\n      `Withdraw ₹${currentData.total} to your bank account?`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Withdraw',\n          onPress: () => Alert.alert('Success', 'Withdrawal request submitted'),\n        },\n      ]\n    );\n  };\n\n  const getPeriodLabel = (period: string) => {\n    switch (period) {\n      case 'today':\n        return 'Today';\n      case 'week':\n        return 'This Week';\n      case 'month':\n        return 'This Month';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* Period Selector */}\n      <View style={styles.periodSelector}>\n        <View style={styles.periodSelectorRow}>\n          {(['today', 'week', 'month'] as const).map((period) => (\n            <TouchableOpacity\n              key={period}\n              style={[\n                styles.periodButton,\n                selectedPeriod === period && styles.periodButtonActive\n              ]}\n              onPress={() => setSelectedPeriod(period)}\n            >\n              <Text style={[\n                styles.periodButtonText,\n                selectedPeriod === period && styles.periodButtonTextActive\n              ]}>\n                {getPeriodLabel(period)}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n      </View>\n\n      {/* Earnings Summary */}\n      <View style={styles.earningsSummary}>\n        <Text style={styles.earningsLabel}>Total Earnings</Text>\n        <Text style={styles.earningsAmount}>₹{currentData.total.toLocaleString()}</Text>\n        <View style={styles.earningsStats}>\n          <View style={styles.statItem}>\n            <Text style={styles.statValue}>{currentData.rides}</Text>\n            <Text style={styles.statLabel}>Rides</Text>\n          </View>\n          <View style={styles.statItem}>\n            <Text style={styles.statValue}>{currentData.hours}h</Text>\n            <Text style={styles.statLabel}>Hours</Text>\n          </View>\n          <View style={styles.statItem}>\n            <Text style={styles.statValue}>₹{currentData.average}</Text>\n            <Text style={styles.statLabel}>Average</Text>\n          </View>\n        </View>\n      </View>\n\n      {/* Withdraw Button */}\n      <View style={styles.withdrawContainer}>\n        <TouchableOpacity\n          style={styles.withdrawButton}\n          onPress={handleWithdraw}\n        >\n          <Text style={styles.withdrawButtonText}>Withdraw Earnings</Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Today's Breakdown (only for today) */}\n      {selectedPeriod === 'today' && 'breakdown' in currentData && (\n        <View style={styles.ridesSection}>\n          <Text style={styles.sectionTitle}>Today's Rides</Text>\n          {currentData.breakdown.map((ride: any, index: number) => (\n            <View key={index} style={styles.rideCard}>\n              <View style={styles.rideInfo}>\n                <Text style={styles.rideTime}>{ride.time}</Text>\n                <Text style={styles.rideType}>{ride.type}</Text>\n              </View>\n              <Text style={styles.rideAmount}>₹{ride.amount}</Text>\n            </View>\n          ))}\n        </View>\n      )}\n\n      {/* Weekly/Monthly Summary */}\n      {selectedPeriod !== 'today' && (\n        <View style={styles.summarySection}>\n          <Text style={styles.sectionTitle}>Summary</Text>\n          <View style={styles.summaryRow}>\n            <View style={styles.summaryCard}>\n              <Text style={styles.summaryValue}>\n                ₹{(currentData.total / currentData.rides).toFixed(0)}\n              </Text>\n              <Text style={styles.summaryLabel}>Per Ride</Text>\n            </View>\n            <View style={styles.summaryCard}>\n              <Text style={styles.summaryValue}>\n                ₹{(currentData.total / currentData.hours).toFixed(0)}\n              </Text>\n              <Text style={styles.summaryLabel}>Per Hour</Text>\n            </View>\n            <View style={styles.summaryCard}>\n              <Text style={styles.summaryValue}>\n                {((currentData.hours / (selectedPeriod === 'week' ? 7 : 30)) * 24).toFixed(1)}h\n              </Text>\n              <Text style={styles.summaryLabel}>Daily Avg</Text>\n            </View>\n          </View>\n        </View>\n      )}\n\n      {/* Performance Insights */}\n      <View style={styles.insightsSection}>\n        <Text style={styles.sectionTitle}>Performance Insights</Text>\n        <View style={styles.insightsCard}>\n          <Text style={styles.insightsTitle}>💡 Tip</Text>\n          <Text style={styles.insightsText}>\n            You're earning {currentData.average >= 160 ? 'above' : 'below'} average.\n            {currentData.average >= 160\n              ? ' Keep up the great work!'\n              : ' Try accepting more rides during peak hours.'}\n          </Text>\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8fafc',\n  },\n  periodSelector: {\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    marginHorizontal: 20,\n    marginTop: 20,\n    padding: 4,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 8,\n    },\n    shadowOpacity: 0.15,\n    shadowRadius: 16,\n    elevation: 8,\n  },\n  periodSelectorRow: {\n    flexDirection: 'row',\n  },\n  periodButton: {\n    flex: 1,\n    paddingVertical: 12,\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n  periodButtonActive: {\n    backgroundColor: '#2563eb',\n  },\n  periodButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#64748b',\n  },\n  periodButtonTextActive: {\n    color: '#ffffff',\n  },\n  earningsSummary: {\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    marginHorizontal: 20,\n    marginVertical: 20,\n    padding: 24,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 8,\n    },\n    shadowOpacity: 0.15,\n    shadowRadius: 16,\n    elevation: 8,\n    alignItems: 'center',\n  },\n  earningsLabel: {\n    fontSize: 16,\n    color: '#64748b',\n    marginBottom: 8,\n  },\n  earningsAmount: {\n    fontSize: 36,\n    fontWeight: 'bold',\n    color: '#16a34a',\n    marginBottom: 20,\n  },\n  earningsStats: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    width: '100%',\n  },\n  statItem: {\n    alignItems: 'center',\n  },\n  statValue: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: '#64748b',\n  },\n  withdrawContainer: {\n    paddingHorizontal: 20,\n    marginBottom: 20,\n  },\n  withdrawButton: {\n    backgroundColor: '#16a34a',\n    paddingVertical: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  withdrawButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  ridesSection: {\n    paddingHorizontal: 20,\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 16,\n  },\n  rideCard: {\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    padding: 16,\n    marginBottom: 12,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  rideInfo: {\n    flex: 1,\n  },\n  rideTime: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  rideType: {\n    fontSize: 12,\n    color: '#64748b',\n  },\n  rideAmount: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#16a34a',\n  },\n  summarySection: {\n    paddingHorizontal: 20,\n    marginBottom: 20,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  summaryCard: {\n    flex: 1,\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    padding: 16,\n    marginHorizontal: 4,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n    alignItems: 'center',\n  },\n  summaryValue: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 4,\n  },\n  summaryLabel: {\n    fontSize: 12,\n    color: '#64748b',\n  },\n  insightsSection: {\n    paddingHorizontal: 20,\n    paddingBottom: 40,\n  },\n  insightsCard: {\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    padding: 20,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 8,\n    },\n    shadowOpacity: 0.15,\n    shadowRadius: 16,\n    elevation: 8,\n  },\n  insightsTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1e293b',\n    marginBottom: 8,\n  },\n  insightsText: {\n    fontSize: 14,\n    color: '#64748b',\n    lineHeight: 20,\n  },\n});","size_bytes":10575},"src/services/payment/razorpay.ts":{"content":"import RazorpayCheckout from 'react-native-razorpay';\nimport { supabase } from '../supabase/client';\nimport { RAZORPAY_KEY_ID } from '../../constants';\n\nexport interface PaymentData {\n  amount: number;\n  currency: string;\n  bookingId: string;\n  customerId: string;\n  customerName: string;\n  customerEmail: string;\n  customerPhone: string;\n  description: string;\n}\n\nexport interface PaymentResult {\n  success: boolean;\n  paymentId?: string;\n  orderId?: string;\n  error?: string;\n}\n\nexport class RazorpayService {\n  /**\n   * Initialize payment with Razorpay\n   */\n  static async initiatePayment(paymentData: PaymentData): Promise<PaymentResult> {\n    try {\n      // Create order in Supabase (this would call the edge function)\n      const { data: orderData, error: orderError } = await supabase.functions.invoke('create-razorpay-order', {\n        body: {\n          amount: paymentData.amount,\n          currency: paymentData.currency,\n          booking_id: paymentData.bookingId,\n          customer_id: paymentData.customerId,\n        }\n      });\n\n      if (orderError) {\n        console.error('Error creating Razorpay order:', orderError);\n        return {\n          success: false,\n          error: 'Failed to create payment order'\n        };\n      }\n\n      const orderId = orderData.order_id;\n\n      // Razorpay checkout options\n      const options = {\n        key: RAZORPAY_KEY_ID,\n        amount: paymentData.amount,\n        currency: paymentData.currency,\n        name: 'SDM Cab Hailing',\n        description: paymentData.description,\n        order_id: orderId,\n        prefill: {\n          name: paymentData.customerName,\n          email: paymentData.customerEmail,\n          contact: paymentData.customerPhone,\n        },\n        theme: {\n          color: '#3b82f6',\n        },\n      };\n\n      // Open Razorpay checkout\n      const paymentResponse = await RazorpayCheckout.open(options);\n\n      // Verify payment\n      const verificationResult = await this.verifyPayment({\n        paymentId: paymentResponse.razorpay_payment_id,\n        orderId: paymentResponse.razorpay_order_id,\n        signature: paymentResponse.razorpay_signature,\n        bookingId: paymentData.bookingId,\n      });\n\n      if (verificationResult.success) {\n        return {\n          success: true,\n          paymentId: paymentResponse.razorpay_payment_id,\n          orderId: paymentResponse.razorpay_order_id,\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Payment verification failed'\n        };\n      }\n\n    } catch (error: any) {\n      console.error('Razorpay payment error:', error);\n\n      // Handle specific Razorpay errors\n      if (error.code === 0) {\n        // Payment cancelled by user\n        return {\n          success: false,\n          error: 'Payment cancelled'\n        };\n      } else if (error.code === 1) {\n        // Payment failed\n        return {\n          success: false,\n          error: 'Payment failed'\n        };\n      } else {\n        return {\n          success: false,\n          error: error.description || 'Payment failed'\n        };\n      }\n    }\n  }\n\n  /**\n   * Verify payment with backend\n   */\n  static async verifyPayment(verificationData: {\n    paymentId: string;\n    orderId: string;\n    signature: string;\n    bookingId: string;\n  }): Promise<PaymentResult> {\n    try {\n      const { data, error } = await supabase.functions.invoke('verify-razorpay-payment', {\n        body: {\n          razorpay_payment_id: verificationData.paymentId,\n          razorpay_order_id: verificationData.orderId,\n          razorpay_signature: verificationData.signature,\n          booking_id: verificationData.bookingId,\n        }\n      });\n\n      if (error) {\n        console.error('Payment verification error:', error);\n        return {\n          success: false,\n          error: 'Payment verification failed'\n        };\n      }\n\n      return {\n        success: true,\n        paymentId: verificationData.paymentId,\n        orderId: verificationData.orderId,\n      };\n\n    } catch (error) {\n      console.error('Payment verification error:', error);\n      return {\n        success: false,\n        error: 'Payment verification failed'\n      };\n    }\n  }\n\n  /**\n   * Get payment status\n   */\n  static async getPaymentStatus(paymentId: string): Promise<any> {\n    try {\n      const { data, error } = await supabase\n        .from('payments')\n        .select('*')\n        .eq('razorpay_payment_id', paymentId)\n        .single();\n\n      if (error) {\n        console.error('Error fetching payment status:', error);\n        return null;\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Error fetching payment status:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Format amount for Razorpay (paise)\n   */\n  static formatAmount(amount: number): number {\n    return Math.round(amount * 100); // Convert to paise\n  }\n\n  /**\n   * Format amount for display (rupees)\n   */\n  static formatDisplayAmount(amount: number): string {\n    return `₹${amount.toFixed(2)}`;\n  }\n\n  /**\n   * Get payment method name\n   */\n  static getPaymentMethodName(method: string): string {\n    switch (method.toLowerCase()) {\n      case 'card':\n        return 'Credit/Debit Card';\n      case 'netbanking':\n        return 'Net Banking';\n      case 'wallet':\n        return 'Wallet';\n      case 'upi':\n        return 'UPI';\n      default:\n        return method;\n    }\n  }\n}","size_bytes":5396},"src/services/supabase/auth.ts":{"content":"import { supabase } from './client';\nimport { User, Customer, Driver } from '../../types';\nimport { useAppStore } from '../../stores/appStore';\n\nexport class AuthService {\n  // Sign up with email and password\n  static async signUp(\n    email: string,\n    password: string,\n    fullName: string,\n    phone?: string,\n    role: 'customer' | 'driver' = 'customer'\n  ) {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            full_name: fullName,\n            phone: phone || '',\n            role: role,\n          },\n        },\n      });\n\n      if (error) throw error;\n\n      // Create user profile in users table\n      if (data.user) {\n        const { error: profileError } = await supabase\n          .from('users')\n          .insert({\n            id: data.user.id,\n            email: data.user.email!,\n            phone: phone || null,\n            full_name: fullName,\n            role: role,\n          });\n\n        if (profileError) throw profileError;\n      }\n\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error: error as Error };\n    }\n  }\n\n  // Sign in with email and password\n  static async signIn(email: string, password: string) {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n\n      // Fetch user profile\n      if (data.user) {\n        const profile = await this.getUserProfile(data.user.id);\n        if (profile) {\n          useAppStore.getState().setUser(profile);\n          useAppStore.getState().setAuthenticated(true);\n        }\n      }\n\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error: error as Error };\n    }\n  }\n\n  // Sign out\n  static async signOut() {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n\n      useAppStore.getState().logout();\n      return { error: null };\n    } catch (error) {\n      return { error: error as Error };\n    }\n  }\n\n  // Get current user profile\n  static async getUserProfile(userId: string): Promise<User | null> {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error) throw error;\n\n      return data as User;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n  }\n\n  // Update user profile\n  static async updateProfile(userId: string, updates: Partial<User>) {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', userId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Update local state\n      useAppStore.getState().setUser(data as User);\n\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error: error as Error };\n    }\n  }\n\n  // Reset password\n  static async resetPassword(email: string) {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: 'sdmcabhailing://reset-password',\n      });\n\n      if (error) throw error;\n\n      return { error: null };\n    } catch (error) {\n      return { error: error as Error };\n    }\n  }\n\n  // Update password\n  static async updatePassword(newPassword: string) {\n    try {\n      const { error } = await supabase.auth.updateUser({\n        password: newPassword,\n      });\n\n      if (error) throw error;\n\n      return { error: null };\n    } catch (error) {\n      return { error: error as Error };\n    }\n  }\n\n  // Get current session\n  static async getCurrentSession() {\n    try {\n      const { data, error } = await supabase.auth.getSession();\n\n      if (error) throw error;\n\n      return { session: data.session, error: null };\n    } catch (error) {\n      return { session: null, error: error as Error };\n    }\n  }\n\n  // Refresh session\n  static async refreshSession() {\n    try {\n      const { data, error } = await supabase.auth.refreshSession();\n\n      if (error) throw error;\n\n      return { session: data.session, error: null };\n    } catch (error) {\n      return { session: null, error: error as Error };\n    }\n  }\n\n  // Check if user is authenticated\n  static async isAuthenticated(): Promise<boolean> {\n    try {\n      const { session } = await this.getCurrentSession();\n      return !!session;\n    } catch {\n      return false;\n    }\n  }\n\n  // Initialize auth state listener\n  static initializeAuthListener() {\n    supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('Auth state changed:', event, session?.user?.id);\n\n      if (event === 'SIGNED_IN' && session?.user) {\n        const profile = await this.getUserProfile(session.user.id);\n        if (profile) {\n          useAppStore.getState().setUser(profile);\n          useAppStore.getState().setAuthenticated(true);\n        }\n      } else if (event === 'SIGNED_OUT') {\n        useAppStore.getState().logout();\n      }\n    });\n  }\n\n  // Validate email format\n  static isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  // Validate phone format (Indian phone numbers)\n  static isValidPhone(phone: string): boolean {\n    const phoneRegex = /^[6-9]\\d{9}$/;\n    return phoneRegex.test(phone);\n  }\n\n  // Validate password strength\n  static isValidPassword(password: string): boolean {\n    return password.length >= 8;\n  }\n}","size_bytes":5625},"src/services/supabase/client.ts":{"content":"import { createClient } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { SUPABASE_URL, SUPABASE_ANON_KEY } from '../../constants';\n\nif (!SUPABASE_URL || !SUPABASE_ANON_KEY) {\n  throw new Error('Missing Supabase environment variables. Please check your .env file.');\n}\n\nexport const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n  realtime: {\n    params: {\n      eventsPerSecond: 10,\n    },\n  },\n});\n\n// Database types (matching our schema)\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          id: string;\n          email: string;\n          phone: string | null;\n          full_name: string;\n          role: 'customer' | 'driver' | 'admin' | 'vendor';\n          avatar_url: string | null;\n          created_at: string;\n          updated_at: string;\n        };\n        Insert: {\n          id?: string;\n          email: string;\n          phone?: string | null;\n          full_name: string;\n          role: 'customer' | 'driver' | 'admin' | 'vendor';\n          avatar_url?: string | null;\n          created_at?: string;\n          updated_at?: string;\n        };\n        Update: {\n          id?: string;\n          email?: string;\n          phone?: string | null;\n          full_name?: string;\n          role?: 'customer' | 'driver' | 'admin' | 'vendor';\n          avatar_url?: string | null;\n          created_at?: string;\n          updated_at?: string;\n        };\n      };\n      bookings: {\n        Row: {\n          id: string;\n          customer_id: string;\n          driver_id: string | null;\n          service_type: 'city' | 'airport' | 'outstation' | 'hourly';\n          pickup_location: any; // JSON\n          drop_location: any | null; // JSON\n          scheduled_time: string | null;\n          status: 'pending' | 'accepted' | 'in_progress' | 'completed' | 'cancelled';\n          vehicle_type: 'sedan' | 'suv' | 'premium' | 'hatchback';\n          estimated_fare: number;\n          actual_fare: number | null;\n          distance_km: number | null;\n          duration_minutes: number | null;\n          passenger_count: number;\n          special_instructions: string | null;\n          created_at: string;\n          updated_at: string;\n        };\n        Insert: {\n          id?: string;\n          customer_id: string;\n          driver_id?: string | null;\n          service_type: 'city' | 'airport' | 'outstation' | 'hourly';\n          pickup_location: any;\n          drop_location?: any | null;\n          scheduled_time?: string | null;\n          status?: 'pending' | 'accepted' | 'in_progress' | 'completed' | 'cancelled';\n          vehicle_type: 'sedan' | 'suv' | 'premium' | 'hatchback';\n          estimated_fare: number;\n          actual_fare?: number | null;\n          distance_km?: number | null;\n          duration_minutes?: number | null;\n          passenger_count: number;\n          special_instructions?: string | null;\n          created_at?: string;\n          updated_at?: string;\n        };\n        Update: {\n          id?: string;\n          customer_id?: string;\n          driver_id?: string | null;\n          service_type?: 'city' | 'airport' | 'outstation' | 'hourly';\n          pickup_location?: any;\n          drop_location?: any | null;\n          scheduled_time?: string | null;\n          status?: 'pending' | 'accepted' | 'in_progress' | 'completed' | 'cancelled';\n          vehicle_type?: 'sedan' | 'suv' | 'premium' | 'hatchback';\n          estimated_fare?: number;\n          actual_fare?: number | null;\n          distance_km?: number | null;\n          duration_minutes?: number | null;\n          passenger_count?: number;\n          special_instructions?: string | null;\n          created_at?: string;\n          updated_at?: string;\n        };\n      };\n      payments: {\n        Row: {\n          id: string;\n          booking_id: string;\n          amount: number;\n          currency: string;\n          status: 'pending' | 'paid' | 'failed' | 'refunded';\n          payment_method: string;\n          transaction_id: string | null;\n          razorpay_order_id: string | null;\n          razorpay_payment_id: string | null;\n          created_at: string;\n          updated_at: string;\n        };\n        Insert: {\n          id?: string;\n          booking_id: string;\n          amount: number;\n          currency: string;\n          status?: 'pending' | 'paid' | 'failed' | 'refunded';\n          payment_method: string;\n          transaction_id?: string | null;\n          razorpay_order_id?: string | null;\n          razorpay_payment_id?: string | null;\n          created_at?: string;\n          updated_at?: string;\n        };\n        Update: {\n          id?: string;\n          booking_id?: string;\n          amount?: number;\n          currency?: string;\n          status?: 'pending' | 'paid' | 'failed' | 'refunded';\n          payment_method?: string;\n          transaction_id?: string | null;\n          razorpay_order_id?: string | null;\n          razorpay_payment_id?: string | null;\n          created_at?: string;\n          updated_at?: string;\n        };\n      };\n      vehicles: {\n        Row: {\n          id: string;\n          driver_id: string;\n          type: 'sedan' | 'suv' | 'premium' | 'hatchback';\n          model: string;\n          license_plate: string;\n          color: string;\n          year: number;\n          capacity: number;\n          is_active: boolean;\n          created_at: string;\n          updated_at: string;\n        };\n        Insert: {\n          id?: string;\n          driver_id: string;\n          type: 'sedan' | 'suv' | 'premium' | 'hatchback';\n          model: string;\n          license_plate: string;\n          color: string;\n          year: number;\n          capacity: number;\n          is_active?: boolean;\n          created_at?: string;\n          updated_at?: string;\n        };\n        Update: {\n          id?: string;\n          driver_id?: string;\n          type?: 'sedan' | 'suv' | 'premium' | 'hatchback';\n          model?: string;\n          license_plate?: string;\n          color?: string;\n          year?: number;\n          capacity?: number;\n          is_active?: boolean;\n          created_at?: string;\n          updated_at?: string;\n        };\n      };\n      notifications: {\n        Row: {\n          id: string;\n          user_id: string;\n          title: string;\n          message: string;\n          type: 'booking' | 'payment' | 'system' | 'promotion';\n          is_read: boolean;\n          data: any | null;\n          created_at: string;\n        };\n        Insert: {\n          id?: string;\n          user_id: string;\n          title: string;\n          message: string;\n          type: 'booking' | 'payment' | 'system' | 'promotion';\n          is_read?: boolean;\n          data?: any | null;\n          created_at?: string;\n        };\n        Update: {\n          id?: string;\n          user_id?: string;\n          title?: string;\n          message?: string;\n          type?: 'booking' | 'payment' | 'system' | 'promotion';\n          is_read?: boolean;\n          data?: any | null;\n          created_at?: string;\n        };\n      };\n    };\n  };\n};","size_bytes":7247},"src/services/supabase/realtime.ts":{"content":"import { supabase } from './client';\nimport { RealtimeChannel } from '@supabase/supabase-js';\nimport { Database } from './client';\n\ntype Booking = Database['public']['Tables']['bookings']['Row'];\ntype BookingStatus = Booking['status'];\n\nexport interface BookingUpdateCallback {\n  (booking: Booking): void;\n}\n\nexport interface NotificationCallback {\n  (notification: Database['public']['Tables']['notifications']['Row']): void;\n}\n\nexport class RealtimeService {\n  private static bookingChannels: Map<string, RealtimeChannel> = new Map();\n  private static notificationChannel: RealtimeChannel | null = null;\n\n  /**\n   * Subscribe to booking status updates for a specific user\n   */\n  static subscribeToBookingUpdates(\n    userId: string,\n    userRole: 'customer' | 'driver',\n    callback: BookingUpdateCallback\n  ): string {\n    const channelName = `booking_updates_${userId}`;\n\n    // Remove existing subscription if any\n    this.unsubscribeFromBookingUpdates(userId);\n\n    const channel = supabase\n      .channel(channelName)\n      .on(\n        'postgres_changes',\n        {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'bookings',\n          filter: userRole === 'customer'\n            ? `customer_id=eq.${userId}`\n            : `driver_id=eq.${userId}`,\n        },\n        (payload) => {\n          console.log('Booking update received:', payload);\n          if (payload.new) {\n            callback(payload.new as Booking);\n          }\n        }\n      )\n      .subscribe((status) => {\n        console.log(`Booking subscription status for ${userId}:`, status);\n      });\n\n    this.bookingChannels.set(userId, channel);\n    return channelName;\n  }\n\n  /**\n   * Subscribe to notifications for a specific user\n   */\n  static subscribeToNotifications(\n    userId: string,\n    callback: NotificationCallback\n  ): string {\n    const channelName = `notifications_${userId}`;\n\n    // Remove existing subscription if any\n    this.unsubscribeFromNotifications();\n\n    const channel = supabase\n      .channel(channelName)\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'notifications',\n          filter: `user_id=eq.${userId}`,\n        },\n        (payload) => {\n          console.log('Notification received:', payload);\n          if (payload.new) {\n            callback(payload.new as Database['public']['Tables']['notifications']['Row']);\n          }\n        }\n      )\n      .subscribe((status) => {\n        console.log(`Notification subscription status for ${userId}:`, status);\n      });\n\n    this.notificationChannel = channel;\n    return channelName;\n  }\n\n  /**\n   * Subscribe to new booking requests (for drivers)\n   */\n  static subscribeToNewBookings(\n    callback: BookingUpdateCallback\n  ): string {\n    const channelName = 'new_bookings';\n\n    const channel = supabase\n      .channel(channelName)\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'bookings',\n          filter: 'status=eq.pending',\n        },\n        (payload) => {\n          console.log('New booking received:', payload);\n          if (payload.new) {\n            callback(payload.new as Booking);\n          }\n        }\n      )\n      .subscribe((status) => {\n        console.log('New bookings subscription status:', status);\n      });\n\n    return channelName;\n  }\n\n  /**\n   * Subscribe to payment status updates\n   */\n  static subscribeToPaymentUpdates(\n    bookingId: string,\n    callback: (payment: Database['public']['Tables']['payments']['Row']) => void\n  ): string {\n    const channelName = `payment_updates_${bookingId}`;\n\n    const channel = supabase\n      .channel(channelName)\n      .on(\n        'postgres_changes',\n        {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'payments',\n          filter: `booking_id=eq.${bookingId}`,\n        },\n        (payload) => {\n          console.log('Payment update received:', payload);\n          if (payload.new) {\n            callback(payload.new as Database['public']['Tables']['payments']['Row']);\n          }\n        }\n      )\n      .subscribe((status) => {\n        console.log(`Payment subscription status for ${bookingId}:`, status);\n      });\n\n    return channelName;\n  }\n\n  /**\n   * Unsubscribe from booking updates for a specific user\n   */\n  static unsubscribeFromBookingUpdates(userId: string): void {\n    const channel = this.bookingChannels.get(userId);\n    if (channel) {\n      supabase.removeChannel(channel);\n      this.bookingChannels.delete(userId);\n      console.log(`Unsubscribed from booking updates for ${userId}`);\n    }\n  }\n\n  /**\n   * Unsubscribe from notifications\n   */\n  static unsubscribeFromNotifications(): void {\n    if (this.notificationChannel) {\n      supabase.removeChannel(this.notificationChannel);\n      this.notificationChannel = null;\n      console.log('Unsubscribed from notifications');\n    }\n  }\n\n  /**\n   * Unsubscribe from all channels\n   */\n  static unsubscribeAll(): void {\n    // Unsubscribe from all booking channels\n    for (const [userId, channel] of this.bookingChannels) {\n      supabase.removeChannel(channel);\n      console.log(`Unsubscribed from booking updates for ${userId}`);\n    }\n    this.bookingChannels.clear();\n\n    // Unsubscribe from notifications\n    if (this.notificationChannel) {\n      supabase.removeChannel(this.notificationChannel);\n      this.notificationChannel = null;\n      console.log('Unsubscribed from notifications');\n    }\n  }\n\n  /**\n   * Get booking status change message\n   */\n  static getBookingStatusMessage(status: BookingStatus): string {\n    switch (status) {\n      case 'pending':\n        return 'Your booking request has been submitted';\n      case 'accepted':\n        return 'Driver has accepted your booking';\n      case 'in_progress':\n        return 'Your ride is in progress';\n      case 'completed':\n        return 'Your ride has been completed';\n      case 'cancelled':\n        return 'Your booking has been cancelled';\n      default:\n        return 'Booking status updated';\n    }\n  }\n\n  /**\n   * Get notification type color\n   */\n  static getNotificationColor(type: string): string {\n    switch (type) {\n      case 'booking':\n        return '#2563eb'; // blue\n      case 'payment':\n        return '#16a34a'; // green\n      case 'system':\n        return '#ca8a04'; // yellow\n      case 'promotion':\n        return '#dc2626'; // red\n      default:\n        return '#6b7280'; // gray\n    }\n  }\n}","size_bytes":6501},"replit.md":{"content":"# SDM Cab Hailing App\n\n## Overview\nThis is a React Native/Expo-based cab hailing application similar to Uber/Lyft, running as a web application in the Replit environment. The app provides booking services for city rides, airport transfers, outstation trips, and hourly rentals.\n\n## Project Architecture\n- **Frontend**: React Native Web with Expo SDK 53\n- **Styling**: NativeWind (Tailwind CSS for React Native)  \n- **Backend**: Supabase (PostgreSQL database, authentication, real-time subscriptions)\n- **Maps**: Google Maps API integration\n- **Payments**: Razorpay integration\n- **State Management**: Zustand store\n\n## Key Features\n- User authentication (customer/driver/admin/vendor roles)\n- Real-time ride booking and tracking\n- Multiple service types (city, airport, outstation, hourly)\n- Vehicle selection (sedan, SUV, premium, hatchback)\n- Payment processing with Razorpay\n- Notifications system\n- Google Maps integration\n\n## Environment Setup\nEnvironment variables are configured in `.env` file:\n- `EXPO_PUBLIC_SUPABASE_URL`: Supabase project URL\n- `EXPO_PUBLIC_SUPABASE_ANON_KEY`: Supabase anonymous key\n- `EXPO_PUBLIC_GOOGLE_MAPS_API_KEY`: Google Maps API key\n- `EXPO_PUBLIC_GOOGLE_PLACES_API_KEY`: Google Places API key\n- `EXPO_PUBLIC_RAZORPAY_KEY_ID`: Razorpay payment gateway key\n\n## Development Setup\nThe application runs on port 5000 using Expo Web with the `lan` host setting to allow external access in the Replit environment.\n\n## Recent Changes (September 4, 2025)\n- Set up project in Replit environment\n- Configured Expo Web development server with proper host settings\n- Installed all dependencies and resolved build issues\n- Configured deployment settings for production\n- Application successfully runs and displays the cab booking interface\n\n## Deployment Configuration\n- **Target**: Autoscale (stateless web application)\n- **Build**: Exports Expo web bundle\n- **Runtime**: Serves static files using serve package\n\n## Project Status\n✅ Successfully imported and configured for Replit environment\n✅ Development server running on port 5000\n✅ All core dependencies installed and working\n✅ Deployment configuration completed","size_bytes":2147}},"version":1}